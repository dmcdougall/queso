.TH "libMesh::Parallel::StandardType< TypeVector< T > >" 3 "Tue May 6 2014" "libMesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libMesh::Parallel::StandardType< TypeVector< T > > \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <parallel_algebra\&.h>\fP
.PP
Inherits \fBlibMesh::Parallel::DataType\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBStandardType\fP (const \fBTypeVector\fP< T > *example=NULL)"
.br
.ti -1c
.RI "\fBoperator const data_type &\fP () const "
.br
.ti -1c
.RI "\fBoperator data_type &\fP ()"
.br
.ti -1c
.RI "void \fBcommit\fP ()"
.br
.ti -1c
.RI "void \fBfree\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBdata_type\fP \fB_datatype\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T>class libMesh::Parallel::StandardType< TypeVector< T > >"

.PP
Definition at line 54 of file parallel_algebra\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T > \fBlibMesh::Parallel::StandardType\fP< \fBTypeVector\fP< T > >::\fBStandardType\fP (const \fBTypeVector\fP< T > *example = \fCNULL\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 58 of file parallel_algebra\&.h\&.
.PP
References libMesh::Parallel::DataType::_datatype, libMesh::libMeshPrivateData::_is_initialized, libMesh::AutoPtr< Tp >::get(), and libMesh::AutoPtr< Tp >::reset()\&.
.PP
.nf
58                                                   {
59     // We need an example for MPI_Address to use
60     TypeVector<T> *ex;
61     AutoPtr<TypeVector<T> > temp;
62     if (example)
63       ex = const_cast<TypeVector<T> *>(example);
64     else
65       {
66         temp\&.reset(new TypeVector<T>());
67         ex = temp\&.get();
68       }
69 
70     // _static_type never gets freed, but it only gets committed once
71     // per T, so it's not a *huge* memory leak\&.\&.\&.
72     static data_type _static_type;
73     static bool _is_initialized = false;
74     if (!_is_initialized)
75       {
76 #ifdef LIBMESH_HAVE_MPI
77         StandardType<T> T_type(&((*ex)(0)));
78 
79 #if MPI_VERSION == 1
80 
81         int blocklengths[LIBMESH_DIM+2];
82         MPI_Aint displs[LIBMESH_DIM+2];
83         MPI_Datatype types[LIBMESH_DIM+2];
84         MPI_Aint start, later;
85 
86         MPI_Address(ex, &start);
87         blocklengths[0] = 1;
88         displs[0] = 0;
89         types[0] = MPI_LB;
90         for (unsigned int i=0; i != LIBMESH_DIM; ++i)
91           {
92             MPI_Address(&((*ex)(i)), &later);
93             blocklengths[i+1] = 1;
94             displs[i+1] = later - start;
95             types[i+1] = T_type;
96           }
97         MPI_Address((ex+1), &later);
98         blocklengths[LIBMESH_DIM+1] = 1;
99         displs[LIBMESH_DIM+1] = later - start;
100         types[LIBMESH_DIM+1] = MPI_UB;
101 
102         MPI_Type_struct (LIBMESH_DIM+2, blocklengths, displs, types, &_static_type);
103 
104 #else // MPI_VERSION >= 2
105 
106         int blocklength = LIBMESH_DIM;
107         MPI_Aint displs, start;
108         MPI_Datatype tmptype, type = T_type;
109 
110         MPI_Get_address (ex,   &start);
111         MPI_Get_address (&((*ex)(0)), &displs);
112 
113         // subtract off offset to first value from the beginning of the structure
114         displs -= start;
115 
116         // create a prototype structure
117         MPI_Type_create_struct (1, &blocklength, &displs, &type, &tmptype);
118 
119         // resize the structure type to account for padding, if any
120         MPI_Type_create_resized (tmptype, 0, sizeof(TypeVector<T>), &_static_type);
121 #endif
122 
123         MPI_Type_commit (&_static_type);
124 #endif // #ifdef LIBMESH_HAVE_MPI
125 
126         _is_initialized = true;
127       }
128     _datatype = _static_type;
129   }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void libMesh::Parallel::DataType::commit ()\fC [inline]\fP, \fC [inherited]\fP"

.PP
Definition at line 277 of file parallel\&.h\&.
.PP
References libMesh::Parallel::DataType::_datatype\&.
.PP
Referenced by libMesh::Parallel::DataType::DataType()\&.
.PP
.nf
278   {
279 #ifdef LIBMESH_HAVE_MPI
280     MPI_Type_commit (&_datatype);
281 #endif
282   }
.fi
.SS "void libMesh::Parallel::DataType::free ()\fC [inline]\fP, \fC [inherited]\fP"

.PP
Definition at line 284 of file parallel\&.h\&.
.PP
References libMesh::Parallel::DataType::_datatype\&.
.PP
Referenced by libMesh::Parallel::StandardType< std::pair< T1, T2 > >::~StandardType(), libMesh::Parallel::StandardType< std::complex< T > >::~StandardType(), libMesh::Parallel::StandardType< TypeTensor< T > >::~StandardType(), and libMesh::Parallel::StandardType< TensorValue< T > >::~StandardType()\&.
.PP
.nf
285   {
286 #ifdef LIBMESH_HAVE_MPI
287     MPI_Type_free (&_datatype);
288 #endif
289   }
.fi
.SS "libMesh::Parallel::DataType::operator const \fBdata_type\fP & () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
Definition at line 265 of file parallel\&.h\&.
.PP
References libMesh::Parallel::DataType::_datatype\&.
.PP
.nf
266   { return _datatype; }
.fi
.SS "libMesh::Parallel::DataType::operator \fBdata_type\fP & ()\fC [inline]\fP, \fC [inherited]\fP"

.PP
Definition at line 268 of file parallel\&.h\&.
.PP
References libMesh::Parallel::DataType::_datatype\&.
.PP
.nf
269   { return _datatype; }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBdata_type\fP libMesh::Parallel::DataType::_datatype\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 293 of file parallel\&.h\&.
.PP
Referenced by libMesh::Parallel::DataType::commit(), libMesh::Parallel::DataType::DataType(), libMesh::Parallel::DataType::free(), libMesh::Parallel::DataType::operator const data_type &(), libMesh::Parallel::DataType::operator data_type &(), libMesh::Parallel::DataType::operator=(), libMesh::Parallel::StandardType< Hilbert::HilbertIndices >::StandardType(), StandardType(), libMesh::Parallel::StandardType< std::pair< T1, T2 > >::StandardType(), libMesh::Parallel::StandardType< VectorValue< T > >::StandardType(), and libMesh::Parallel::StandardType< Point >::StandardType()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libMesh from the source code\&.
