.TH "libMesh::HPSingularity" 3 "Tue May 6 2014" "libMesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libMesh::HPSingularity \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <hp_singular\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHPSingularity\fP ()"
.br
.ti -1c
.RI "virtual \fB~HPSingularity\fP ()"
.br
.ti -1c
.RI "virtual void \fBselect_refinement\fP (\fBSystem\fP &system)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "std::list< \fBPoint\fP > \fBsingular_points\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class uses a user-provided list of singularity locations to choose between h refining and p elevation\&. Currently we assume that a set of elements has already been flagged for h refinement - any elements which do not contain a user-provided singular point are instead flagged for p refinement\&.
.PP
\fBAuthor:\fP
.RS 4
Roy H\&. Stogner, 2006\&. 
.RE
.PP

.PP
Definition at line 48 of file hp_singular\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "libMesh::HPSingularity::HPSingularity ()\fC [inline]\fP"
Constructor\&. 
.PP
Definition at line 55 of file hp_singular\&.h\&.
.PP
.nf
56   {
57     libmesh_experimental();
58   }
.fi
.SS "virtual libMesh::HPSingularity::~HPSingularity ()\fC [inline]\fP, \fC [virtual]\fP"
Destructor\&. 
.PP
Definition at line 63 of file hp_singular\&.h\&.
.PP
.nf
63 {}
.fi
.SH "Member Function Documentation"
.PP 
.SS "void libMesh::HPSingularity::select_refinement (\fBSystem\fP &system)\fC [virtual]\fP"
This pure virtual function must be redefined in derived classes to take a mesh flagged for h refinement and potentially change the desired refinement type\&. 
.PP
Definition at line 36 of file hp_singular\&.C\&.
.PP
References libMesh::MeshBase::active_local_elements_begin(), libMesh::MeshBase::active_local_elements_end(), libMesh::Elem::contains_point(), libMesh::Elem::DO_NOTHING, libMesh::System::get_mesh(), mesh, libMesh::Elem::REFINE, libMesh::Elem::refinement_flag(), libMesh::Elem::set_p_refinement_flag(), libMesh::Elem::set_refinement_flag(), singular_points, libMesh::START_LOG(), and libMesh::STOP_LOG()\&.
.PP
.nf
37 {
38   START_LOG("select_refinement()", "HPSingularity");
39 
40   // The current mesh
41   MeshBase& mesh = system\&.get_mesh();
42 
43   MeshBase::element_iterator       elem_it  =
44     mesh\&.active_local_elements_begin();
45   const MeshBase::element_iterator elem_end =
46     mesh\&.active_local_elements_end();
47 
48   for (; elem_it != elem_end; ++elem_it)
49     {
50       Elem* elem = *elem_it;
51 
52       // We're only checking elements that are already flagged for h
53       // refinement
54       if (elem->refinement_flag() != Elem::REFINE)
55         continue;
56 
57       elem->set_p_refinement_flag(Elem::REFINE);
58       elem->set_refinement_flag(Elem::DO_NOTHING);
59 
60       for (std::list<Point>::iterator ppoint =
61              singular_points\&.begin();
62            ppoint != singular_points\&.end(); ++ppoint)
63         {
64           if (elem->contains_point(*ppoint))
65             {
66               elem->set_p_refinement_flag(Elem::DO_NOTHING);
67               elem->set_refinement_flag(Elem::REFINE);
68               break;
69             }
70         }
71     }
72 
73   STOP_LOG("select_refinement()", "HPSingularity");
74 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "std::list<\fBPoint\fP> libMesh::HPSingularity::singular_points"
This list, to be filled by the user, should include all singular points in the solution\&. 
.PP
Definition at line 78 of file hp_singular\&.h\&.
.PP
Referenced by select_refinement()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libMesh from the source code\&.
