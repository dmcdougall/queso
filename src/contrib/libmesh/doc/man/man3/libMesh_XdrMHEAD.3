.TH "libMesh::XdrMHEAD" 3 "Tue May 6 2014" "libMesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libMesh::XdrMHEAD \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <xdr_mhead\&.h>\fP
.PP
Inherits \fBlibMesh::XdrHEAD\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBXdrMHEAD\fP ()"
.br
.ti -1c
.RI "\fB~XdrMHEAD\fP ()"
.br
.ti -1c
.RI "void \fBsetNumEl\fP (int numel)"
.br
.ti -1c
.RI "int \fBgetNumEl\fP () const "
.br
.ti -1c
.RI "void \fBsetSumWghts\fP (int sumWghts)"
.br
.ti -1c
.RI "int \fBgetSumWghts\fP () const "
.br
.ti -1c
.RI "unsigned int \fBget_n_blocks\fP () const "
.br
.ti -1c
.RI "void \fBset_n_blocks\fP (const unsigned int nb)"
.br
.ti -1c
.RI "void \fBget_block_elt_types\fP (std::vector< \fBElemType\fP > &bet) const "
.br
.ti -1c
.RI "void \fBset_block_elt_types\fP (const std::vector< \fBElemType\fP > &bet)"
.br
.ti -1c
.RI "void \fBget_num_elem_each_block\fP (std::vector< unsigned int > &neeb) const "
.br
.ti -1c
.RI "void \fBset_num_elem_each_block\fP (const std::vector< unsigned int > &neeb)"
.br
.ti -1c
.RI "void \fBsetId\fP (const char *id)"
.br
.ti -1c
.RI "const char * \fBgetId\fP () const "
.br
.ti -1c
.RI "void \fBsetTitle\fP (const char *title)"
.br
.ti -1c
.RI "const char * \fBgetTitle\fP () const "
.br
.ti -1c
.RI "void \fBsetNumNodes\fP (int numNodes)"
.br
.ti -1c
.RI "int \fBgetNumNodes\fP () const "
.br
.ti -1c
.RI "void \fBsetNumBCs\fP (int numBCs)"
.br
.ti -1c
.RI "int \fBgetNumBCs\fP () const "
.br
.ti -1c
.RI "void \fBsetStrSize\fP (int strSize)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "char * \fBcpyString\fP (const char *src, int len=-1)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "int \fBm_wrtVar\fP"
.br
.ti -1c
.RI "int \fBm_numvar\fP"
.br
.ti -1c
.RI "int \fBm_meshCnt\fP"
.br
.ti -1c
.RI "int \fBm_kstep\fP"
.br
.ti -1c
.RI "int \fBm_numel\fP"
.br
.ti -1c
.RI "int \fBm_numNodes\fP"
.br
.ti -1c
.RI "int \fBm_sumWghts\fP"
.br
.ti -1c
.RI "int \fBm_numBCs\fP"
.br
.ti -1c
.RI "int \fBm_strSize\fP"
.br
.ti -1c
.RI "char * \fBmp_id\fP"
.br
.ti -1c
.RI "char * \fBmp_title\fP"
.br
.ti -1c
.RI "char * \fBmp_userTitle\fP"
.br
.ti -1c
.RI "char * \fBmp_varTitle\fP"
.br
.ti -1c
.RI "xdr_Real \fBm_time\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "unsigned int \fB_n_blocks\fP"
.br
.ti -1c
.RI "std::vector< \fBElemType\fP > \fBblock_elt_types\fP"
.br
.ti -1c
.RI "std::vector< unsigned int > \fBnum_elem_each_block\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBXdrMESH\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
The \fC\fBXdrMHEAD\fP\fP class\&. This class is responsible for reading/writing \fCxdr\fP mesh file headers\&.
.PP
\fBAuthor:\fP
.RS 4
Bill Barth, Robert McLay\&. Modified: John W\&. Peterson 
.RE
.PP

.PP
Definition at line 39 of file xdr_mhead\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "libMesh::XdrMHEAD::XdrMHEAD ()\fC [inline]\fP"
Constructor\&. Initializes the number of blocks in the mesh to 1 and the number of levels to zero\&. 
.PP
Definition at line 47 of file xdr_mhead\&.h\&.
.PP
.nf
47 : _n_blocks(1) {}
.fi
.SS "libMesh::XdrMHEAD::~XdrMHEAD ()\fC [inline]\fP"
Destructor\&. 
.PP
Definition at line 52 of file xdr_mhead\&.h\&.
.PP
.nf
52 {}
.fi
.SH "Member Function Documentation"
.PP 
.SS "char * libMesh::XdrHEAD::cpyString (const char *src, intlen = \fC-1\fP)\fC [protected]\fP, \fC [inherited]\fP"
Uses std::memcpy to create an exact copy of \fCsrc\fP, then returns that copy\&. Note: I don't know where the memory allocated for this copy gets deleted!
.PP
\fBReturns:\fP
.RS 4
Copy of \fCsrc\fP 
.RE
.PP

.PP
Definition at line 59 of file xdr_head\&.C\&.
.PP
Referenced by libMesh::XdrMESH::header(), libMesh::XdrHEAD::setId(), libMesh::XdrHEAD::setTitle(), libMesh::XdrSHEAD::setUserTitle(), and libMesh::XdrSHEAD::setVarTitle()\&.
.PP
.nf
60 {
61   char* temp = NULL;
62   int myLen = len;
63   if(src)
64     {
65       if (myLen == -1)
66         myLen = libmesh_cast_int<int>(std::strlen(src))+1;
67       temp = new char[myLen];
68       temp = (char *) std::memcpy(temp, src, (myLen)*sizeof(char));
69     }
70   return temp;
71 }
.fi
.SS "void libMesh::XdrMHEAD::get_block_elt_types (std::vector< \fBElemType\fP > &bet) const\fC [inline]\fP"
Element block types are defined in \fBelem_type\&.h\fP\&. They may be for example TRI3, TRI6, QUAD4, etc\&.
.PP
\fBReturns:\fP
.RS 4
A writeable reference to the vector of element block types\&. 
.RE
.PP

.PP
Definition at line 99 of file xdr_mhead\&.h\&.
.PP
References block_elt_types\&.
.PP
Referenced by libMesh::XdrMESH::header(), and libMesh::LegacyXdrIO::read_mesh()\&.
.PP
.nf
99 { bet = block_elt_types; }
.fi
.SS "unsigned int libMesh::XdrMHEAD::get_n_blocks () const\fC [inline]\fP"
A mesh block by definition contains only a single type of element\&.
.PP
\fBReturns:\fP
.RS 4
The number of mesh blocks\&. 
.RE
.PP

.PP
Definition at line 86 of file xdr_mhead\&.h\&.
.PP
References _n_blocks\&.
.PP
Referenced by libMesh::XdrMESH::header(), and libMesh::LegacyXdrIO::read_mesh()\&.
.PP
.nf
86 { return _n_blocks; }
.fi
.SS "void libMesh::XdrMHEAD::get_num_elem_each_block (std::vector< unsigned int > &neeb) const\fC [inline]\fP"
The size of each element block is the total number of a given type of element in the mesh\&.
.PP
\fBReturns:\fP
.RS 4
The vector of block sizes 
.RE
.PP

.PP
Definition at line 113 of file xdr_mhead\&.h\&.
.PP
References num_elem_each_block\&.
.PP
Referenced by libMesh::XdrMESH::header(), and libMesh::LegacyXdrIO::read_mesh()\&.
.PP
.nf
113 { neeb = num_elem_each_block; }
.fi
.SS "const char* libMesh::XdrHEAD::getId () const\fC [inline]\fP, \fC [inherited]\fP"
Get the mesh/solution file id\&. 
.PP
Definition at line 55 of file xdr_head\&.h\&.
.PP
References libMesh::XdrHEAD::mp_id\&.
.PP
Referenced by libMesh::XdrSOLN::header(), and libMesh::XdrMESH::header()\&.
.PP
.nf
55 { return mp_id; }
.fi
.SS "int libMesh::XdrHEAD::getNumBCs () const\fC [inline]\fP, \fC [inherited]\fP"
Get the number of boundary conditions in them mesh/solution file\&. 
.PP
Definition at line 91 of file xdr_head\&.h\&.
.PP
References libMesh::XdrHEAD::m_numBCs\&.
.PP
Referenced by libMesh::LegacyXdrIO::read_mesh()\&.
.PP
.nf
91 { return m_numBCs; }
.fi
.SS "int libMesh::XdrMHEAD::getNumEl () const\fC [inline]\fP"
Get the number of elements in the mesh\&. 
.PP
Definition at line 64 of file xdr_mhead\&.h\&.
.PP
References libMesh::XdrHEAD::m_numel\&.
.PP
Referenced by libMesh::LegacyXdrIO::read_mesh()\&.
.PP
.nf
64 { return m_numel; }
.fi
.SS "int libMesh::XdrHEAD::getNumNodes () const\fC [inline]\fP, \fC [inherited]\fP"
Get the total number of nodes in the mesh/solution file\&. 
.PP
Definition at line 77 of file xdr_head\&.h\&.
.PP
References libMesh::XdrHEAD::m_numNodes\&.
.PP
Referenced by libMesh::LegacyXdrIO::read_mesh(), and libMesh::LegacyXdrIO::read_soln()\&.
.PP
.nf
77 { return m_numNodes; }
.fi
.SS "int libMesh::XdrMHEAD::getSumWghts () const\fC [inline]\fP"
Get the mesh weighting\&.
.PP
{DEAL mesh specific get/set functions} 
.PP
Definition at line 78 of file xdr_mhead\&.h\&.
.PP
References libMesh::XdrHEAD::m_sumWghts\&.
.PP
Referenced by libMesh::LegacyXdrIO::read_mesh()\&.
.PP
.nf
78 { return m_sumWghts; }
.fi
.SS "const char* libMesh::XdrHEAD::getTitle () const\fC [inline]\fP, \fC [inherited]\fP"
Get the mesh/solution file title\&. 
.PP
Definition at line 65 of file xdr_head\&.h\&.
.PP
References libMesh::XdrHEAD::mp_title\&.
.PP
Referenced by libMesh::XdrSOLN::header(), and libMesh::XdrMESH::header()\&.
.PP
.nf
65 { return mp_title; }
.fi
.SS "void libMesh::XdrMHEAD::set_block_elt_types (const std::vector< \fBElemType\fP > &bet)\fC [inline]\fP"
Set the vector of element block types 
.PP
Definition at line 104 of file xdr_mhead\&.h\&.
.PP
References block_elt_types\&.
.PP
Referenced by libMesh::XdrMESH::header(), and libMesh::LegacyXdrIO::write_mesh()\&.
.PP
.nf
104 { block_elt_types = bet; }
.fi
.SS "void libMesh::XdrMHEAD::set_n_blocks (const unsigned intnb)\fC [inline]\fP"
Sets the number of mesh blocks\&. 
.PP
Definition at line 91 of file xdr_mhead\&.h\&.
.PP
References _n_blocks\&.
.PP
Referenced by libMesh::XdrMESH::header(), and libMesh::LegacyXdrIO::write_mesh()\&.
.PP
.nf
91 { this->_n_blocks = nb; }
.fi
.SS "void libMesh::XdrMHEAD::set_num_elem_each_block (const std::vector< unsigned int > &neeb)\fC [inline]\fP"
Set the vector of block sizes 
.PP
Definition at line 118 of file xdr_mhead\&.h\&.
.PP
References num_elem_each_block\&.
.PP
Referenced by libMesh::XdrMESH::header(), and libMesh::LegacyXdrIO::write_mesh()\&.
.PP
.nf
118 { num_elem_each_block = neeb; }
.fi
.SS "void libMesh::XdrHEAD::setId (const char *id)\fC [inline]\fP, \fC [inherited]\fP"
Set the mesh/solution file id\&. 
.PP
Definition at line 50 of file xdr_head\&.h\&.
.PP
References libMesh::XdrHEAD::cpyString(), and libMesh::XdrHEAD::mp_id\&.
.PP
Referenced by libMesh::XdrSOLN::header(), libMesh::XdrMESH::header(), libMesh::LegacyXdrIO::write_mesh(), and libMesh::LegacyXdrIO::write_soln()\&.
.PP
.nf
50 { delete [] mp_id; mp_id = cpyString(id); }
.fi
.SS "void libMesh::XdrHEAD::setNumBCs (intnumBCs)\fC [inline]\fP, \fC [inherited]\fP"
Set the number of boundary conditions in the mesh/solution file\&. 
.PP
Definition at line 84 of file xdr_head\&.h\&.
.PP
References libMesh::XdrHEAD::m_numBCs\&.
.PP
Referenced by libMesh::LegacyXdrIO::write_mesh(), and libMesh::LegacyXdrIO::write_soln()\&.
.PP
.nf
84 { m_numBCs = numBCs; }
.fi
.SS "void libMesh::XdrMHEAD::setNumEl (intnumel)\fC [inline]\fP"
Set the number of elements in the mesh\&. 
.PP
Definition at line 58 of file xdr_mhead\&.h\&.
.PP
References libMesh::XdrHEAD::m_numel\&.
.PP
Referenced by libMesh::LegacyXdrIO::write_mesh()\&.
.PP
.nf
58 { m_numel = numel; }
.fi
.SS "void libMesh::XdrHEAD::setNumNodes (intnumNodes)\fC [inline]\fP, \fC [inherited]\fP"
Set the total number of nodes in the mesh/solution file\&. 
.PP
Definition at line 71 of file xdr_head\&.h\&.
.PP
References libMesh::XdrHEAD::m_numNodes\&.
.PP
Referenced by libMesh::LegacyXdrIO::write_mesh(), and libMesh::LegacyXdrIO::write_soln()\&.
.PP
.nf
71 { m_numNodes = numNodes; }
.fi
.SS "void libMesh::XdrHEAD::setStrSize (intstrSize)\fC [inline]\fP, \fC [inherited]\fP"
Set the string size of the mesh/solution file\&. (?) 
.PP
Definition at line 97 of file xdr_head\&.h\&.
.PP
References libMesh::XdrHEAD::m_strSize\&.
.PP
Referenced by libMesh::LegacyXdrIO::write_mesh(), and libMesh::LegacyXdrIO::write_soln()\&.
.PP
.nf
97 { m_strSize = strSize; }
.fi
.SS "void libMesh::XdrMHEAD::setSumWghts (intsumWghts)\fC [inline]\fP"
Set the mesh weighting\&. You probably shouldn't set this yourself \&.\&.\&. 
.PP
Definition at line 71 of file xdr_mhead\&.h\&.
.PP
References libMesh::XdrHEAD::m_sumWghts\&.
.PP
Referenced by libMesh::LegacyXdrIO::write_mesh()\&.
.PP
.nf
71 { m_sumWghts = sumWghts; }
.fi
.SS "void libMesh::XdrHEAD::setTitle (const char *title)\fC [inline]\fP, \fC [inherited]\fP"
Set the mesh/solution file title\&. 
.PP
Definition at line 60 of file xdr_head\&.h\&.
.PP
References libMesh::XdrHEAD::cpyString(), and libMesh::XdrHEAD::mp_title\&.
.PP
Referenced by libMesh::XdrSOLN::header(), libMesh::XdrMESH::header(), libMesh::LegacyXdrIO::write_mesh(), and libMesh::LegacyXdrIO::write_soln()\&.
.PP
.nf
60 { delete [] mp_title; mp_title = cpyString(title); }
.fi
.SH "Friends And Related Function Documentation"
.PP 
.SS "friend class \fBXdrMESH\fP\fC [friend]\fP"

.PP
Definition at line 41 of file xdr_mhead\&.h\&.
.SH "Member Data Documentation"
.PP 
.SS "unsigned int libMesh::XdrMHEAD::_n_blocks\fC [private]\fP"
DEAL mesh specific variables:
.PP
Tells the total number of element blocks\&. An element block is contains only a single type of element\&. 
.PP
Definition at line 132 of file xdr_mhead\&.h\&.
.PP
Referenced by get_n_blocks(), and set_n_blocks()\&.
.SS "std::vector<\fBElemType\fP> libMesh::XdrMHEAD::block_elt_types\fC [private]\fP"
A vector of length n_blocks which describes the elemnt type in each block e\&.g\&. TRI, QUAD, etc\&. Note: The element type uniquely defines the number of nodes for that element\&. 
.PP
\fBSee Also:\fP
.RS 4
\fBelem_type\&.h\fP \fBfor\fP more 
.RE
.PP

.PP
Definition at line 144 of file xdr_mhead\&.h\&.
.PP
Referenced by get_block_elt_types(), and set_block_elt_types()\&.
.SS "int libMesh::XdrHEAD::m_kstep\fC [protected]\fP, \fC [inherited]\fP"
The internal solution number\&. 
.PP
Definition at line 131 of file xdr_head\&.h\&.
.PP
Referenced by libMesh::XdrSOLN::header(), libMesh::XdrSHEAD::setKstep(), and libMesh::XdrHEAD::XdrHEAD()\&.
.SS "int libMesh::XdrHEAD::m_meshCnt\fC [protected]\fP, \fC [inherited]\fP"
The mesh file number which corresponds to a given solution file\&. 
.PP
Definition at line 126 of file xdr_head\&.h\&.
.PP
Referenced by libMesh::XdrSOLN::header(), libMesh::XdrSHEAD::setMeshCnt(), and libMesh::XdrHEAD::XdrHEAD()\&.
.SS "int libMesh::XdrHEAD::m_numBCs\fC [protected]\fP, \fC [inherited]\fP"
Number of boundary conditions in the solution/mesh\&. 
.PP
Definition at line 156 of file xdr_head\&.h\&.
.PP
Referenced by libMesh::XdrHEAD::getNumBCs(), libMesh::XdrMESH::header(), libMesh::XdrHEAD::setNumBCs(), and libMesh::XdrHEAD::XdrHEAD()\&.
.SS "int libMesh::XdrHEAD::m_numel\fC [protected]\fP, \fC [inherited]\fP"
Number of elemetns in the solution/mesh\&. 
.PP
Definition at line 137 of file xdr_head\&.h\&.
.PP
Referenced by getNumEl(), libMesh::XdrMESH::header(), setNumEl(), and libMesh::XdrHEAD::XdrHEAD()\&.
.SS "int libMesh::XdrHEAD::m_numNodes\fC [protected]\fP, \fC [inherited]\fP"
Number of nodes in the solution/mesh\&. 
.PP
Definition at line 143 of file xdr_head\&.h\&.
.PP
Referenced by libMesh::XdrHEAD::getNumNodes(), libMesh::XdrSOLN::header(), libMesh::XdrMESH::header(), libMesh::XdrHEAD::setNumNodes(), and libMesh::XdrHEAD::XdrHEAD()\&.
.SS "int libMesh::XdrHEAD::m_numvar\fC [protected]\fP, \fC [inherited]\fP"
Total number of variables, may differ from the total number of variables actually written\&. 
.PP
Definition at line 119 of file xdr_head\&.h\&.
.PP
Referenced by libMesh::XdrSOLN::header(), libMesh::XdrSHEAD::setNumVar(), and libMesh::XdrHEAD::XdrHEAD()\&.
.SS "int libMesh::XdrHEAD::m_strSize\fC [protected]\fP, \fC [inherited]\fP"
String size (Not sure of what?) 
.PP
Definition at line 161 of file xdr_head\&.h\&.
.PP
Referenced by libMesh::XdrSOLN::header(), libMesh::XdrMESH::header(), libMesh::XdrHEAD::setStrSize(), and libMesh::XdrHEAD::XdrHEAD()\&.
.SS "int libMesh::XdrHEAD::m_sumWghts\fC [protected]\fP, \fC [inherited]\fP"
Total mesh weighting i\&.e\&. How many nodes are there and where are they? 
.PP
Definition at line 150 of file xdr_head\&.h\&.
.PP
Referenced by getSumWghts(), libMesh::XdrMESH::header(), setSumWghts(), and libMesh::XdrHEAD::XdrHEAD()\&.
.SS "xdr_Real libMesh::XdrHEAD::m_time\fC [protected]\fP, \fC [inherited]\fP"
Current solution time\&. 
.PP
Definition at line 186 of file xdr_head\&.h\&.
.PP
Referenced by libMesh::XdrSOLN::header(), libMesh::XdrSHEAD::setTime(), and libMesh::XdrHEAD::XdrHEAD()\&.
.SS "int libMesh::XdrHEAD::m_wrtVar\fC [protected]\fP, \fC [inherited]\fP"
Set the string size of the mesh /solutionfile\&. (?) Number of variables written to output, e\&.g\&. u,v,w,p,T = 5 
.PP
Definition at line 111 of file xdr_head\&.h\&.
.PP
Referenced by libMesh::XdrSHEAD::getWrtVar(), libMesh::XdrSOLN::header(), libMesh::XdrSHEAD::setWrtVar(), and libMesh::XdrHEAD::XdrHEAD()\&.
.SS "char* libMesh::XdrHEAD::mp_id\fC [protected]\fP, \fC [inherited]\fP"
An ID string for the file\&. 
.PP
Definition at line 166 of file xdr_head\&.h\&.
.PP
Referenced by libMesh::XdrHEAD::getId(), libMesh::XdrSOLN::header(), libMesh::XdrMESH::header(), libMesh::XdrHEAD::setId(), libMesh::XdrHEAD::XdrHEAD(), and libMesh::XdrHEAD::~XdrHEAD()\&.
.SS "char* libMesh::XdrHEAD::mp_title\fC [protected]\fP, \fC [inherited]\fP"
A title string for the file\&. 
.PP
Definition at line 171 of file xdr_head\&.h\&.
.PP
Referenced by libMesh::XdrHEAD::getTitle(), libMesh::XdrSOLN::header(), libMesh::XdrMESH::header(), libMesh::XdrHEAD::setTitle(), libMesh::XdrHEAD::XdrHEAD(), and libMesh::XdrHEAD::~XdrHEAD()\&.
.SS "char* libMesh::XdrHEAD::mp_userTitle\fC [protected]\fP, \fC [inherited]\fP"
User's simulation title 
.PP
Definition at line 176 of file xdr_head\&.h\&.
.PP
Referenced by libMesh::XdrSHEAD::getUserTitle(), libMesh::XdrSOLN::header(), libMesh::XdrSHEAD::setUserTitle(), libMesh::XdrHEAD::XdrHEAD(), and libMesh::XdrHEAD::~XdrHEAD()\&.
.SS "char* libMesh::XdrHEAD::mp_varTitle\fC [protected]\fP, \fC [inherited]\fP"
List of null-separated variable names\&. 
.PP
Definition at line 181 of file xdr_head\&.h\&.
.PP
Referenced by libMesh::XdrSHEAD::getVarTitle(), libMesh::XdrSOLN::header(), libMesh::XdrSHEAD::setVarTitle(), libMesh::XdrHEAD::XdrHEAD(), and libMesh::XdrHEAD::~XdrHEAD()\&.
.SS "std::vector<unsigned int> libMesh::XdrMHEAD::num_elem_each_block\fC [private]\fP"
A vector of length n_blocks containing the number of elements in each block\&. 
.PP
Definition at line 151 of file xdr_mhead\&.h\&.
.PP
Referenced by get_num_elem_each_block(), and set_num_elem_each_block()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libMesh from the source code\&.
