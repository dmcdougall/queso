.TH "libMesh::DGFEMContext" 3 "Tue May 6 2014" "libMesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libMesh::DGFEMContext \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <dg_fem_context\&.h>\fP
.PP
Inherits \fBlibMesh::FEMContext\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef std::map< const 
.br
\fBNumericVector\fP< \fBNumber\fP >
.br
 *, std::pair< \fBDenseVector\fP
.br
< \fBNumber\fP >, std::vector
.br
< \fBDenseSubVector\fP< \fBNumber\fP >
.br
 * > > >::iterator \fBlocalized_vectors_iterator\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDGFEMContext\fP (const \fBSystem\fP &\fBsys\fP)"
.br
.ti -1c
.RI "virtual \fB~DGFEMContext\fP ()"
.br
.ti -1c
.RI "virtual void \fBside_fe_reinit\fP ()"
.br
.ti -1c
.RI "void \fBneighbor_side_fe_reinit\fP ()"
.br
.ti -1c
.RI "const std::vector< \fBdof_id_type\fP > & \fBget_neighbor_dof_indices\fP () const "
.br
.ti -1c
.RI "const std::vector< \fBdof_id_type\fP > & \fBget_neighbor_dof_indices\fP (unsigned int var) const "
.br
.ti -1c
.RI "const \fBDenseVector\fP< \fBNumber\fP > & \fBget_neighbor_residual\fP () const "
.br
.ti -1c
.RI "\fBDenseVector\fP< \fBNumber\fP > & \fBget_neighbor_residual\fP ()"
.br
.ti -1c
.RI "const \fBDenseSubVector\fP< \fBNumber\fP > & \fBget_neighbor_residual\fP (unsigned int var) const "
.br
.ti -1c
.RI "\fBDenseSubVector\fP< \fBNumber\fP > & \fBget_neighbor_residual\fP (unsigned int var)"
.br
.ti -1c
.RI "const \fBDenseMatrix\fP< \fBNumber\fP > & \fBget_elem_elem_jacobian\fP () const "
.br
.ti -1c
.RI "\fBDenseMatrix\fP< \fBNumber\fP > & \fBget_elem_elem_jacobian\fP ()"
.br
.ti -1c
.RI "const \fBDenseSubMatrix\fP< \fBNumber\fP > & \fBget_elem_elem_jacobian\fP (unsigned int var1, unsigned int var2) const "
.br
.ti -1c
.RI "\fBDenseSubMatrix\fP< \fBNumber\fP > & \fBget_elem_elem_jacobian\fP (unsigned int var1, unsigned int var2)"
.br
.ti -1c
.RI "const \fBDenseMatrix\fP< \fBNumber\fP > & \fBget_elem_neighbor_jacobian\fP () const "
.br
.ti -1c
.RI "\fBDenseMatrix\fP< \fBNumber\fP > & \fBget_elem_neighbor_jacobian\fP ()"
.br
.ti -1c
.RI "const \fBDenseSubMatrix\fP< \fBNumber\fP > & \fBget_elem_neighbor_jacobian\fP (unsigned int var1, unsigned int var2) const "
.br
.ti -1c
.RI "\fBDenseSubMatrix\fP< \fBNumber\fP > & \fBget_elem_neighbor_jacobian\fP (unsigned int var1, unsigned int var2)"
.br
.ti -1c
.RI "const \fBDenseMatrix\fP< \fBNumber\fP > & \fBget_neighbor_elem_jacobian\fP () const "
.br
.ti -1c
.RI "\fBDenseMatrix\fP< \fBNumber\fP > & \fBget_neighbor_elem_jacobian\fP ()"
.br
.ti -1c
.RI "const \fBDenseSubMatrix\fP< \fBNumber\fP > & \fBget_neighbor_elem_jacobian\fP (unsigned int var1, unsigned int var2) const "
.br
.ti -1c
.RI "\fBDenseSubMatrix\fP< \fBNumber\fP > & \fBget_neighbor_elem_jacobian\fP (unsigned int var1, unsigned int var2)"
.br
.ti -1c
.RI "const \fBDenseMatrix\fP< \fBNumber\fP > & \fBget_neighbor_neighbor_jacobian\fP () const "
.br
.ti -1c
.RI "\fBDenseMatrix\fP< \fBNumber\fP > & \fBget_neighbor_neighbor_jacobian\fP ()"
.br
.ti -1c
.RI "const \fBDenseSubMatrix\fP< \fBNumber\fP > & \fBget_neighbor_neighbor_jacobian\fP (unsigned int var1, unsigned int var2) const "
.br
.ti -1c
.RI "\fBDenseSubMatrix\fP< \fBNumber\fP > & \fBget_neighbor_neighbor_jacobian\fP (unsigned int var1, unsigned int var2)"
.br
.ti -1c
.RI "void \fBset_neighbor\fP (const \fBElem\fP &neighbor)"
.br
.ti -1c
.RI "const \fBElem\fP & \fBget_neighbor\fP () const "
.br
.ti -1c
.RI "bool \fBdg_terms_are_active\fP () const "
.br
.ti -1c
.RI "template<typename OutputShape > void \fBget_neighbor_side_fe\fP (unsigned int var, \fBFEGenericBase\fP< OutputShape > *&fe) const "
.br
.ti -1c
.RI "bool \fBhas_side_boundary_id\fP (\fBboundary_id_type\fP id) const "
.br
.ti -1c
.RI "std::vector< \fBboundary_id_type\fP > \fBside_boundary_ids\fP () const "
.br
.ti -1c
.RI "\fBNumber\fP \fBinterior_value\fP (unsigned int var, unsigned int qp) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBinterior_value\fP (unsigned int var, unsigned int qp, OutputType &u) const "
.br
.ti -1c
.RI "\fBNumber\fP \fBside_value\fP (unsigned int var, unsigned int qp) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBside_value\fP (unsigned int var, unsigned int qp, OutputType &u) const "
.br
.ti -1c
.RI "\fBNumber\fP \fBpoint_value\fP (unsigned int var, const \fBPoint\fP &p) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBpoint_value\fP (unsigned int var, const \fBPoint\fP &p, OutputType &u) const "
.br
.ti -1c
.RI "\fBGradient\fP \fBinterior_gradient\fP (unsigned int var, unsigned int qp) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBinterior_gradient\fP (unsigned int var, unsigned int qp, OutputType &du) const "
.br
.ti -1c
.RI "\fBGradient\fP \fBside_gradient\fP (unsigned int var, unsigned int qp) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBside_gradient\fP (unsigned int var, unsigned int qp, OutputType &du) const "
.br
.ti -1c
.RI "\fBGradient\fP \fBpoint_gradient\fP (unsigned int var, const \fBPoint\fP &p) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBpoint_gradient\fP (unsigned int var, const \fBPoint\fP &p, OutputType &grad_u) const "
.br
.ti -1c
.RI "\fBTensor\fP \fBinterior_hessian\fP (unsigned int var, unsigned int qp) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBinterior_hessian\fP (unsigned int var, unsigned int qp, OutputType &d2u) const "
.br
.ti -1c
.RI "\fBTensor\fP \fBside_hessian\fP (unsigned int var, unsigned int qp) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBside_hessian\fP (unsigned int var, unsigned int qp, OutputType &d2u) const "
.br
.ti -1c
.RI "\fBTensor\fP \fBpoint_hessian\fP (unsigned int var, const \fBPoint\fP &p) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBpoint_hessian\fP (unsigned int var, const \fBPoint\fP &p, OutputType &hess_u) const "
.br
.ti -1c
.RI "\fBNumber\fP \fBfixed_interior_value\fP (unsigned int var, unsigned int qp) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBfixed_interior_value\fP (unsigned int var, unsigned int qp, OutputType &u) const "
.br
.ti -1c
.RI "\fBNumber\fP \fBfixed_side_value\fP (unsigned int var, unsigned int qp) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBfixed_side_value\fP (unsigned int var, unsigned int qp, OutputType &u) const "
.br
.ti -1c
.RI "\fBNumber\fP \fBfixed_point_value\fP (unsigned int var, const \fBPoint\fP &p) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBfixed_point_value\fP (unsigned int var, const \fBPoint\fP &p, OutputType &u) const "
.br
.ti -1c
.RI "\fBGradient\fP \fBfixed_interior_gradient\fP (unsigned int var, unsigned int qp) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBfixed_interior_gradient\fP (unsigned int var, unsigned int qp, OutputType &grad_u) const "
.br
.ti -1c
.RI "\fBGradient\fP \fBfixed_side_gradient\fP (unsigned int var, unsigned int qp) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBfixed_side_gradient\fP (unsigned int var, unsigned int qp, OutputType &grad_u) const "
.br
.ti -1c
.RI "\fBGradient\fP \fBfixed_point_gradient\fP (unsigned int var, const \fBPoint\fP &p) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBfixed_point_gradient\fP (unsigned int var, const \fBPoint\fP &p, OutputType &grad_u) const "
.br
.ti -1c
.RI "\fBTensor\fP \fBfixed_interior_hessian\fP (unsigned int var, unsigned int qp) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBfixed_interior_hessian\fP (unsigned int var, unsigned int qp, OutputType &hess_u) const "
.br
.ti -1c
.RI "\fBTensor\fP \fBfixed_side_hessian\fP (unsigned int var, unsigned int qp) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBfixed_side_hessian\fP (unsigned int var, unsigned int qp, OutputType &hess_u) const "
.br
.ti -1c
.RI "\fBTensor\fP \fBfixed_point_hessian\fP (unsigned int var, const \fBPoint\fP &p) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBfixed_point_hessian\fP (unsigned int var, const \fBPoint\fP &p, OutputType &hess_u) const "
.br
.ti -1c
.RI "template<typename OutputShape > void \fBget_element_fe\fP (unsigned int var, \fBFEGenericBase\fP< OutputShape > *&fe) const "
.br
.ti -1c
.RI "\fBFEBase\fP * \fBget_element_fe\fP (unsigned int var) const "
.br
.ti -1c
.RI "template<typename OutputShape > void \fBget_side_fe\fP (unsigned int var, \fBFEGenericBase\fP< OutputShape > *&fe) const "
.br
.ti -1c
.RI "\fBFEBase\fP * \fBget_side_fe\fP (unsigned int var) const "
.br
.ti -1c
.RI "template<typename OutputShape > void \fBget_edge_fe\fP (unsigned int var, \fBFEGenericBase\fP< OutputShape > *&fe) const "
.br
.ti -1c
.RI "\fBFEBase\fP * \fBget_edge_fe\fP (unsigned int var) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBinterior_values\fP (unsigned int var, const \fBNumericVector\fP< \fBNumber\fP > &_system_vector, std::vector< OutputType > &interior_values_vector) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBside_values\fP (unsigned int var, const \fBNumericVector\fP< \fBNumber\fP > &_system_vector, std::vector< OutputType > &side_values_vector) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBinterior_gradients\fP (unsigned int var, const \fBNumericVector\fP< \fBNumber\fP > &_system_vector, std::vector< OutputType > &interior_gradients_vector) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBside_gradients\fP (unsigned int var, const \fBNumericVector\fP< \fBNumber\fP > &_system_vector, std::vector< OutputType > &side_gradients_vector) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBinterior_hessians\fP (unsigned int var, const \fBNumericVector\fP< \fBNumber\fP > &_system_vector, std::vector< OutputType > &d2u_vals) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBside_hessians\fP (unsigned int var, const \fBNumericVector\fP< \fBNumber\fP > &_system_vector, std::vector< OutputType > &d2u_vals) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBinterior_curl\fP (unsigned int var, unsigned int qp, OutputType &curl_u) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBpoint_curl\fP (unsigned int var, const \fBPoint\fP &p, OutputType &curl_u) const "
.br
.ti -1c
.RI "template<typename OutputType > void \fBinterior_div\fP (unsigned int var, unsigned int qp, OutputType &div_u) const "
.br
.ti -1c
.RI "virtual void \fBelem_reinit\fP (\fBReal\fP theta)"
.br
.ti -1c
.RI "virtual void \fBelem_side_reinit\fP (\fBReal\fP theta)"
.br
.ti -1c
.RI "virtual void \fBelem_edge_reinit\fP (\fBReal\fP theta)"
.br
.ti -1c
.RI "virtual void \fBpre_fe_reinit\fP (const \fBSystem\fP &, const \fBElem\fP *e)"
.br
.ti -1c
.RI "void \fBelem_fe_reinit\fP ()"
.br
.ti -1c
.RI "void \fBedge_fe_reinit\fP ()"
.br
.ti -1c
.RI "const \fBQBase\fP & \fBget_element_qrule\fP () const "
.br
.ti -1c
.RI "const \fBQBase\fP & \fBget_side_qrule\fP () const "
.br
.ti -1c
.RI "const \fBQBase\fP & \fBget_edge_qrule\fP () const "
.br
.ti -1c
.RI "virtual void \fBset_mesh_system\fP (\fBSystem\fP *\fBsys\fP)"
.br
.ti -1c
.RI "const \fBSystem\fP * \fBget_mesh_system\fP () const "
.br
.ti -1c
.RI "\fBSystem\fP * \fBget_mesh_system\fP ()"
.br
.ti -1c
.RI "unsigned int \fBget_mesh_x_var\fP () const "
.br
.ti -1c
.RI "void \fBset_mesh_x_var\fP (unsigned int x_var)"
.br
.ti -1c
.RI "unsigned int \fBget_mesh_y_var\fP () const "
.br
.ti -1c
.RI "void \fBset_mesh_y_var\fP (unsigned int y_var)"
.br
.ti -1c
.RI "unsigned int \fBget_mesh_z_var\fP () const "
.br
.ti -1c
.RI "void \fBset_mesh_z_var\fP (unsigned int z_var)"
.br
.ti -1c
.RI "const \fBElem\fP & \fBget_elem\fP () const "
.br
.ti -1c
.RI "\fBElem\fP & \fBget_elem\fP ()"
.br
.ti -1c
.RI "unsigned char \fBget_side\fP () const "
.br
.ti -1c
.RI "unsigned char \fBget_edge\fP () const "
.br
.ti -1c
.RI "unsigned char \fBget_dim\fP () const "
.br
.ti -1c
.RI "void \fBelem_position_set\fP (\fBReal\fP theta)"
.br
.ti -1c
.RI "void \fBelem_position_get\fP ()"
.br
.ti -1c
.RI "unsigned int \fBn_vars\fP () const "
.br
.ti -1c
.RI "const \fBSystem\fP & \fBget_system\fP () const "
.br
.ti -1c
.RI "const \fBDenseVector\fP< \fBNumber\fP > & \fBget_elem_solution\fP () const "
.br
.ti -1c
.RI "\fBDenseVector\fP< \fBNumber\fP > & \fBget_elem_solution\fP ()"
.br
.ti -1c
.RI "const \fBDenseSubVector\fP< \fBNumber\fP > & \fBget_elem_solution\fP (unsigned int var) const "
.br
.ti -1c
.RI "const \fBDenseVector\fP< \fBNumber\fP > & \fBget_elem_fixed_solution\fP () const "
.br
.ti -1c
.RI "\fBDenseVector\fP< \fBNumber\fP > & \fBget_elem_fixed_solution\fP ()"
.br
.ti -1c
.RI "const \fBDenseSubVector\fP< \fBNumber\fP > & \fBget_elem_fixed_solution\fP (unsigned int var) const "
.br
.ti -1c
.RI "const \fBDenseVector\fP< \fBNumber\fP > & \fBget_elem_residual\fP () const "
.br
.ti -1c
.RI "\fBDenseVector\fP< \fBNumber\fP > & \fBget_elem_residual\fP ()"
.br
.ti -1c
.RI "const \fBDenseSubVector\fP< \fBNumber\fP > & \fBget_elem_residual\fP (unsigned int var) const "
.br
.ti -1c
.RI "\fBDenseSubVector\fP< \fBNumber\fP > & \fBget_elem_residual\fP (unsigned int var)"
.br
.ti -1c
.RI "const \fBDenseMatrix\fP< \fBNumber\fP > & \fBget_elem_jacobian\fP () const "
.br
.ti -1c
.RI "\fBDenseMatrix\fP< \fBNumber\fP > & \fBget_elem_jacobian\fP ()"
.br
.ti -1c
.RI "const \fBDenseSubMatrix\fP< \fBNumber\fP > & \fBget_elem_jacobian\fP (unsigned int var1, unsigned int var2) const "
.br
.ti -1c
.RI "\fBDenseSubMatrix\fP< \fBNumber\fP > & \fBget_elem_jacobian\fP (unsigned int var1, unsigned int var2)"
.br
.ti -1c
.RI "const std::vector< \fBNumber\fP > & \fBget_qois\fP () const "
.br
.ti -1c
.RI "std::vector< \fBNumber\fP > & \fBget_qois\fP ()"
.br
.ti -1c
.RI "const std::vector< \fBDenseVector\fP
.br
< \fBNumber\fP > > & \fBget_qoi_derivatives\fP () const "
.br
.ti -1c
.RI "std::vector< \fBDenseVector\fP
.br
< \fBNumber\fP > > & \fBget_qoi_derivatives\fP ()"
.br
.ti -1c
.RI "const \fBDenseSubVector\fP< \fBNumber\fP > & \fBget_qoi_derivatives\fP (unsigned int qoi, unsigned int var) const "
.br
.ti -1c
.RI "\fBDenseSubVector\fP< \fBNumber\fP > & \fBget_qoi_derivatives\fP (unsigned int qoi, unsigned int var)"
.br
.ti -1c
.RI "const std::vector< \fBdof_id_type\fP > & \fBget_dof_indices\fP () const "
.br
.ti -1c
.RI "std::vector< \fBdof_id_type\fP > & \fBget_dof_indices\fP ()"
.br
.ti -1c
.RI "const std::vector< \fBdof_id_type\fP > & \fBget_dof_indices\fP (unsigned int var) const "
.br
.ti -1c
.RI "\fBReal\fP \fBget_system_time\fP () const "
.br
.ti -1c
.RI "\fBReal\fP \fBget_time\fP () const "
.br
.ti -1c
.RI "void \fBset_time\fP (\fBReal\fP time_in)"
.br
.ti -1c
.RI "\fBReal\fP \fBget_elem_solution_derivative\fP () const "
.br
.ti -1c
.RI "\fBReal\fP \fBget_fixed_solution_derivative\fP () const "
.br
.ti -1c
.RI "bool \fBis_adjoint\fP () const "
.br
.ti -1c
.RI "bool & \fBis_adjoint\fP ()"
.br
.ti -1c
.RI "void \fBset_deltat_pointer\fP (\fBReal\fP *dt)"
.br
.ti -1c
.RI "\fBReal\fP \fBget_deltat_value\fP ()"
.br
.ti -1c
.RI "void \fBadd_localized_vector\fP (\fBNumericVector\fP< \fBNumber\fP > &_localized_vector, const \fBSystem\fP &\fB_sys\fP)"
.br
.ti -1c
.RI "\fBDenseVector\fP< \fBNumber\fP > & \fBget_localized_vector\fP (const \fBNumericVector\fP< \fBNumber\fP > &_localized_vector)"
.br
.ti -1c
.RI "const \fBDenseVector\fP< \fBNumber\fP > & \fBget_localized_vector\fP (const \fBNumericVector\fP< \fBNumber\fP > &_localized_vector) const "
.br
.ti -1c
.RI "\fBDenseSubVector\fP< \fBNumber\fP > & \fBget_localized_subvector\fP (const \fBNumericVector\fP< \fBNumber\fP > &_localized_vector, unsigned int _var)"
.br
.ti -1c
.RI "const \fBDenseSubVector\fP< \fBNumber\fP > & \fBget_localized_subvector\fP (const \fBNumericVector\fP< \fBNumber\fP > &_localized_vector, unsigned int _var) const "
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBSystem\fP * \fB_mesh_sys\fP"
.br
.ti -1c
.RI "unsigned int \fB_mesh_x_var\fP"
.br
.ti -1c
.RI "unsigned int \fB_mesh_y_var\fP"
.br
.ti -1c
.RI "unsigned int \fB_mesh_z_var\fP"
.br
.ti -1c
.RI "unsigned char \fBside\fP"
.br
.ti -1c
.RI "unsigned char \fBedge\fP"
.br
.ti -1c
.RI "\fBReal\fP \fBtime\fP"
.br
.ti -1c
.RI "const \fBReal\fP \fBsystem_time\fP"
.br
.ti -1c
.RI "\fBReal\fP \fBelem_solution_derivative\fP"
.br
.ti -1c
.RI "\fBReal\fP \fBfixed_solution_derivative\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "template<typename OutputShape > \fBAutoPtr\fP< \fBFEGenericBase\fP
.br
< OutputShape > > \fBbuild_new_fe\fP (const \fBFEGenericBase\fP< OutputShape > *fe, const \fBPoint\fP &p) const "
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::map< \fBFEType\fP, \fBFEAbstract\fP * > \fB_element_fe\fP"
.br
.ti -1c
.RI "std::map< \fBFEType\fP, \fBFEAbstract\fP * > \fB_side_fe\fP"
.br
.ti -1c
.RI "std::map< \fBFEType\fP, \fBFEAbstract\fP * > \fB_edge_fe\fP"
.br
.ti -1c
.RI "std::vector< \fBFEAbstract\fP * > \fB_element_fe_var\fP"
.br
.ti -1c
.RI "std::vector< \fBFEAbstract\fP * > \fB_side_fe_var\fP"
.br
.ti -1c
.RI "std::vector< \fBFEAbstract\fP * > \fB_edge_fe_var\fP"
.br
.ti -1c
.RI "\fBBoundaryInfo\fP * \fB_boundary_info\fP"
.br
.ti -1c
.RI "const \fBElem\fP * \fBelem\fP"
.br
.ti -1c
.RI "unsigned char \fBdim\fP"
.br
.ti -1c
.RI "\fBQBase\fP * \fBelement_qrule\fP"
.br
.ti -1c
.RI "\fBQBase\fP * \fBside_qrule\fP"
.br
.ti -1c
.RI "\fBQBase\fP * \fBedge_qrule\fP"
.br
.ti -1c
.RI "std::map< const \fBNumericVector\fP
.br
< \fBNumber\fP > *, std::pair
.br
< \fBDenseVector\fP< \fBNumber\fP >
.br
, std::vector< \fBDenseSubVector\fP
.br
< \fBNumber\fP > * > > > \fBlocalized_vectors\fP"
.br
.ti -1c
.RI "\fBDenseVector\fP< \fBNumber\fP > \fBelem_solution\fP"
.br
.ti -1c
.RI "std::vector< \fBDenseSubVector\fP
.br
< \fBNumber\fP > * > \fBelem_subsolutions\fP"
.br
.ti -1c
.RI "\fBDenseVector\fP< \fBNumber\fP > \fBelem_fixed_solution\fP"
.br
.ti -1c
.RI "std::vector< \fBDenseSubVector\fP
.br
< \fBNumber\fP > * > \fBelem_fixed_subsolutions\fP"
.br
.ti -1c
.RI "\fBDenseVector\fP< \fBNumber\fP > \fBelem_residual\fP"
.br
.ti -1c
.RI "\fBDenseMatrix\fP< \fBNumber\fP > \fBelem_jacobian\fP"
.br
.ti -1c
.RI "std::vector< \fBNumber\fP > \fBelem_qoi\fP"
.br
.ti -1c
.RI "std::vector< \fBDenseVector\fP
.br
< \fBNumber\fP > > \fBelem_qoi_derivative\fP"
.br
.ti -1c
.RI "std::vector< std::vector
.br
< \fBDenseSubVector\fP< \fBNumber\fP > * > > \fBelem_qoi_subderivatives\fP"
.br
.ti -1c
.RI "std::vector< \fBDenseSubVector\fP
.br
< \fBNumber\fP > * > \fBelem_subresiduals\fP"
.br
.ti -1c
.RI "std::vector< std::vector
.br
< \fBDenseSubMatrix\fP< \fBNumber\fP > * > > \fBelem_subjacobians\fP"
.br
.ti -1c
.RI "std::vector< \fBdof_id_type\fP > \fBdof_indices\fP"
.br
.ti -1c
.RI "std::vector< std::vector
.br
< \fBdof_id_type\fP > > \fBdof_indices_var\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "const \fBElem\fP * \fB_neighbor\fP"
.br
.ti -1c
.RI "\fBDenseVector\fP< \fBNumber\fP > \fB_neighbor_residual\fP"
.br
.ti -1c
.RI "\fBDenseMatrix\fP< \fBNumber\fP > \fB_elem_elem_jacobian\fP"
.br
.ti -1c
.RI "\fBDenseMatrix\fP< \fBNumber\fP > \fB_elem_neighbor_jacobian\fP"
.br
.ti -1c
.RI "\fBDenseMatrix\fP< \fBNumber\fP > \fB_neighbor_elem_jacobian\fP"
.br
.ti -1c
.RI "\fBDenseMatrix\fP< \fBNumber\fP > \fB_neighbor_neighbor_jacobian\fP"
.br
.ti -1c
.RI "std::vector< \fBDenseSubVector\fP
.br
< \fBNumber\fP > * > \fB_neighbor_subresiduals\fP"
.br
.ti -1c
.RI "std::vector< std::vector
.br
< \fBDenseSubMatrix\fP< \fBNumber\fP > * > > \fB_elem_elem_subjacobians\fP"
.br
.ti -1c
.RI "std::vector< std::vector
.br
< \fBDenseSubMatrix\fP< \fBNumber\fP > * > > \fB_elem_neighbor_subjacobians\fP"
.br
.ti -1c
.RI "std::vector< std::vector
.br
< \fBDenseSubMatrix\fP< \fBNumber\fP > * > > \fB_neighbor_elem_subjacobians\fP"
.br
.ti -1c
.RI "std::vector< std::vector
.br
< \fBDenseSubMatrix\fP< \fBNumber\fP > * > > \fB_neighbor_neighbor_subjacobians\fP"
.br
.ti -1c
.RI "std::vector< \fBdof_id_type\fP > \fB_neighbor_dof_indices\fP"
.br
.ti -1c
.RI "std::vector< std::vector
.br
< \fBdof_id_type\fP > > \fB_neighbor_dof_indices_var\fP"
.br
.ti -1c
.RI "std::map< \fBFEType\fP, \fBFEAbstract\fP * > \fB_neighbor_side_fe\fP"
.br
.ti -1c
.RI "std::vector< \fBFEAbstract\fP * > \fB_neighbor_side_fe_var\fP"
.br
.ti -1c
.RI "bool \fB_dg_terms_active\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This class extends \fBFEMContext\fP in order to provide extra data required to perform local element residual and Jacobian assembly in the case of a discontinuous Galerkin (DG) discretization\&. 
.PP
Definition at line 39 of file dg_fem_context\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef std::map<const \fBNumericVector\fP<\fBNumber\fP>*, std::pair<\fBDenseVector\fP<\fBNumber\fP>, std::vector<\fBDenseSubVector\fP<\fBNumber\fP>*> > >::iterator \fBlibMesh::DiffContext::localized_vectors_iterator\fP\fC [inherited]\fP"
Typedef for the localized_vectors iterator 
.PP
Definition at line 340 of file diff_context\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "libMesh::DGFEMContext::DGFEMContext (const \fBSystem\fP &sys)\fC [explicit]\fP"
Constructor\&. Allocates some but fills no data structures\&. 
.PP
Definition at line 29 of file dg_fem_context\&.C\&.
.PP
References _elem_elem_jacobian, _elem_elem_subjacobians, _elem_neighbor_jacobian, _elem_neighbor_subjacobians, _neighbor_elem_jacobian, _neighbor_elem_subjacobians, _neighbor_neighbor_jacobian, _neighbor_neighbor_subjacobians, _neighbor_residual, _neighbor_side_fe, _neighbor_side_fe_var, _neighbor_subresiduals, libMesh::FEAbstract::build(), libMesh::FEMContext::dim, libMesh::libmesh_assert(), libMesh::System::n_vars(), and libMesh::System::variable_type()\&.
.PP
.nf
30   : FEMContext(sys),
31     _neighbor(NULL),
32     _neighbor_dof_indices_var(sys\&.n_vars()),
33     _dg_terms_active(false)
34 {
35   libmesh_experimental();
36 
37   unsigned int nv = sys\&.n_vars();
38   libmesh_assert (nv);
39 
40   _neighbor_subresiduals\&.reserve(nv);
41   _elem_elem_subjacobians\&.resize(nv);
42   _elem_neighbor_subjacobians\&.resize(nv);
43   _neighbor_elem_subjacobians\&.resize(nv);
44   _neighbor_neighbor_subjacobians\&.resize(nv);
45 
46   for (unsigned int i=0; i != nv; ++i)
47     {
48       _neighbor_subresiduals\&.push_back(new DenseSubVector<Number>(_neighbor_residual));
49       _elem_elem_subjacobians[i]\&.reserve(nv);
50       _elem_neighbor_subjacobians[i]\&.reserve(nv);
51       _neighbor_elem_subjacobians[i]\&.reserve(nv);
52       _neighbor_neighbor_subjacobians[i]\&.reserve(nv);
53 
54       for (unsigned int j=0; j != nv; ++j)
55         {
56           _elem_elem_subjacobians[i]\&.push_back
57             (new DenseSubMatrix<Number>(_elem_elem_jacobian));
58           _elem_neighbor_subjacobians[i]\&.push_back
59             (new DenseSubMatrix<Number>(_elem_neighbor_jacobian));
60           _neighbor_elem_subjacobians[i]\&.push_back
61             (new DenseSubMatrix<Number>(_neighbor_elem_jacobian));
62           _neighbor_neighbor_subjacobians[i]\&.push_back
63             (new DenseSubMatrix<Number>(_neighbor_neighbor_jacobian));
64         }
65     }
66 
67   _neighbor_side_fe_var\&.resize(nv);
68   for (unsigned int i=0; i != nv; ++i)
69     {
70       FEType fe_type = sys\&.variable_type(i);
71 
72       if ( _neighbor_side_fe[fe_type] == NULL )
73         {
74           _neighbor_side_fe[fe_type] = FEAbstract::build(dim, fe_type)\&.release();
75         }
76       _neighbor_side_fe_var[i] = _neighbor_side_fe[fe_type];
77     }
78 }
.fi
.SS "libMesh::DGFEMContext::~DGFEMContext ()\fC [virtual]\fP"
Destructor\&. 
.PP
Definition at line 80 of file dg_fem_context\&.C\&.
.PP
References _elem_elem_subjacobians, _elem_neighbor_subjacobians, _neighbor_elem_subjacobians, _neighbor_neighbor_subjacobians, _neighbor_side_fe, and _neighbor_subresiduals\&.
.PP
.nf
81 {
82 
83   for (std::size_t i=0; i != _neighbor_subresiduals\&.size(); ++i)
84     {
85       delete _neighbor_subresiduals[i];
86 
87       for (std::size_t j=0; j != _elem_elem_subjacobians[i]\&.size(); ++j)
88         {
89           delete _elem_elem_subjacobians[i][j];
90           delete _elem_neighbor_subjacobians[i][j];
91           delete _neighbor_elem_subjacobians[i][j];
92           delete _neighbor_neighbor_subjacobians[i][j];
93         }
94     }
95 
96   // Delete the FE objects
97   for (std::map<FEType, FEAbstract *>::iterator i = _neighbor_side_fe\&.begin();
98        i != _neighbor_side_fe\&.end(); ++i)
99     delete i->second;
100   _neighbor_side_fe\&.clear();
101 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void libMesh::DiffContext::add_localized_vector (\fBNumericVector\fP< \fBNumber\fP > &_localized_vector, const \fBSystem\fP &_sys)\fC [inherited]\fP"
Adds a vector to the map of localized vectors\&. We can later evaluate interior_values, interior_gradients and side_values for these fields these vectors represent\&. 
.PP
Definition at line 125 of file diff_context\&.C\&.
.PP
References libMesh::DiffContext::localized_vectors, and libMesh::System::n_vars()\&.
.PP
.nf
126 {
127   // Make an empty pair keyed with a reference to this _localized_vector
128   localized_vectors[&_localized_vector] = std::make_pair(DenseVector<Number>(), std::vector<DenseSubVector<Number>*>());
129 
130   unsigned int nv = _sys\&.n_vars();
131 
132   localized_vectors[&_localized_vector]\&.second\&.reserve(nv);
133 
134   // Fill the DenseSubVector with nv copies of DenseVector
135   for(unsigned int i=0; i != nv; ++i)
136     localized_vectors[&_localized_vector]\&.second\&.push_back(new DenseSubVector<Number>(localized_vectors[&_localized_vector]\&.first));
137 }
.fi
.SS "template<typename OutputShape > template \fBAutoPtr\fP< \fBFEGenericBase\fP< \fBRealGradient\fP > > libMesh::FEMContext::build_new_fe (const \fBFEGenericBase\fP< OutputShape > *fe, const \fBPoint\fP &p) const\fC [protected]\fP, \fC [inherited]\fP"
Helper function to reduce some code duplication in the *_point_* methods\&. 
.PP
Definition at line 1698 of file fem_context\&.C\&.
.PP
References libMesh::Elem::dim(), libMesh::FEMContext::dim, libMesh::FEMContext::elem, libMesh::FEAbstract::get_fe_type(), and libMesh::FEInterface::inverse_map()\&.
.PP
Referenced by libMesh::FEMContext::fixed_point_gradient(), libMesh::FEMContext::fixed_point_hessian(), libMesh::FEMContext::fixed_point_value(), libMesh::FEMContext::point_curl(), libMesh::FEMContext::point_gradient(), libMesh::FEMContext::point_hessian(), and libMesh::FEMContext::point_value()\&.
.PP
.nf
1700 {
1701   FEType fe_type = fe->get_fe_type();
1702   AutoPtr<FEGenericBase<OutputShape> > fe_new(FEGenericBase<OutputShape>::build(elem->dim(), fe_type));
1703 
1704   // Map the physical co-ordinates to the master co-ordinates using the inverse_map from fe_interface\&.h
1705   // Build a vector of point co-ordinates to send to reinit
1706   std::vector<Point> coor(1, FEInterface::inverse_map(dim, fe_type, elem, p));
1707 
1708   // Reinitialize the element and compute the shape function values at coor
1709   fe_new->reinit (elem, &coor);
1710 
1711   return fe_new;
1712 }
.fi
.SS "bool libMesh::DGFEMContext::dg_terms_are_active () const\fC [inline]\fP"
Are the DG terms active, i\&.e\&. have they been assembled? 
.PP
Definition at line 231 of file dg_fem_context\&.h\&.
.PP
References _dg_terms_active\&.
.PP
.nf
232   { return _dg_terms_active; }
.fi
.SS "void libMesh::FEMContext::edge_fe_reinit ()\fC [inherited]\fP"
Reinitializes edge \fBFE\fP objects on the current geometric element 
.PP
Definition at line 1437 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::_edge_fe, libMesh::FEMContext::dim, libMesh::FEMContext::edge, and libMesh::FEMContext::elem\&.
.PP
Referenced by libMesh::FEMContext::elem_edge_reinit()\&.
.PP
.nf
1438 {
1439   libmesh_assert_equal_to (dim, 3);
1440 
1441   // Initialize all the interior FE objects on elem/edge\&.
1442   // Logging of FE::reinit is done in the FE functions
1443   std::map<FEType, FEAbstract *>::iterator local_fe_end = _edge_fe\&.end();
1444   for (std::map<FEType, FEAbstract *>::iterator i = _edge_fe\&.begin();
1445        i != local_fe_end; ++i)
1446     {
1447       i->second->edge_reinit(elem, edge);
1448     }
1449 }
.fi
.SS "void libMesh::FEMContext::elem_edge_reinit (\fBReal\fPtheta)\fC [virtual]\fP, \fC [inherited]\fP"
Reinitialize \fBElem\fP and edge \fBFE\fP objects if necessary for integration at a new point in time: specifically, handle moving elements in moving mesh schemes\&. 
.PP
Reimplemented from \fBlibMesh::DiffContext\fP\&.
.PP
Definition at line 1395 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::_mesh_sys, libMesh::FEMContext::_update_time_from_system(), libMesh::FEMContext::edge_fe_reinit(), and libMesh::FEMContext::elem_position_set()\&.
.PP
.nf
1396 {
1397   // Update the "time" variable of this context object
1398   this->_update_time_from_system(theta);
1399 
1400   // Handle a moving element if necessary
1401   if (_mesh_sys)
1402     {
1403       // FIXME - not threadsafe yet!
1404       elem_position_set(theta);
1405       edge_fe_reinit();
1406     }
1407 }
.fi
.SS "void libMesh::FEMContext::elem_fe_reinit ()\fC [inherited]\fP"
Reinitializes interior \fBFE\fP objects on the current geometric element 
.PP
Definition at line 1410 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::_element_fe, and libMesh::FEMContext::elem\&.
.PP
Referenced by libMesh::FEMContext::elem_reinit(), and libMesh::FEMSystem::mesh_position_set()\&.
.PP
.nf
1411 {
1412   // Initialize all the interior FE objects on elem\&.
1413   // Logging of FE::reinit is done in the FE functions
1414   std::map<FEType, FEAbstract *>::iterator local_fe_end = _element_fe\&.end();
1415   for (std::map<FEType, FEAbstract *>::iterator i = _element_fe\&.begin();
1416        i != local_fe_end; ++i)
1417     {
1418       i->second->reinit(elem);
1419     }
1420 }
.fi
.SS "void libMesh::FEMContext::elem_position_get ()\fC [inherited]\fP"
Uses the geometry of \fCelem\fP to set the coordinate data specified by mesh_*_position configuration\&. 
.PP
Definition at line 1453 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::_element_fe_var, libMesh::FEMContext::_mesh_sys, libMesh::FEMContext::_mesh_x_var, libMesh::FEMContext::_mesh_y_var, libMesh::FEMContext::_mesh_z_var, libMesh::Elem::default_order(), libMesh::FEMContext::elem, libMesh::DiffContext::elem_subsolutions, libMesh::invalid_uint, libMesh::LAGRANGE, libMesh::libmesh_assert(), n_nodes, libMesh::Elem::n_nodes(), libMesh::n_threads, and libMesh::Elem::point()\&.
.PP
Referenced by libMesh::FEMSystem::mesh_position_get()\&.
.PP
.nf
1454 {
1455   // This is too expensive to call unless we've been asked to move the mesh
1456   libmesh_assert (_mesh_sys);
1457 
1458   // This will probably break with threading when two contexts are
1459   // operating on elements which share a node
1460   libmesh_assert_equal_to (libMesh::n_threads(), 1);
1461 
1462   // If the coordinate data is in our own system, it's already
1463   // been set up for us
1464   //  if (_mesh_sys == this->number())
1465   //    {
1466   unsigned int n_nodes = elem->n_nodes();
1467   // For simplicity we demand that mesh coordinates be stored
1468   // in a format that allows a direct copy
1469   libmesh_assert(_mesh_x_var == libMesh::invalid_uint ||
1470                  (_element_fe_var[_mesh_x_var]->get_fe_type()\&.family
1471                   == LAGRANGE &&
1472                   _element_fe_var[_mesh_x_var]->get_fe_type()\&.order
1473                   == elem->default_order()));
1474   libmesh_assert(_mesh_y_var == libMesh::invalid_uint ||
1475                  (_element_fe_var[_mesh_y_var]->get_fe_type()\&.family
1476                   == LAGRANGE &&
1477                   _element_fe_var[_mesh_y_var]->get_fe_type()\&.order
1478                   == elem->default_order()));
1479   libmesh_assert(_mesh_z_var == libMesh::invalid_uint ||
1480                  (_element_fe_var[_mesh_z_var]->get_fe_type()\&.family
1481                   == LAGRANGE &&
1482                   _element_fe_var[_mesh_z_var]->get_fe_type()\&.order
1483                   == elem->default_order()));
1484 
1485   // Get degree of freedom coefficients from point coordinates
1486   if (_mesh_x_var != libMesh::invalid_uint)
1487     for (unsigned int i=0; i != n_nodes; ++i)
1488       (*elem_subsolutions[_mesh_x_var])(i) = elem->point(i)(0);
1489 
1490   if (_mesh_y_var != libMesh::invalid_uint)
1491     for (unsigned int i=0; i != n_nodes; ++i)
1492       (*elem_subsolutions[_mesh_y_var])(i) = elem->point(i)(1);
1493 
1494   if (_mesh_z_var != libMesh::invalid_uint)
1495     for (unsigned int i=0; i != n_nodes; ++i)
1496       (*elem_subsolutions[_mesh_z_var])(i) = elem->point(i)(2);
1497   //    }
1498   // FIXME - If the coordinate data is not in our own system, someone
1499   // had better get around to implementing that\&.\&.\&. - RHS
1500   //  else
1501   //    {
1502   //      libmesh_not_implemented();
1503   //    }
1504 }
.fi
.SS "void libMesh::FEMContext::elem_position_set (\fBReal\fPtheta)\fC [inline]\fP, \fC [inherited]\fP"
Uses the coordinate data specified by mesh_*_position configuration to set the geometry of \fCelem\fP to the value it would take after a fraction \fCtheta\fP of a timestep\&. 
.PP
Definition at line 758 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_do_elem_position_set(), and libMesh::FEMContext::_mesh_sys\&.
.PP
Referenced by libMesh::FEMContext::elem_edge_reinit(), libMesh::FEMContext::elem_reinit(), libMesh::FEMContext::elem_side_reinit(), and libMesh::FEMSystem::mesh_position_set()\&.
.PP
.nf
759 {
760   if (_mesh_sys)
761     this->_do_elem_position_set(theta);
762 }
.fi
.SS "void libMesh::FEMContext::elem_reinit (\fBReal\fPtheta)\fC [virtual]\fP, \fC [inherited]\fP"
Reinitialize all my FEM context data on a given element for the given system Reinitialize \fBElem\fP and \fBFE\fP objects if necessary for integration at a new point in time: specifically, handle moving elements in moving mesh schemes\&. 
.PP
Reimplemented from \fBlibMesh::DiffContext\fP\&.
.PP
Definition at line 1358 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::_mesh_sys, libMesh::FEMContext::_update_time_from_system(), libMesh::FEMContext::elem_fe_reinit(), libMesh::FEMContext::elem_position_set(), and libMesh::n_threads\&.
.PP
.nf
1359 {
1360   // Update the "time" variable of this context object
1361   this->_update_time_from_system(theta);
1362 
1363   // Handle a moving element if necessary\&.
1364   if (_mesh_sys)
1365     // We assume that the ``default'' state
1366     // of the mesh is its final, theta=1\&.0
1367     // position, so we don't bother with
1368     // mesh motion in that case\&.
1369     if (theta != 1\&.0)
1370       {
1371         // FIXME - ALE is not threadsafe yet!
1372         libmesh_assert_equal_to (libMesh::n_threads(), 1);
1373 
1374         elem_position_set(theta);
1375       }
1376   elem_fe_reinit();
1377 }
.fi
.SS "void libMesh::FEMContext::elem_side_reinit (\fBReal\fPtheta)\fC [virtual]\fP, \fC [inherited]\fP"
Reinitialize \fBElem\fP and side \fBFE\fP objects if necessary for integration at a new point in time: specifically, handle moving elements in moving mesh schemes\&. 
.PP
Reimplemented from \fBlibMesh::DiffContext\fP\&.
.PP
Definition at line 1380 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::_mesh_sys, libMesh::FEMContext::_update_time_from_system(), libMesh::FEMContext::elem_position_set(), and libMesh::FEMContext::side_fe_reinit()\&.
.PP
.nf
1381 {
1382   // Update the "time" variable of this context object
1383   this->_update_time_from_system(theta);
1384 
1385   // Handle a moving element if necessary
1386   if (_mesh_sys)
1387     {
1388       // FIXME - not threadsafe yet!
1389       elem_position_set(theta);
1390       side_fe_reinit();
1391     }
1392 }
.fi
.SS "\fBGradient\fP libMesh::FEMContext::fixed_interior_gradient (unsigned intvar, unsigned intqp) const\fC [inherited]\fP"
Returns the gradient of the fixed_solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element interior\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 973 of file fem_context\&.C\&.
.PP
.nf
974 {
975   Gradient du;
976 
977   this->fixed_interior_gradient( var, qp, du );
978 
979   return du;
980 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::fixed_interior_gradient (unsigned intvar, unsigned intqp, OutputType &grad_u) const\fC [inherited]\fP"
Returns the gradient of the fixed_solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element interior\&. This is the preferred API\&. 
.SS "\fBTensor\fP libMesh::FEMContext::fixed_interior_hessian (unsigned intvar, unsigned intqp) const\fC [inherited]\fP"
Returns the hessian of the fixed_solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element interior\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 1020 of file fem_context\&.C\&.
.PP
.nf
1021 {
1022   Tensor d2u;
1023 
1024   this->fixed_interior_hessian( var, qp, d2u );
1025 
1026   return d2u;
1027 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::fixed_interior_hessian (unsigned intvar, unsigned intqp, OutputType &hess_u) const\fC [inherited]\fP"
Returns the hessian of the fixed_solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element interior\&. This is the preferred API\&. 
.PP
Definition at line 1031 of file fem_context\&.C\&.
.PP
References libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_fixed_subsolutions, libMesh::FEGenericBase< T >::get_d2phi(), libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
1033 {
1034   typedef typename TensorTools::MakeReal<
1035     typename TensorTools::DecrementRank<
1036     typename TensorTools::DecrementRank<
1037     OutputType>::type>::type>::type
1038     OutputShape;
1039 
1040   // Get local-to-global dof index lookup
1041   libmesh_assert_greater (dof_indices\&.size(), var);
1042   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
1043     (dof_indices_var[var]\&.size());
1044 
1045   // Get current local coefficients
1046   libmesh_assert_greater (elem_fixed_subsolutions\&.size(), var);
1047   libmesh_assert(elem_fixed_subsolutions[var]);
1048   DenseSubVector<Number> &coef = *elem_fixed_subsolutions[var];
1049 
1050   // Get finite element object
1051   FEGenericBase<OutputShape>* fe = NULL;
1052   this->get_element_fe<OutputShape>( var, fe );
1053 
1054   // Get shape function values at quadrature point
1055   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputTensor> > &d2phi = fe->get_d2phi();
1056 
1057   // Accumulate solution second derivatives
1058   d2u = 0\&.0;
1059 
1060   for (unsigned int l=0; l != n_dofs; l++)
1061     d2u\&.add_scaled(d2phi[l][qp], coef(l));
1062 
1063   return;
1064 }
.fi
.SS "\fBNumber\fP libMesh::FEMContext::fixed_interior_value (unsigned intvar, unsigned intqp) const\fC [inherited]\fP"
Returns the value of the fixed_solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element interior\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 928 of file fem_context\&.C\&.
.PP
.nf
929 {
930   Number u = 0\&.;
931 
932   this->fixed_interior_value( var, qp, u );
933 
934   return u;
935 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::fixed_interior_value (unsigned intvar, unsigned intqp, OutputType &u) const\fC [inherited]\fP"
Returns the value of the fixed_solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element interior\&. This is the preferred API\&. 
.PP
Definition at line 940 of file fem_context\&.C\&.
.PP
References libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_fixed_subsolutions, libMesh::FEGenericBase< T >::get_phi(), libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
942 {
943   typedef typename TensorTools::MakeReal<OutputType>::type OutputShape;
944 
945   // Get local-to-global dof index lookup
946   libmesh_assert_greater (dof_indices\&.size(), var);
947   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
948     (dof_indices_var[var]\&.size());
949 
950   // Get current local coefficients
951   libmesh_assert_greater (elem_fixed_subsolutions\&.size(), var);
952   libmesh_assert(elem_fixed_subsolutions[var]);
953   DenseSubVector<Number> &coef = *elem_fixed_subsolutions[var];
954 
955   // Get finite element object
956   FEGenericBase<OutputShape>* fe = NULL;
957   this->get_element_fe<OutputShape>( var, fe );
958 
959   // Get shape function values at quadrature point
960   const std::vector<std::vector<OutputShape> > &phi = fe->get_phi();
961 
962   // Accumulate solution value
963   u = 0\&.0;
964 
965   for (unsigned int l=0; l != n_dofs; l++)
966     u += phi[l][qp] * coef(l);
967 
968   return;
969 }
.fi
.SS "\fBGradient\fP libMesh::FEMContext::fixed_point_gradient (unsigned intvar, const \fBPoint\fP &p) const\fC [inherited]\fP"
Returns the gradient of the fixed_solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 1253 of file fem_context\&.C\&.
.PP
.nf
1254 {
1255   Gradient grad_u;
1256 
1257   this->fixed_point_gradient( var, p, grad_u );
1258 
1259   return grad_u;
1260 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::fixed_point_gradient (unsigned intvar, const \fBPoint\fP &p, OutputType &grad_u) const\fC [inherited]\fP"
Returns the gradient of the fixed_solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. This is the preferred API\&. 
.PP
Definition at line 1265 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::build_new_fe(), libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_fixed_subsolutions, libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
1267 {
1268   typedef typename TensorTools::MakeReal
1269     <typename TensorTools::DecrementRank<OutputType>::type>::type
1270     OutputShape;
1271 
1272   // Get local-to-global dof index lookup
1273   libmesh_assert_greater (dof_indices\&.size(), var);
1274   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
1275     (dof_indices_var[var]\&.size());
1276 
1277   // Get current local coefficients
1278   libmesh_assert_greater (elem_fixed_subsolutions\&.size(), var);
1279   libmesh_assert(elem_fixed_subsolutions[var]);
1280   DenseSubVector<Number> &coef = *elem_fixed_subsolutions[var];
1281 
1282   // Get finite element object
1283   FEGenericBase<OutputShape>* fe = NULL;
1284   this->get_element_fe<OutputShape>( var, fe );
1285 
1286   // Build a FE for calculating u(p)
1287   AutoPtr<FEGenericBase<OutputShape> > fe_new = this->build_new_fe( fe, p );
1288 
1289   // Get the values of the shape function derivatives
1290   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputGradient> >&  dphi = fe_new->get_dphi();
1291 
1292   grad_u = 0\&.0;
1293 
1294   for (unsigned int l=0; l != n_dofs; l++)
1295     grad_u\&.add_scaled(dphi[l][0], coef(l));
1296 
1297   return;
1298 }
.fi
.SS "\fBTensor\fP libMesh::FEMContext::fixed_point_hessian (unsigned intvar, const \fBPoint\fP &p) const\fC [inherited]\fP"
Returns the hessian of the fixed_solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 1303 of file fem_context\&.C\&.
.PP
.nf
1304 {
1305   Tensor hess_u;
1306 
1307   this->fixed_point_hessian( var, p, hess_u );
1308 
1309   return hess_u;
1310 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::fixed_point_hessian (unsigned intvar, const \fBPoint\fP &p, OutputType &hess_u) const\fC [inherited]\fP"
Returns the hessian of the fixed_solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. This is the preferred API\&. 
.PP
Definition at line 1315 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::build_new_fe(), libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_fixed_subsolutions, libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
1317 {
1318   typedef typename TensorTools::MakeReal<
1319     typename TensorTools::DecrementRank<
1320     typename TensorTools::DecrementRank<
1321     OutputType>::type>::type>::type
1322     OutputShape;
1323 
1324   // Get local-to-global dof index lookup
1325   libmesh_assert_greater (dof_indices\&.size(), var);
1326   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
1327     (dof_indices_var[var]\&.size());
1328 
1329   // Get current local coefficients
1330   libmesh_assert_greater (elem_fixed_subsolutions\&.size(), var);
1331   libmesh_assert(elem_fixed_subsolutions[var]);
1332   DenseSubVector<Number> &coef = *elem_fixed_subsolutions[var];
1333 
1334   // Get finite element object
1335   FEGenericBase<OutputShape>* fe = NULL;
1336   this->get_element_fe<OutputShape>( var, fe );
1337 
1338   // Build a FE for calculating u(p)
1339   AutoPtr<FEGenericBase<OutputShape> > fe_new = this->build_new_fe( fe, p );
1340 
1341   // Get the values of the shape function derivatives
1342   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputTensor> >&  d2phi = fe_new->get_d2phi();
1343 
1344   hess_u = 0\&.0;
1345 
1346   for (unsigned int l=0; l != n_dofs; l++)
1347     hess_u\&.add_scaled(d2phi[l][0], coef(l));
1348 
1349   return;
1350 }
.fi
.SS "\fBNumber\fP libMesh::FEMContext::fixed_point_value (unsigned intvar, const \fBPoint\fP &p) const\fC [inherited]\fP"
Returns the value of the fixed_solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 1208 of file fem_context\&.C\&.
.PP
.nf
1209 {
1210   Number u = 0\&.;
1211 
1212   this->fixed_point_value( var, p, u );
1213 
1214   return u;
1215 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::fixed_point_value (unsigned intvar, const \fBPoint\fP &p, OutputType &u) const\fC [inherited]\fP"
Returns the value of the fixed_solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. This is the preferred API\&. 
.PP
Definition at line 1218 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::build_new_fe(), libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_fixed_subsolutions, libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
1220 {
1221   typedef typename TensorTools::MakeReal<OutputType>::type OutputShape;
1222 
1223   // Get local-to-global dof index lookup
1224   libmesh_assert_greater (dof_indices\&.size(), var);
1225   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
1226     (dof_indices_var[var]\&.size());
1227 
1228   // Get current local coefficients
1229   libmesh_assert_greater (elem_fixed_subsolutions\&.size(), var);
1230   libmesh_assert(elem_fixed_subsolutions[var]);
1231   DenseSubVector<Number> &coef = *elem_fixed_subsolutions[var];
1232 
1233   // Get finite element object
1234   FEGenericBase<OutputShape>* fe = NULL;
1235   this->get_element_fe<OutputShape>( var, fe );
1236 
1237   // Build a FE for calculating u(p)
1238   AutoPtr<FEGenericBase<OutputShape> > fe_new = this->build_new_fe( fe, p );
1239 
1240   // Get the values of the shape function derivatives
1241   const std::vector<std::vector<OutputShape> >&  phi = fe_new->get_phi();
1242 
1243   u = 0\&.;
1244 
1245   for (unsigned int l=0; l != n_dofs; l++)
1246     u += phi[l][0] * coef(l);
1247 
1248   return;
1249 }
.fi
.SS "\fBGradient\fP libMesh::FEMContext::fixed_side_gradient (unsigned intvar, unsigned intqp) const\fC [inherited]\fP"
Returns the gradient of the fixed_solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element side\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 1113 of file fem_context\&.C\&.
.PP
.nf
1114 {
1115   Gradient du;
1116 
1117   this->fixed_side_gradient( var, qp, du );
1118 
1119   return du;
1120 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::fixed_side_gradient (unsigned intvar, unsigned intqp, OutputType &grad_u) const\fC [inherited]\fP"
Returns the gradient of the fixed_solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element side\&. This is the preferred API\&. 
.PP
Definition at line 1124 of file fem_context\&.C\&.
.PP
References libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_fixed_subsolutions, libMesh::FEGenericBase< T >::get_dphi(), libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
1126 {
1127   typedef typename TensorTools::MakeReal
1128     <typename TensorTools::DecrementRank<OutputType>::type>::type
1129     OutputShape;
1130 
1131   // Get local-to-global dof index lookup
1132   libmesh_assert_greater (dof_indices\&.size(), var);
1133   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
1134     (dof_indices_var[var]\&.size());
1135 
1136   // Get current local coefficients
1137   libmesh_assert_greater (elem_fixed_subsolutions\&.size(), var);
1138   libmesh_assert(elem_fixed_subsolutions[var]);
1139   DenseSubVector<Number> &coef = *elem_fixed_subsolutions[var];
1140 
1141   // Get finite element object
1142   FEGenericBase<OutputShape>* the_side_fe = NULL;
1143   this->get_side_fe<OutputShape>( var, the_side_fe );
1144 
1145   // Get shape function values at quadrature point
1146   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputGradient> > &dphi = the_side_fe->get_dphi();
1147 
1148   // Accumulate solution derivatives
1149   du = 0\&.0;
1150 
1151   for (unsigned int l=0; l != n_dofs; l++)
1152     du\&.add_scaled(dphi[l][qp], coef(l));
1153 
1154   return;
1155 }
.fi
.SS "\fBTensor\fP libMesh::FEMContext::fixed_side_hessian (unsigned intvar, unsigned intqp) const\fC [inherited]\fP"
Returns the hessian of the fixed_solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element side\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 1160 of file fem_context\&.C\&.
.PP
.nf
1161 {
1162   Tensor d2u;
1163 
1164   this->fixed_side_hessian( var, qp, d2u );
1165 
1166   return d2u;
1167 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::fixed_side_hessian (unsigned intvar, unsigned intqp, OutputType &hess_u) const\fC [inherited]\fP"
Returns the hessian of the fixed_solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element side\&. This is the preferred API\&. 
.PP
Definition at line 1170 of file fem_context\&.C\&.
.PP
References libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_fixed_subsolutions, libMesh::FEGenericBase< T >::get_d2phi(), libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
1172 {
1173   typedef typename TensorTools::MakeReal<
1174     typename TensorTools::DecrementRank<
1175     typename TensorTools::DecrementRank<
1176     OutputType>::type>::type>::type
1177     OutputShape;
1178 
1179   // Get local-to-global dof index lookup
1180   libmesh_assert_greater (dof_indices\&.size(), var);
1181   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
1182     (dof_indices_var[var]\&.size());
1183 
1184   // Get current local coefficients
1185   libmesh_assert_greater (elem_fixed_subsolutions\&.size(), var);
1186   libmesh_assert(elem_fixed_subsolutions[var]);
1187   DenseSubVector<Number> &coef = *elem_fixed_subsolutions[var];
1188 
1189   // Get finite element object
1190   FEGenericBase<OutputShape>* the_side_fe = NULL;
1191   this->get_side_fe<OutputShape>( var, the_side_fe );
1192 
1193   // Get shape function values at quadrature point
1194   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputTensor> > &d2phi = the_side_fe->get_d2phi();
1195 
1196   // Accumulate solution second derivatives
1197   d2u = 0\&.0;
1198 
1199   for (unsigned int l=0; l != n_dofs; l++)
1200     d2u\&.add_scaled(d2phi[l][qp], coef(l));
1201 
1202   return;
1203 }
.fi
.SS "\fBNumber\fP libMesh::FEMContext::fixed_side_value (unsigned intvar, unsigned intqp) const\fC [inherited]\fP"
Returns the value of the fixed_solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element side\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 1069 of file fem_context\&.C\&.
.PP
.nf
1070 {
1071   Number u = 0\&.;
1072 
1073   this->fixed_side_value( var, qp, u );
1074 
1075   return u;
1076 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::fixed_side_value (unsigned intvar, unsigned intqp, OutputType &u) const\fC [inherited]\fP"
Returns the value of the fixed_solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element side\&. This is the preferred API\&. 
.PP
Definition at line 1080 of file fem_context\&.C\&.
.PP
References libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_fixed_subsolutions, libMesh::FEGenericBase< T >::get_phi(), libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
1082 {
1083   typedef typename TensorTools::MakeReal<OutputType>::type OutputShape;
1084 
1085   // Get local-to-global dof index lookup
1086   libmesh_assert_greater (dof_indices\&.size(), var);
1087   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
1088     (dof_indices_var[var]\&.size());
1089 
1090   // Get current local coefficients
1091   libmesh_assert_greater (elem_fixed_subsolutions\&.size(), var);
1092   libmesh_assert(elem_fixed_subsolutions[var]);
1093   DenseSubVector<Number> &coef = *elem_fixed_subsolutions[var];
1094 
1095   // Get finite element object
1096   FEGenericBase<OutputShape>* the_side_fe = NULL;
1097   this->get_side_fe<OutputShape>( var, the_side_fe );
1098 
1099   // Get shape function values at quadrature point
1100   const std::vector<std::vector<OutputShape> > &phi = the_side_fe->get_phi();
1101 
1102   // Accumulate solution value
1103   u = 0\&.0;
1104 
1105   for (unsigned int l=0; l != n_dofs; l++)
1106     u += phi[l][qp] * coef(l);
1107 
1108   return;
1109 }
.fi
.SS "\fBReal\fP libMesh::DiffContext::get_deltat_value ()\fC [inherited]\fP"
Returns the value currently pointed to by this class's _deltat member 
.PP
Definition at line 117 of file diff_context\&.C\&.
.PP
References libMesh::DiffContext::_deltat, and libMesh::libmesh_assert()\&.
.PP
Referenced by libMesh::FEMContext::_update_time_from_system()\&.
.PP
.nf
118 {
119   libmesh_assert(_deltat);
120 
121   return *_deltat;
122 }
.fi
.SS "unsigned char libMesh::FEMContext::get_dim () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for cached element dimension 
.PP
Definition at line 636 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::dim\&.
.PP
.nf
637   { return dim; }
.fi
.SS "const std::vector<\fBdof_id_type\fP>& libMesh::DiffContext::get_dof_indices () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for element dof indices 
.PP
Definition at line 235 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::dof_indices\&.
.PP
Referenced by libMesh::EulerSolver::element_residual(), libMesh::Euler2Solver::element_residual(), libMesh::FEMSystem::mesh_position_get(), libMesh::FEMSystem::numerical_jacobian(), libMesh::EulerSolver::side_residual(), and libMesh::Euler2Solver::side_residual()\&.
.PP
.nf
236   { return dof_indices; }
.fi
.SS "std::vector<\fBdof_id_type\fP>& libMesh::DiffContext::get_dof_indices ()\fC [inline]\fP, \fC [inherited]\fP"
Non-const accessor for element dof indices 
.PP
Definition at line 241 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::dof_indices\&.
.PP
.nf
242   { return dof_indices; }
.fi
.SS "const std::vector<\fBdof_id_type\fP>& libMesh::DiffContext::get_dof_indices (unsigned intvar) const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for element dof indices of a particular variable corresponding to the index argument\&. 
.PP
Definition at line 248 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::dof_indices_var\&.
.PP
.nf
249   { return dof_indices_var[var]; }
.fi
.SS "unsigned char libMesh::FEMContext::get_edge () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for current edge of \fBElem\fP object 
.PP
Definition at line 630 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::edge\&.
.PP
.nf
631   { return edge; }
.fi
.SS "template<typename OutputShape > void libMesh::FEMContext::get_edge_fe (unsigned intvar, \fBFEGenericBase\fP< OutputShape > *&fe) const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for edge (3D only!) finite element object for variable var\&. 
.PP
Definition at line 796 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_edge_fe_var\&.
.PP
.nf
797 {
798   libmesh_assert_less ( var, _edge_fe_var\&.size() );
799   fe = libmesh_cast_ptr<FEGenericBase<OutputShape>*>( _edge_fe_var[var] );
800 }
.fi
.SS "\fBFEBase\fP * libMesh::FEMContext::get_edge_fe (unsigned intvar) const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for edge finite element object for scalar-valued variable var\&. 
.PP
Definition at line 803 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_edge_fe_var\&.
.PP
.nf
804 {
805   libmesh_assert_less ( var, _edge_fe_var\&.size() );
806   return libmesh_cast_ptr<FEBase*>( _edge_fe_var[var] );
807 }
.fi
.SS "const \fBQBase\fP& libMesh::FEMContext::get_edge_qrule () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for element edge quadrature rule\&. 
.PP
Definition at line 541 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::edge_qrule\&.
.PP
.nf
542   { return *(this->edge_qrule); }
.fi
.SS "const \fBElem\fP& libMesh::FEMContext::get_elem () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for current \fBElem\fP object 
.PP
Definition at line 612 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::elem\&.
.PP
Referenced by libMesh::FEMSystem::mesh_position_set(), and libMesh::FEMSystem::numerical_jacobian()\&.
.PP
.nf
613   { return *elem; }
.fi
.SS "\fBElem\fP& libMesh::FEMContext::get_elem ()\fC [inline]\fP, \fC [inherited]\fP"
Accessor for current \fBElem\fP object 
.PP
Definition at line 618 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::elem\&.
.PP
.nf
619   { return *(const_cast<Elem*>(elem)); }
.fi
.SS "const \fBDenseMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_elem_elem_jacobian () const\fC [inline]\fP"
Const accessor for element-element Jacobian\&. 
.PP
Definition at line 110 of file dg_fem_context\&.h\&.
.PP
References _elem_elem_jacobian\&.
.PP
.nf
111   { return _elem_elem_jacobian; }
.fi
.SS "\fBDenseMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_elem_elem_jacobian ()\fC [inline]\fP"
Non-const accessor for element-element Jacobian\&. 
.PP
Definition at line 116 of file dg_fem_context\&.h\&.
.PP
References _elem_elem_jacobian\&.
.PP
.nf
117   { return _elem_elem_jacobian; }
.fi
.SS "const \fBDenseSubMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_elem_elem_jacobian (unsigned intvar1, unsigned intvar2) const\fC [inline]\fP"
Const accessor for element-element Jacobian of particular variables corresponding to the variable index arguments\&. 
.PP
Definition at line 123 of file dg_fem_context\&.h\&.
.PP
References _elem_elem_subjacobians\&.
.PP
.nf
124   { return *(_elem_elem_subjacobians[var1][var2]); }
.fi
.SS "\fBDenseSubMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_elem_elem_jacobian (unsigned intvar1, unsigned intvar2)\fC [inline]\fP"
Non-const accessor for element-element Jacobian of particular variables corresponding to the variable index arguments\&. 
.PP
Definition at line 130 of file dg_fem_context\&.h\&.
.PP
References _elem_elem_subjacobians\&.
.PP
.nf
131   { return *(_elem_elem_subjacobians[var1][var2]); }
.fi
.SS "const \fBDenseVector\fP<\fBNumber\fP>& libMesh::DiffContext::get_elem_fixed_solution () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for element fixed solution\&. 
.PP
Definition at line 126 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_fixed_solution\&.
.PP
Referenced by libMesh::EulerSolver::element_residual(), libMesh::Euler2Solver::element_residual(), libMesh::SteadySolver::element_residual(), libMesh::EulerSolver::side_residual(), libMesh::Euler2Solver::side_residual(), and libMesh::SteadySolver::side_residual()\&.
.PP
.nf
127   { return elem_fixed_solution; }
.fi
.SS "\fBDenseVector\fP<\fBNumber\fP>& libMesh::DiffContext::get_elem_fixed_solution ()\fC [inline]\fP, \fC [inherited]\fP"
Non-const accessor for element fixed solution\&. 
.PP
Definition at line 132 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_fixed_solution\&.
.PP
.nf
133   { return elem_fixed_solution; }
.fi
.SS "const \fBDenseSubVector\fP<\fBNumber\fP>& libMesh::DiffContext::get_elem_fixed_solution (unsigned intvar) const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for element fixed solution of a particular variable corresponding to the variable index argument\&. 
.PP
Definition at line 139 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_fixed_subsolutions\&.
.PP
.nf
140   { return *(elem_fixed_subsolutions[var]); }
.fi
.SS "const \fBDenseMatrix\fP<\fBNumber\fP>& libMesh::DiffContext::get_elem_jacobian () const\fC [inline]\fP, \fC [inherited]\fP"
Const accessor for element Jacobian\&. 
.PP
Definition at line 171 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_jacobian\&.
.PP
Referenced by libMesh::EulerSolver::element_residual(), libMesh::Euler2Solver::element_residual(), libMesh::FEMSystem::numerical_jacobian(), libMesh::EulerSolver::side_residual(), and libMesh::Euler2Solver::side_residual()\&.
.PP
.nf
172   { return elem_jacobian; }
.fi
.SS "\fBDenseMatrix\fP<\fBNumber\fP>& libMesh::DiffContext::get_elem_jacobian ()\fC [inline]\fP, \fC [inherited]\fP"
Non-const accessor for element Jacobian\&. 
.PP
Definition at line 177 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_jacobian\&.
.PP
.nf
178   { return elem_jacobian; }
.fi
.SS "const \fBDenseSubMatrix\fP<\fBNumber\fP>& libMesh::DiffContext::get_elem_jacobian (unsigned intvar1, unsigned intvar2) const\fC [inline]\fP, \fC [inherited]\fP"
Const accessor for element Jacobian of particular variables corresponding to the variable index arguments\&. 
.PP
Definition at line 184 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_subjacobians\&.
.PP
.nf
185   { return *(elem_subjacobians[var1][var2]); }
.fi
.SS "\fBDenseSubMatrix\fP<\fBNumber\fP>& libMesh::DiffContext::get_elem_jacobian (unsigned intvar1, unsigned intvar2)\fC [inline]\fP, \fC [inherited]\fP"
Non-const accessor for element Jacobian of particular variables corresponding to the variable index arguments\&. 
.PP
Definition at line 191 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_subjacobians\&.
.PP
.nf
192   { return *(elem_subjacobians[var1][var2]); }
.fi
.SS "const \fBDenseMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_elem_neighbor_jacobian () const\fC [inline]\fP"
Const accessor for element-neighbor Jacobian\&. 
.PP
Definition at line 136 of file dg_fem_context\&.h\&.
.PP
References _elem_neighbor_jacobian\&.
.PP
.nf
137   { return _elem_neighbor_jacobian; }
.fi
.SS "\fBDenseMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_elem_neighbor_jacobian ()\fC [inline]\fP"
Non-const accessor for element -neighborJacobian\&. 
.PP
Definition at line 142 of file dg_fem_context\&.h\&.
.PP
References _elem_neighbor_jacobian\&.
.PP
.nf
143   { return _elem_neighbor_jacobian; }
.fi
.SS "const \fBDenseSubMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_elem_neighbor_jacobian (unsigned intvar1, unsigned intvar2) const\fC [inline]\fP"
Const accessor for element-neighbor Jacobian of particular variables corresponding to the variable index arguments\&. 
.PP
Definition at line 149 of file dg_fem_context\&.h\&.
.PP
References _elem_neighbor_subjacobians\&.
.PP
.nf
150   { return *(_elem_neighbor_subjacobians[var1][var2]); }
.fi
.SS "\fBDenseSubMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_elem_neighbor_jacobian (unsigned intvar1, unsigned intvar2)\fC [inline]\fP"
Non-const accessor for element-neighbor Jacobian of particular variables corresponding to the variable index arguments\&. 
.PP
Definition at line 156 of file dg_fem_context\&.h\&.
.PP
References _elem_neighbor_subjacobians\&.
.PP
.nf
157   { return *(_elem_neighbor_subjacobians[var1][var2]); }
.fi
.SS "const \fBDenseVector\fP<\fBNumber\fP>& libMesh::DiffContext::get_elem_residual () const\fC [inline]\fP, \fC [inherited]\fP"
Const accessor for element residual\&. 
.PP
Definition at line 145 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_residual\&.
.PP
Referenced by libMesh::EulerSolver::element_residual(), libMesh::Euler2Solver::element_residual(), libMesh::FEMSystem::numerical_jacobian(), libMesh::EulerSolver::side_residual(), and libMesh::Euler2Solver::side_residual()\&.
.PP
.nf
146   { return elem_residual; }
.fi
.SS "\fBDenseVector\fP<\fBNumber\fP>& libMesh::DiffContext::get_elem_residual ()\fC [inline]\fP, \fC [inherited]\fP"
Non-const accessor for element residual\&. 
.PP
Definition at line 151 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_residual\&.
.PP
.nf
152   { return elem_residual; }
.fi
.SS "const \fBDenseSubVector\fP<\fBNumber\fP>& libMesh::DiffContext::get_elem_residual (unsigned intvar) const\fC [inline]\fP, \fC [inherited]\fP"
Const accessor for element residual of a particular variable corresponding to the variable index argument\&. 
.PP
Definition at line 158 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_subresiduals\&.
.PP
.nf
159   { return *(elem_subresiduals[var]); }
.fi
.SS "\fBDenseSubVector\fP<\fBNumber\fP>& libMesh::DiffContext::get_elem_residual (unsigned intvar)\fC [inline]\fP, \fC [inherited]\fP"
Non-const accessor for element residual of a particular variable corresponding to the variable index argument\&. 
.PP
Definition at line 165 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_subresiduals\&.
.PP
.nf
166   { return *(elem_subresiduals[var]); }
.fi
.SS "const \fBDenseVector\fP<\fBNumber\fP>& libMesh::DiffContext::get_elem_solution () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for element solution\&. 
.PP
Definition at line 107 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_solution\&.
.PP
Referenced by libMesh::EulerSolver::element_residual(), libMesh::Euler2Solver::element_residual(), libMesh::SteadySolver::element_residual(), libMesh::FEMSystem::mesh_position_get(), libMesh::FEMSystem::numerical_jacobian(), libMesh::EulerSolver::side_residual(), libMesh::Euler2Solver::side_residual(), and libMesh::SteadySolver::side_residual()\&.
.PP
.nf
108   { return elem_solution; }
.fi
.SS "\fBDenseVector\fP<\fBNumber\fP>& libMesh::DiffContext::get_elem_solution ()\fC [inline]\fP, \fC [inherited]\fP"
Non-const accessor for element solution\&. 
.PP
Definition at line 113 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_solution\&.
.PP
.nf
114   { return elem_solution; }
.fi
.SS "const \fBDenseSubVector\fP<\fBNumber\fP>& libMesh::DiffContext::get_elem_solution (unsigned intvar) const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for element solution of a particular variable corresponding to the variable index argument\&. 
.PP
Definition at line 120 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_subsolutions\&.
.PP
.nf
121   { return *(elem_subsolutions[var]); }
.fi
.SS "\fBReal\fP libMesh::DiffContext::get_elem_solution_derivative () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
Definition at line 269 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_solution_derivative\&.
.PP
.nf
270   { return elem_solution_derivative; }
.fi
.SS "template<typename OutputShape > void libMesh::FEMContext::get_element_fe (unsigned intvar, \fBFEGenericBase\fP< OutputShape > *&fe) const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for interior finite element object for variable var\&. 
.PP
Definition at line 766 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_element_fe_var\&.
.PP
Referenced by libMesh::FEMSystem::init_context()\&.
.PP
.nf
767 {
768   libmesh_assert_less ( var, _element_fe_var\&.size() );
769   fe = libmesh_cast_ptr<FEGenericBase<OutputShape>*>( _element_fe_var[var] );
770 }
.fi
.SS "\fBFEBase\fP * libMesh::FEMContext::get_element_fe (unsigned intvar) const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for interior finite element object for scalar-valued variable var\&. 
.PP
Definition at line 773 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_element_fe_var\&.
.PP
.nf
774 {
775   libmesh_assert_less ( var, _element_fe_var\&.size() );
776   return libmesh_cast_ptr<FEBase*>( _element_fe_var[var] );
777 }
.fi
.SS "const \fBQBase\fP& libMesh::FEMContext::get_element_qrule () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for element interior quadrature rule\&. 
.PP
Definition at line 529 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::element_qrule\&.
.PP
.nf
530   { return *(this->element_qrule); }
.fi
.SS "\fBReal\fP libMesh::DiffContext::get_fixed_solution_derivative () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
Definition at line 272 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::fixed_solution_derivative\&.
.PP
.nf
273   { return fixed_solution_derivative; }
.fi
.SS "\fBDenseSubVector\fP< \fBNumber\fP > & libMesh::DiffContext::get_localized_subvector (const \fBNumericVector\fP< \fBNumber\fP > &_localized_vector, unsigned int_var)\fC [inherited]\fP"
Return a reference to \fBDenseSubVector\fP localization of _localized_vector at variable _var contained in the localized_vectors map 
.PP
Definition at line 155 of file diff_context\&.C\&.
.PP
References libMesh::DiffContext::localized_vectors\&.
.PP
Referenced by libMesh::FEMContext::interior_values()\&.
.PP
.nf
156 {
157   return *localized_vectors[&_localized_vector]\&.second[_var];
158 }
.fi
.SS "const \fBDenseSubVector\fP< \fBNumber\fP > & libMesh::DiffContext::get_localized_subvector (const \fBNumericVector\fP< \fBNumber\fP > &_localized_vector, unsigned int_var) const\fC [inherited]\fP"
const accessible version of get_localized_subvector function 
.PP
Definition at line 161 of file diff_context\&.C\&.
.PP
References libMesh::libmesh_assert(), and libMesh::DiffContext::localized_vectors\&.
.PP
.nf
162 {
163   std::map<const NumericVector<Number>*, std::pair<DenseVector<Number>, std::vector<DenseSubVector<Number>*> > >::const_iterator
164     localized_vectors_it = localized_vectors\&.find(&_localized_vector);
165   libmesh_assert(localized_vectors_it != localized_vectors\&.end());
166   return *localized_vectors_it->second\&.second[_var];
167 }
.fi
.SS "\fBDenseVector\fP< \fBNumber\fP > & libMesh::DiffContext::get_localized_vector (const \fBNumericVector\fP< \fBNumber\fP > &_localized_vector)\fC [inherited]\fP"
Return a reference to \fBDenseVector\fP localization of _localized_vector contained in the localized_vectors map 
.PP
Definition at line 140 of file diff_context\&.C\&.
.PP
References libMesh::DiffContext::localized_vectors\&.
.PP
.nf
141 {
142   return localized_vectors[&_localized_vector]\&.first;
143 }
.fi
.SS "const \fBDenseVector\fP< \fBNumber\fP > & libMesh::DiffContext::get_localized_vector (const \fBNumericVector\fP< \fBNumber\fP > &_localized_vector) const\fC [inherited]\fP"
const accessible version of get_localized_vector function 
.PP
Definition at line 146 of file diff_context\&.C\&.
.PP
References libMesh::libmesh_assert(), and libMesh::DiffContext::localized_vectors\&.
.PP
.nf
147 {
148   std::map<const NumericVector<Number>*, std::pair<DenseVector<Number>, std::vector<DenseSubVector<Number>*> > >::const_iterator
149     localized_vectors_it = localized_vectors\&.find(&_localized_vector);
150   libmesh_assert(localized_vectors_it != localized_vectors\&.end());
151   return localized_vectors_it->second\&.first;
152 }
.fi
.SS "const \fBSystem\fP* libMesh::FEMContext::get_mesh_system () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for moving mesh \fBSystem\fP 
.PP
Definition at line 558 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_mesh_sys\&.
.PP
.nf
559   { return this->_mesh_sys; }
.fi
.SS "\fBSystem\fP* libMesh::FEMContext::get_mesh_system ()\fC [inline]\fP, \fC [inherited]\fP"
Accessor for moving mesh \fBSystem\fP 
.PP
Definition at line 564 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_mesh_sys\&.
.PP
.nf
565   { return this->_mesh_sys; }
.fi
.SS "unsigned int libMesh::FEMContext::get_mesh_x_var () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for x-variable of moving mesh \fBSystem\fP 
.PP
Definition at line 570 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_mesh_x_var\&.
.PP
.nf
571   { return _mesh_x_var; }
.fi
.SS "unsigned int libMesh::FEMContext::get_mesh_y_var () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for y-variable of moving mesh \fBSystem\fP 
.PP
Definition at line 584 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_mesh_y_var\&.
.PP
.nf
585   { return _mesh_y_var; }
.fi
.SS "unsigned int libMesh::FEMContext::get_mesh_z_var () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for z-variable of moving mesh \fBSystem\fP 
.PP
Definition at line 598 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_mesh_z_var\&.
.PP
.nf
599   { return _mesh_z_var; }
.fi
.SS "const \fBElem\fP& libMesh::DGFEMContext::get_neighbor () const\fC [inline]\fP"
Accessor for current neighbor \fBElem\fP object for assembling DG terms\&. 
.PP
Definition at line 225 of file dg_fem_context\&.h\&.
.PP
References _neighbor\&.
.PP
Referenced by neighbor_side_fe_reinit()\&.
.PP
.nf
226   { return *_neighbor; }
.fi
.SS "const std::vector<\fBdof_id_type\fP>& libMesh::DGFEMContext::get_neighbor_dof_indices () const\fC [inline]\fP"
Accessor for neighbor dof indices 
.PP
Definition at line 71 of file dg_fem_context\&.h\&.
.PP
References _neighbor_dof_indices\&.
.PP
.nf
72   { return _neighbor_dof_indices; }
.fi
.SS "const std::vector<\fBdof_id_type\fP>& libMesh::DGFEMContext::get_neighbor_dof_indices (unsigned intvar) const\fC [inline]\fP"
Accessor for element dof indices of a particular variable corresponding to the index argument\&. 
.PP
Definition at line 78 of file dg_fem_context\&.h\&.
.PP
References _neighbor_dof_indices_var\&.
.PP
.nf
79   { return _neighbor_dof_indices_var[var]; }
.fi
.SS "const \fBDenseMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_neighbor_elem_jacobian () const\fC [inline]\fP"
Const accessor for element-neighbor Jacobian\&. 
.PP
Definition at line 162 of file dg_fem_context\&.h\&.
.PP
References _neighbor_elem_jacobian\&.
.PP
.nf
163   { return _neighbor_elem_jacobian; }
.fi
.SS "\fBDenseMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_neighbor_elem_jacobian ()\fC [inline]\fP"
Non-const accessor for element Jacobian\&. 
.PP
Definition at line 168 of file dg_fem_context\&.h\&.
.PP
References _neighbor_elem_jacobian\&.
.PP
.nf
169   { return _neighbor_elem_jacobian; }
.fi
.SS "const \fBDenseSubMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_neighbor_elem_jacobian (unsigned intvar1, unsigned intvar2) const\fC [inline]\fP"
Const accessor for neighbor-element Jacobian of particular variables corresponding to the variable index arguments\&. 
.PP
Definition at line 175 of file dg_fem_context\&.h\&.
.PP
References _neighbor_elem_subjacobians\&.
.PP
.nf
176   { return *(_neighbor_elem_subjacobians[var1][var2]); }
.fi
.SS "\fBDenseSubMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_neighbor_elem_jacobian (unsigned intvar1, unsigned intvar2)\fC [inline]\fP"
Non-const accessor for neighbor-element Jacobian of particular variables corresponding to the variable index arguments\&. 
.PP
Definition at line 182 of file dg_fem_context\&.h\&.
.PP
References _neighbor_elem_subjacobians\&.
.PP
.nf
183   { return *(_neighbor_elem_subjacobians[var1][var2]); }
.fi
.SS "const \fBDenseMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_neighbor_neighbor_jacobian () const\fC [inline]\fP"
Const accessor for element-neighbor Jacobian\&. 
.PP
Definition at line 188 of file dg_fem_context\&.h\&.
.PP
References _neighbor_neighbor_jacobian\&.
.PP
.nf
189   { return _neighbor_neighbor_jacobian; }
.fi
.SS "\fBDenseMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_neighbor_neighbor_jacobian ()\fC [inline]\fP"
Non-const accessor for element Jacobian\&. 
.PP
Definition at line 194 of file dg_fem_context\&.h\&.
.PP
References _neighbor_neighbor_jacobian\&.
.PP
.nf
195   { return _neighbor_neighbor_jacobian; }
.fi
.SS "const \fBDenseSubMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_neighbor_neighbor_jacobian (unsigned intvar1, unsigned intvar2) const\fC [inline]\fP"
Const accessor for neighbor-neighbor Jacobian of particular variables corresponding to the variable index arguments\&. 
.PP
Definition at line 201 of file dg_fem_context\&.h\&.
.PP
References _neighbor_neighbor_subjacobians\&.
.PP
.nf
202   { return *(_neighbor_neighbor_subjacobians[var1][var2]); }
.fi
.SS "\fBDenseSubMatrix\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_neighbor_neighbor_jacobian (unsigned intvar1, unsigned intvar2)\fC [inline]\fP"
Non-const accessor for neighbor-neighbor Jacobian of particular variables corresponding to the variable index arguments\&. 
.PP
Definition at line 208 of file dg_fem_context\&.h\&.
.PP
References _neighbor_neighbor_subjacobians\&.
.PP
.nf
209   { return *(_neighbor_neighbor_subjacobians[var1][var2]); }
.fi
.SS "const \fBDenseVector\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_neighbor_residual () const\fC [inline]\fP"
Const accessor for neighbor residual\&. 
.PP
Definition at line 84 of file dg_fem_context\&.h\&.
.PP
References _neighbor_residual\&.
.PP
.nf
85   { return _neighbor_residual; }
.fi
.SS "\fBDenseVector\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_neighbor_residual ()\fC [inline]\fP"
Non-const accessor for neighbor residual\&. 
.PP
Definition at line 90 of file dg_fem_context\&.h\&.
.PP
References _neighbor_residual\&.
.PP
.nf
91   { return _neighbor_residual; }
.fi
.SS "const \fBDenseSubVector\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_neighbor_residual (unsigned intvar) const\fC [inline]\fP"
Const accessor for neighbor residual of a particular variable corresponding to the variable index argument\&. 
.PP
Definition at line 97 of file dg_fem_context\&.h\&.
.PP
References _neighbor_subresiduals\&.
.PP
.nf
98   { return *(_neighbor_subresiduals[var]); }
.fi
.SS "\fBDenseSubVector\fP<\fBNumber\fP>& libMesh::DGFEMContext::get_neighbor_residual (unsigned intvar)\fC [inline]\fP"
Non-const accessor for neighbor residual of a particular variable corresponding to the variable index argument\&. 
.PP
Definition at line 104 of file dg_fem_context\&.h\&.
.PP
References _neighbor_subresiduals\&.
.PP
.nf
105   { return *(_neighbor_subresiduals[var]); }
.fi
.SS "template<typename OutputShape > void libMesh::DGFEMContext::get_neighbor_side_fe (unsigned intvar, \fBFEGenericBase\fP< OutputShape > *&fe) const\fC [inline]\fP"
Accessor for neighbor edge/face (2D/3D) finite element object for variable var\&. 
.PP
Definition at line 300 of file dg_fem_context\&.h\&.
.PP
References _neighbor_side_fe_var\&.
.PP
.nf
301 {
302   libmesh_assert_less ( var, _neighbor_side_fe_var\&.size() );
303   fe = libmesh_cast_ptr<FEGenericBase<OutputShape>*>( _neighbor_side_fe_var[var] );
304 }
.fi
.SS "const std::vector<\fBDenseVector\fP<\fBNumber\fP> >& libMesh::DiffContext::get_qoi_derivatives () const\fC [inline]\fP, \fC [inherited]\fP"
Const accessor for QoI derivatives\&. 
.PP
Definition at line 209 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_qoi_derivative\&.
.PP
.nf
210   { return elem_qoi_derivative; }
.fi
.SS "std::vector<\fBDenseVector\fP<\fBNumber\fP> >& libMesh::DiffContext::get_qoi_derivatives ()\fC [inline]\fP, \fC [inherited]\fP"
Non-const accessor for QoI derivatives\&. 
.PP
Definition at line 215 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_qoi_derivative\&.
.PP
.nf
216   { return elem_qoi_derivative; }
.fi
.SS "const \fBDenseSubVector\fP<\fBNumber\fP>& libMesh::DiffContext::get_qoi_derivatives (unsigned intqoi, unsigned intvar) const\fC [inline]\fP, \fC [inherited]\fP"
Const accessor for QoI derivative of a particular qoi and variable corresponding to the index arguments\&. 
.PP
Definition at line 222 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_qoi_subderivatives\&.
.PP
.nf
223   { return *(elem_qoi_subderivatives[qoi][var]); }
.fi
.SS "\fBDenseSubVector\fP<\fBNumber\fP>& libMesh::DiffContext::get_qoi_derivatives (unsigned intqoi, unsigned intvar)\fC [inline]\fP, \fC [inherited]\fP"
Non-const accessor for QoI derivative of a particular qoi and variable corresponding to the index arguments\&. 
.PP
Definition at line 229 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_qoi_subderivatives\&.
.PP
.nf
230   { return *(elem_qoi_subderivatives[qoi][var]); }
.fi
.SS "const std::vector<\fBNumber\fP>& libMesh::DiffContext::get_qois () const\fC [inline]\fP, \fC [inherited]\fP"
Const accessor for QoI vector\&. 
.PP
Definition at line 197 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_qoi\&.
.PP
.nf
198   { return elem_qoi; }
.fi
.SS "std::vector<\fBNumber\fP>& libMesh::DiffContext::get_qois ()\fC [inline]\fP, \fC [inherited]\fP"
Non-const accessor for QoI vector\&. 
.PP
Definition at line 203 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::elem_qoi\&.
.PP
.nf
204   { return elem_qoi; }
.fi
.SS "unsigned char libMesh::FEMContext::get_side () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for current side of \fBElem\fP object 
.PP
Definition at line 624 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::side\&.
.PP
.nf
625   { return side; }
.fi
.SS "template<typename OutputShape > void libMesh::FEMContext::get_side_fe (unsigned intvar, \fBFEGenericBase\fP< OutputShape > *&fe) const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for edge/face (2D/3D) finite element object for variable var\&. 
.PP
Definition at line 781 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_side_fe_var\&.
.PP
.nf
782 {
783   libmesh_assert_less ( var, _side_fe_var\&.size() );
784   fe = libmesh_cast_ptr<FEGenericBase<OutputShape>*>( _side_fe_var[var] );
785 }
.fi
.SS "\fBFEBase\fP * libMesh::FEMContext::get_side_fe (unsigned intvar) const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for side finite element object for scalar-valued variable var\&. 
.PP
Definition at line 788 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_side_fe_var\&.
.PP
.nf
789 {
790   libmesh_assert_less ( var, _side_fe_var\&.size() );
791   return libmesh_cast_ptr<FEBase*>( _side_fe_var[var] );
792 }
.fi
.SS "const \fBQBase\fP& libMesh::FEMContext::get_side_qrule () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for element side quadrature rule\&. 
.PP
Definition at line 535 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::side_qrule\&.
.PP
.nf
536   { return *(this->side_qrule); }
.fi
.SS "const \fBSystem\fP& libMesh::DiffContext::get_system () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for associated system\&. 
.PP
Definition at line 101 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::_system\&.
.PP
Referenced by neighbor_side_fe_reinit()\&.
.PP
.nf
102   { return _system; }
.fi
.SS "\fBReal\fP libMesh::DiffContext::get_system_time () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for the time variable stored in the system class\&. 
.PP
Definition at line 254 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::system_time\&.
.PP
.nf
255   { return system_time; }
.fi
.SS "\fBReal\fP libMesh::DiffContext::get_time () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for the time for which the current nonlinear_solution is defined\&. 
.PP
Definition at line 260 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::time\&.
.PP
.nf
261   { return time; }
.fi
.SS "bool libMesh::FEMContext::has_side_boundary_id (\fBboundary_id_type\fPid) const\fC [inherited]\fP"
Reports if the boundary id is found on the current side 
.PP
Definition at line 143 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::_boundary_info, libMesh::FEMContext::elem, libMesh::BoundaryInfo::has_boundary_id(), and libMesh::FEMContext::side\&.
.PP
.nf
144 {
145   return _boundary_info->has_boundary_id(elem, side, id);
146 }
.fi
.SS "template<typename OutputType > template void libMesh::FEMContext::interior_curl< \fBGradient\fP > (unsigned intvar, unsigned intqp, OutputType &curl_u) const\fC [inherited]\fP"
Returns the curl of the solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. 
.PP
Definition at line 416 of file fem_context\&.C\&.
.PP
References libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_subsolutions, libMesh::FEGenericBase< T >::get_curl_phi(), libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
418 {
419   typedef typename TensorTools::MakeReal<OutputType>::type OutputShape;
420 
421   // Get local-to-global dof index lookup
422   libmesh_assert_greater (dof_indices\&.size(), var);
423   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
424     (dof_indices_var[var]\&.size());
425 
426   // Get current local coefficients
427   libmesh_assert_greater (elem_subsolutions\&.size(), var);
428   libmesh_assert(elem_subsolutions[var]);
429   DenseSubVector<Number> &coef = *elem_subsolutions[var];
430 
431   // Get finite element object
432   FEGenericBase<OutputShape>* fe = NULL;
433   this->get_element_fe<OutputShape>( var, fe );
434 
435   // Get shape function values at quadrature point
436   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputShape> > &curl_phi = fe->get_curl_phi();
437 
438   // Accumulate solution curl
439   curl_u = 0\&.;
440 
441   for (unsigned int l=0; l != n_dofs; l++)
442     curl_u\&.add_scaled(curl_phi[l][qp], coef(l));
443 
444   return;
445 }
.fi
.SS "template<typename OutputType > template void libMesh::FEMContext::interior_div< \fBNumber\fP > (unsigned intvar, unsigned intqp, OutputType &div_u) const\fC [inherited]\fP"
Returns the divergence of the solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. 
.PP
Definition at line 449 of file fem_context\&.C\&.
.PP
References libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_subsolutions, libMesh::FEGenericBase< T >::get_div_phi(), libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
451 {
452   typedef typename
453     TensorTools::IncrementRank
454     <typename TensorTools::MakeReal<OutputType>::type>::type OutputShape;
455 
456   // Get local-to-global dof index lookup
457   libmesh_assert_greater (dof_indices\&.size(), var);
458   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
459     (dof_indices_var[var]\&.size());
460 
461   // Get current local coefficients
462   libmesh_assert_greater (elem_subsolutions\&.size(), var);
463   libmesh_assert(elem_subsolutions[var]);
464   DenseSubVector<Number> &coef = *elem_subsolutions[var];
465 
466   // Get finite element object
467   FEGenericBase<OutputShape>* fe = NULL;
468   this->get_element_fe<OutputShape>( var, fe );
469 
470   // Get shape function values at quadrature point
471   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputDivergence> > &div_phi = fe->get_div_phi();
472 
473   // Accumulate solution curl
474   div_u = 0\&.;
475 
476   for (unsigned int l=0; l != n_dofs; l++)
477     div_u += div_phi[l][qp] * coef(l);
478 
479   return;
480 }
.fi
.SS "\fBGradient\fP libMesh::FEMContext::interior_gradient (unsigned intvar, unsigned intqp) const\fC [inherited]\fP"
Returns the gradient of the solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element interior\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 235 of file fem_context\&.C\&.
.PP
.nf
236 {
237   Gradient du;
238 
239   this->interior_gradient( var, qp, du );
240 
241   return du;
242 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::interior_gradient (unsigned intvar, unsigned intqp, OutputType &du) const\fC [inherited]\fP"
Returns the gradient of the solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element interior\&. This is the preferred API\&. 
.PP
Definition at line 247 of file fem_context\&.C\&.
.PP
References libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_subsolutions, libMesh::FEGenericBase< T >::get_dphi(), libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
249 {
250   typedef typename TensorTools::MakeReal
251     <typename TensorTools::DecrementRank<OutputType>::type>::type
252     OutputShape;
253 
254   // Get local-to-global dof index lookup
255   libmesh_assert_greater (dof_indices\&.size(), var);
256   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
257     (dof_indices_var[var]\&.size());
258 
259   // Get current local coefficients
260   libmesh_assert_greater (elem_subsolutions\&.size(), var);
261   libmesh_assert(elem_subsolutions[var]);
262   DenseSubVector<Number> &coef = *elem_subsolutions[var];
263 
264   // Get finite element object
265   FEGenericBase<OutputShape>* fe = NULL;
266   this->get_element_fe<OutputShape>( var, fe );
267 
268   // Get shape function values at quadrature point
269   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputGradient> > &dphi = fe->get_dphi();
270 
271   // Accumulate solution derivatives
272   du = 0;
273 
274   for (unsigned int l=0; l != n_dofs; l++)
275     du\&.add_scaled(dphi[l][qp], coef(l));
276 
277   return;
278 }
.fi
.SS "template<typename OutputType > template void libMesh::FEMContext::interior_gradients< \fBTensor\fP > (unsigned intvar, const \fBNumericVector\fP< \fBNumber\fP > &_system_vector, std::vector< OutputType > &interior_gradients_vector) const\fC [inherited]\fP"
Fills a vector with the gradient of the solution variable \fCvar\fP at all the quadrature points in the current element interior\&. This is the preferred API\&. 
.PP
Definition at line 284 of file fem_context\&.C\&.
.PP
References libMesh::FEGenericBase< T >::get_dphi(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
287 {
288   typedef typename TensorTools::MakeReal
289     <typename TensorTools::DecrementRank<OutputType>::type>::type
290     OutputShape;
291 
292   // Get local-to-global dof index lookup
293   libmesh_assert_greater (dof_indices\&.size(), var);
294   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
295     (dof_indices_var[var]\&.size());
296 
297   // Get current local coefficients
298   const DenseSubVector<Number> &coef = get_localized_subvector(_system_vector, var);
299 
300   // Get finite element object
301   FEGenericBase<OutputShape>* fe = NULL;
302   this->get_element_fe<OutputShape>( var, fe );
303 
304   // Get shape function values at quadrature point
305   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputGradient> > &dphi = fe->get_dphi();
306 
307   // Loop over all the q_points in this finite element
308   for (unsigned int qp=0; qp != du_vals\&.size(); qp++)
309     {
310       OutputType &du = du_vals[qp];
311 
312       // Compute the gradient at this q_point
313       du = 0;
314 
315       for (unsigned int l=0; l != n_dofs; l++)
316         du\&.add_scaled(dphi[l][qp], coef(l));
317     }
318 
319   return;
320 }
.fi
.SS "\fBTensor\fP libMesh::FEMContext::interior_hessian (unsigned intvar, unsigned intqp) const\fC [inherited]\fP"
Returns the hessian of the solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element interior\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 323 of file fem_context\&.C\&.
.PP
.nf
324 {
325   Tensor d2u;
326 
327   this->interior_hessian( var, qp, d2u );
328 
329   return d2u;
330 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::interior_hessian (unsigned intvar, unsigned intqp, OutputType &d2u) const\fC [inherited]\fP"
Returns the hessian of the solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element interior\&. This is the preferred API\&. 
.PP
Definition at line 333 of file fem_context\&.C\&.
.PP
References libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_subsolutions, libMesh::FEGenericBase< T >::get_d2phi(), libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
335 {
336   typedef typename TensorTools::MakeReal<
337     typename TensorTools::DecrementRank<
338     typename TensorTools::DecrementRank<
339     OutputType>::type>::type>::type
340     OutputShape;
341 
342   // Get local-to-global dof index lookup
343   libmesh_assert_greater (dof_indices\&.size(), var);
344   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
345     (dof_indices_var[var]\&.size());
346 
347   // Get current local coefficients
348   libmesh_assert_greater (elem_subsolutions\&.size(), var);
349   libmesh_assert(elem_subsolutions[var]);
350   DenseSubVector<Number> &coef = *elem_subsolutions[var];
351 
352   // Get finite element object
353   FEGenericBase<OutputShape>* fe = NULL;
354   this->get_element_fe<OutputShape>( var, fe );
355 
356   // Get shape function values at quadrature point
357   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputTensor> > &d2phi = fe->get_d2phi();
358 
359   // Accumulate solution second derivatives
360   d2u = 0\&.0;
361 
362   for (unsigned int l=0; l != n_dofs; l++)
363     d2u\&.add_scaled(d2phi[l][qp], coef(l));
364 
365   return;
366 }
.fi
.SS "template<typename OutputType > template void libMesh::FEMContext::interior_hessians< \fBTensor\fP > (unsigned intvar, const \fBNumericVector\fP< \fBNumber\fP > &_system_vector, std::vector< OutputType > &d2u_vals) const\fC [inherited]\fP"
Fills a vector of hessians of the _system_vector at the all the quadrature points in the current element interior\&. This is the preferred API\&. 
.PP
Definition at line 371 of file fem_context\&.C\&.
.PP
References libMesh::FEGenericBase< T >::get_d2phi(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
374 {
375   typedef typename TensorTools::MakeReal<
376     typename TensorTools::DecrementRank<
377     typename TensorTools::DecrementRank<
378     OutputType>::type>::type>::type
379     OutputShape;
380 
381   // Get local-to-global dof index lookup
382   libmesh_assert_greater (dof_indices\&.size(), var);
383   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
384     (dof_indices_var[var]\&.size());
385 
386   // Get current local coefficients
387   const DenseSubVector<Number> &coef = get_localized_subvector(_system_vector, var);
388 
389   // Get finite element object
390   FEGenericBase<OutputShape>* fe = NULL;
391   this->get_element_fe<OutputShape>( var, fe );
392 
393   // Get shape function values at quadrature point
394   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputTensor> > &d2phi = fe->get_d2phi();
395 
396   // Loop over all the q_points in this finite element
397   for (unsigned int qp=0; qp != d2u_vals\&.size(); qp++)
398     {
399       OutputType &d2u = d2u_vals[qp];
400 
401       // Compute the gradient at this q_point
402       d2u = 0;
403 
404       for (unsigned int l=0; l != n_dofs; l++)
405         d2u\&.add_scaled(d2phi[l][qp], coef(l));
406     }
407 
408   return;
409 }
.fi
.SS "\fBNumber\fP libMesh::FEMContext::interior_value (unsigned intvar, unsigned intqp) const\fC [inherited]\fP"
Returns the value of the solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element interior\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 156 of file fem_context\&.C\&.
.PP
.nf
157 {
158   Number u = 0\&.;
159 
160   this->interior_value( var, qp, u );
161 
162   return u;
163 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::interior_value (unsigned intvar, unsigned intqp, OutputType &u) const\fC [inherited]\fP"
Returns the value of the solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element interior\&. This is the preferred API\&. 
.PP
Definition at line 166 of file fem_context\&.C\&.
.PP
References libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_subsolutions, libMesh::FEGenericBase< T >::get_phi(), libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
168 {
169   typedef typename TensorTools::MakeReal<OutputType>::type OutputShape;
170 
171   // Get local-to-global dof index lookup
172   libmesh_assert_greater (dof_indices\&.size(), var);
173   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
174     (dof_indices_var[var]\&.size());
175 
176   // Get current local coefficients
177   libmesh_assert_greater (elem_subsolutions\&.size(), var);
178   libmesh_assert(elem_subsolutions[var]);
179   DenseSubVector<Number> &coef = *elem_subsolutions[var];
180 
181   // Get finite element object
182   FEGenericBase<OutputShape>* fe = NULL;
183   this->get_element_fe<OutputShape>( var, fe );
184 
185   // Get shape function values at quadrature point
186   const std::vector<std::vector<OutputShape> > &phi = fe->get_phi();
187 
188   // Accumulate solution value
189   u = 0\&.;
190 
191   for (unsigned int l=0; l != n_dofs; l++)
192     u += phi[l][qp] * coef(l);
193 
194   return;
195 }
.fi
.SS "template<typename OutputType > template void libMesh::FEMContext::interior_values< \fBGradient\fP > (unsigned intvar, const \fBNumericVector\fP< \fBNumber\fP > &_system_vector, std::vector< OutputType > &interior_values_vector) const\fC [inherited]\fP"
Fills a vector of values of the _system_vector at the all the quadrature points in the current element interior\&. 
.PP
Definition at line 199 of file fem_context\&.C\&.
.PP
References libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::get_localized_subvector(), libMesh::FEGenericBase< T >::get_phi(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
202 {
203   typedef typename TensorTools::MakeReal<OutputType>::type OutputShape;
204 
205   // Get local-to-global dof index lookup
206   libmesh_assert_greater (dof_indices\&.size(), var);
207   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
208     (dof_indices_var[var]\&.size());
209 
210   // Get current local coefficients
211   const DenseSubVector<Number> &coef = get_localized_subvector(_system_vector, var);
212 
213   // Get the finite element object
214   FEGenericBase<OutputShape>* fe = NULL;
215   this->get_element_fe<OutputShape>( var, fe );
216 
217   // Get shape function values at quadrature point
218   const std::vector<std::vector<OutputShape> > &phi = fe->get_phi();
219 
220   // Loop over all the q_points on this element
221   for (unsigned int qp=0; qp != u_vals\&.size(); qp++)
222     {
223       OutputType &u = u_vals[qp];
224 
225       // Compute the value at this q_point
226       u = 0\&.;
227 
228       for (unsigned int l=0; l != n_dofs; l++)
229         u += phi[l][qp] * coef(l);
230     }
231 
232   return;
233 }
.fi
.SS "bool libMesh::DiffContext::is_adjoint () const\fC [inline]\fP, \fC [inherited]\fP"
Accessor for querying whether we need to do a primal or adjoint solve 
.PP
Definition at line 279 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::_is_adjoint\&.
.PP
Referenced by libMesh::FEMSystem::build_context()\&.
.PP
.nf
280   { return _is_adjoint; }
.fi
.SS "bool& libMesh::DiffContext::is_adjoint ()\fC [inline]\fP, \fC [inherited]\fP"
Accessor for setting whether we need to do a primal or adjoint solve 
.PP
Definition at line 286 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::_is_adjoint\&.
.PP
.nf
287   { return _is_adjoint; }
.fi
.SS "unsigned int libMesh::DiffContext::n_vars () const\fC [inline]\fP, \fC [inherited]\fP"
Number of variables in solution\&. 
.PP
Definition at line 95 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::dof_indices_var\&.
.PP
.nf
96   { return libmesh_cast_int<unsigned int>(dof_indices_var\&.size()); }
.fi
.SS "void libMesh::DGFEMContext::neighbor_side_fe_reinit ()"
Initialize neighbor side data needed to assemble DG terms\&. The neighbor element is determined by the current value of \fBget_neighbor()\fP\&. 
.PP
Definition at line 112 of file dg_fem_context\&.C\&.
.PP
References _dg_terms_active, _elem_elem_jacobian, _elem_elem_subjacobians, _elem_neighbor_jacobian, _elem_neighbor_subjacobians, _neighbor_dof_indices, _neighbor_dof_indices_var, _neighbor_elem_jacobian, _neighbor_elem_subjacobians, _neighbor_neighbor_jacobian, _neighbor_neighbor_subjacobians, _neighbor_residual, _neighbor_side_fe, _neighbor_subresiduals, libMesh::FEMContext::_side_fe, libMesh::FEMContext::dim, libMesh::DiffContext::dof_indices, libMesh::DofMap::dof_indices(), libMesh::DiffContext::dof_indices_var, libMesh::System::get_dof_map(), get_neighbor(), libMesh::DiffContext::get_system(), libMesh::FEAbstract::get_xyz(), libMesh::FEInterface::inverse_map(), libMesh::System::n_vars(), libMesh::DenseVector< T >::resize(), and libMesh::DenseMatrix< T >::resize()\&.
.PP
.nf
113 {
114   // Call this *after* side_fe_reinit
115 
116   // Initialize all the neighbor side FE objects based on inverse mapping
117   // the quadrature points on the current side
118   std::vector<Point> qface_side_points;
119   std::vector<Point> qface_neighbor_points;
120   std::map<FEType, FEAbstract *>::iterator local_fe_end = _neighbor_side_fe\&.end();
121   for (std::map<FEType, FEAbstract *>::iterator i = _neighbor_side_fe\&.begin();
122        i != local_fe_end; ++i)
123     {
124       FEType neighbor_side_fe_type = i->first;
125       FEAbstract* side_fe = _side_fe[neighbor_side_fe_type];
126       qface_side_points = side_fe->get_xyz();
127 
128       FEInterface::inverse_map (dim,
129                                 neighbor_side_fe_type,
130                                 &get_neighbor(),
131                                 qface_side_points,
132                                 qface_neighbor_points);
133 
134       i->second->reinit(&get_neighbor(), &qface_neighbor_points);
135     }
136 
137   // Set boolean flag to indicate that the DG terms are active on this element
138   _dg_terms_active = true;
139 
140   // Also, initialize data required for DG assembly on the current side,
141   // analogously to FEMContext::pre_fe_reinit
142 
143   // Initialize the per-element data for elem\&.
144   get_system()\&.get_dof_map()\&.dof_indices (&get_neighbor(), _neighbor_dof_indices);
145 
146   const unsigned int n_dofs = dof_indices\&.size();
147   const unsigned int n_neighbor_dofs = libmesh_cast_int<unsigned int>
148     (_neighbor_dof_indices\&.size());
149 
150   // These resize calls also zero out the residual and jacobian
151   _neighbor_residual\&.resize(n_neighbor_dofs);
152   _elem_elem_jacobian\&.resize(n_dofs, n_dofs);
153   _elem_neighbor_jacobian\&.resize(n_dofs, n_neighbor_dofs);
154   _neighbor_elem_jacobian\&.resize(n_neighbor_dofs, n_dofs);
155   _neighbor_neighbor_jacobian\&.resize(n_neighbor_dofs, n_neighbor_dofs);
156 
157   // Initialize the per-variable data for elem\&.
158   {
159     unsigned int sub_dofs = 0;
160     for (unsigned int i=0; i != get_system()\&.n_vars(); ++i)
161       {
162         get_system()\&.get_dof_map()\&.dof_indices (&get_neighbor(), _neighbor_dof_indices_var[i], i);
163 
164         const unsigned int n_dofs_var = libmesh_cast_int<unsigned int>
165           (_neighbor_dof_indices_var[i]\&.size());
166 
167         _neighbor_subresiduals[i]->reposition
168           (sub_dofs, n_dofs_var);
169 
170         for (unsigned int j=0; j != i; ++j)
171           {
172             const unsigned int n_dofs_var_j =
173               libmesh_cast_int<unsigned int>
174               (dof_indices_var[j]\&.size());
175 
176             _elem_elem_subjacobians[i][j]->reposition
177               (sub_dofs, _neighbor_subresiduals[j]->i_off(),
178                n_dofs_var, n_dofs_var_j);
179             _elem_elem_subjacobians[j][i]->reposition
180               (_neighbor_subresiduals[j]->i_off(), sub_dofs,
181                n_dofs_var_j, n_dofs_var);
182 
183             _elem_neighbor_subjacobians[i][j]->reposition
184               (sub_dofs, _neighbor_subresiduals[j]->i_off(),
185                n_dofs_var, n_dofs_var_j);
186             _elem_neighbor_subjacobians[j][i]->reposition
187               (_neighbor_subresiduals[j]->i_off(), sub_dofs,
188                n_dofs_var_j, n_dofs_var);
189 
190             _neighbor_elem_subjacobians[i][j]->reposition
191               (sub_dofs, _neighbor_subresiduals[j]->i_off(),
192                n_dofs_var, n_dofs_var_j);
193             _neighbor_elem_subjacobians[j][i]->reposition
194               (_neighbor_subresiduals[j]->i_off(), sub_dofs,
195                n_dofs_var_j, n_dofs_var);
196 
197             _neighbor_neighbor_subjacobians[i][j]->reposition
198               (sub_dofs, _neighbor_subresiduals[j]->i_off(),
199                n_dofs_var, n_dofs_var_j);
200             _neighbor_neighbor_subjacobians[j][i]->reposition
201               (_neighbor_subresiduals[j]->i_off(), sub_dofs,
202                n_dofs_var_j, n_dofs_var);
203           }
204         _elem_elem_subjacobians[i][i]->reposition
205           (sub_dofs, sub_dofs,
206            n_dofs_var,
207            n_dofs_var);
208         _elem_neighbor_subjacobians[i][i]->reposition
209           (sub_dofs, sub_dofs,
210            n_dofs_var,
211            n_dofs_var);
212         _neighbor_elem_subjacobians[i][i]->reposition
213           (sub_dofs, sub_dofs,
214            n_dofs_var,
215            n_dofs_var);
216         _neighbor_neighbor_subjacobians[i][i]->reposition
217           (sub_dofs, sub_dofs,
218            n_dofs_var,
219            n_dofs_var);
220         sub_dofs += n_dofs_var;
221       }
222     libmesh_assert_equal_to (sub_dofs, n_dofs);
223   }
224 
225 }
.fi
.SS "template<typename OutputType > template void libMesh::FEMContext::point_curl< \fBGradient\fP > (unsigned intvar, const \fBPoint\fP &p, OutputType &curl_u) const\fC [inherited]\fP"
Returns the curl of the solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. 
.PP
Definition at line 893 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::build_new_fe(), libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_subsolutions, libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
895 {
896   typedef typename TensorTools::MakeReal<OutputType>::type OutputShape;
897 
898   // Get local-to-global dof index lookup
899   libmesh_assert_greater (dof_indices\&.size(), var);
900   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
901     (dof_indices_var[var]\&.size());
902 
903   // Get current local coefficients
904   libmesh_assert_greater (elem_subsolutions\&.size(), var);
905   libmesh_assert(elem_subsolutions[var]);
906   DenseSubVector<Number> &coef = *elem_subsolutions[var];
907 
908   // Get finite element object
909   FEGenericBase<OutputShape>* fe = NULL;
910   this->get_element_fe<OutputShape>( var, fe );
911 
912   // Build a FE for calculating u(p)
913   AutoPtr<FEGenericBase<OutputShape> > fe_new = this->build_new_fe( fe, p );
914 
915   // Get the values of the shape function derivatives
916   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputShape> >&  curl_phi = fe_new->get_curl_phi();
917 
918   curl_u = 0\&.0;
919 
920   for (unsigned int l=0; l != n_dofs; l++)
921     curl_u\&.add_scaled(curl_phi[l][0], coef(l));
922 
923   return;
924 }
.fi
.SS "\fBGradient\fP libMesh::FEMContext::point_gradient (unsigned intvar, const \fBPoint\fP &p) const\fC [inherited]\fP"
Returns the gradient of the solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 790 of file fem_context\&.C\&.
.PP
.nf
791 {
792   Gradient grad_u;
793 
794   this->point_gradient( var, p, grad_u );
795 
796   return grad_u;
797 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::point_gradient (unsigned intvar, const \fBPoint\fP &p, OutputType &grad_u) const\fC [inherited]\fP"
Returns the gradient of the solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. This is the preferred API\&. 
.PP
Definition at line 802 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::build_new_fe(), libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_subsolutions, libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
804 {
805   typedef typename TensorTools::MakeReal
806     <typename TensorTools::DecrementRank<OutputType>::type>::type
807     OutputShape;
808 
809   // Get local-to-global dof index lookup
810   libmesh_assert_greater (dof_indices\&.size(), var);
811   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
812     (dof_indices_var[var]\&.size());
813 
814   // Get current local coefficients
815   libmesh_assert_greater (elem_subsolutions\&.size(), var);
816   libmesh_assert(elem_subsolutions[var]);
817   DenseSubVector<Number> &coef = *elem_subsolutions[var];
818 
819   // Get finite element object
820   FEGenericBase<OutputShape>* fe = NULL;
821   this->get_element_fe<OutputShape>( var, fe );
822 
823   // Build a FE for calculating u(p)
824   AutoPtr<FEGenericBase<OutputShape> > fe_new = this->build_new_fe( fe, p );
825 
826   // Get the values of the shape function derivatives
827   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputGradient> >&  dphi = fe_new->get_dphi();
828 
829   grad_u = 0\&.0;
830 
831   for (unsigned int l=0; l != n_dofs; l++)
832     grad_u\&.add_scaled(dphi[l][0], coef(l));
833 
834   return;
835 }
.fi
.SS "\fBTensor\fP libMesh::FEMContext::point_hessian (unsigned intvar, const \fBPoint\fP &p) const\fC [inherited]\fP"
Returns the hessian of the solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 841 of file fem_context\&.C\&.
.PP
.nf
842 {
843   Tensor hess_u;
844 
845   this->point_hessian( var, p, hess_u );
846 
847   return hess_u;
848 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::point_hessian (unsigned intvar, const \fBPoint\fP &p, OutputType &hess_u) const\fC [inherited]\fP"
Returns the hessian of the solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. This is the preferred API\&. 
.PP
Definition at line 852 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::build_new_fe(), libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_subsolutions, libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
854 {
855   typedef typename TensorTools::MakeReal<
856     typename TensorTools::DecrementRank<
857     typename TensorTools::DecrementRank<
858     OutputType>::type>::type>::type
859     OutputShape;
860 
861   // Get local-to-global dof index lookup
862   libmesh_assert_greater (dof_indices\&.size(), var);
863   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
864     (dof_indices_var[var]\&.size());
865 
866   // Get current local coefficients
867   libmesh_assert_greater (elem_subsolutions\&.size(), var);
868   libmesh_assert(elem_subsolutions[var]);
869   DenseSubVector<Number> &coef = *elem_subsolutions[var];
870 
871   // Get finite element object
872   FEGenericBase<OutputShape>* fe = NULL;
873   this->get_element_fe<OutputShape>( var, fe );
874 
875   // Build a FE for calculating u(p)
876   AutoPtr<FEGenericBase<OutputShape> > fe_new = this->build_new_fe( fe, p );
877 
878   // Get the values of the shape function derivatives
879   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputTensor> >&  d2phi = fe_new->get_d2phi();
880 
881   hess_u = 0\&.0;
882 
883   for (unsigned int l=0; l != n_dofs; l++)
884     hess_u\&.add_scaled(d2phi[l][0], coef(l));
885 
886   return;
887 }
.fi
.SS "\fBNumber\fP libMesh::FEMContext::point_value (unsigned intvar, const \fBPoint\fP &p) const\fC [inherited]\fP"
Returns the value of the solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 745 of file fem_context\&.C\&.
.PP
.nf
746 {
747   Number u = 0\&.;
748 
749   this->point_value( var, p, u );
750 
751   return u;
752 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::point_value (unsigned intvar, const \fBPoint\fP &p, OutputType &u) const\fC [inherited]\fP"
Returns the value of the solution variable \fCvar\fP at the physical point \fCp\fP on the current element\&. This is the preferred API\&. 
.PP
Definition at line 755 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::build_new_fe(), libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_subsolutions, libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
757 {
758   typedef typename TensorTools::MakeReal<OutputType>::type OutputShape;
759 
760   // Get local-to-global dof index lookup
761   libmesh_assert_greater (dof_indices\&.size(), var);
762   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
763     (dof_indices_var[var]\&.size());
764 
765   // Get current local coefficients
766   libmesh_assert_greater (elem_subsolutions\&.size(), var);
767   libmesh_assert(elem_subsolutions[var]);
768   DenseSubVector<Number> &coef = *elem_subsolutions[var];
769 
770   // Get finite element object
771   FEGenericBase<OutputShape>* fe = NULL;
772   this->get_element_fe<OutputShape>( var, fe );
773 
774   // Build a FE for calculating u(p)
775   AutoPtr<FEGenericBase<OutputShape> > fe_new = this->build_new_fe( fe, p );
776 
777   // Get the values of the shape function derivatives
778   const std::vector<std::vector<OutputShape> >&  phi = fe_new->get_phi();
779 
780   u = 0\&.;
781 
782   for (unsigned int l=0; l != n_dofs; l++)
783     u += phi[l][0] * coef(l);
784 
785   return;
786 }
.fi
.SS "void libMesh::FEMContext::pre_fe_reinit (const \fBSystem\fP &sys, const \fBElem\fP *e)\fC [virtual]\fP, \fC [inherited]\fP"
Reinitializes local data vectors/matrices on the current geometric element 
.PP
Definition at line 1584 of file fem_context\&.C\&.
.PP
References libMesh::System::current_local_solution, libMesh::DiffContext::dof_indices, libMesh::DofMap::dof_indices(), libMesh::DiffContext::dof_indices_var, libMesh::FEMContext::elem, libMesh::DiffContext::elem_fixed_solution, libMesh::DiffContext::elem_fixed_subsolutions, libMesh::DiffContext::elem_jacobian, libMesh::DiffContext::elem_qoi_derivative, libMesh::DiffContext::elem_qoi_subderivatives, libMesh::DiffContext::elem_residual, libMesh::DiffContext::elem_solution, libMesh::DiffContext::elem_subjacobians, libMesh::DiffContext::elem_subresiduals, libMesh::DiffContext::elem_subsolutions, libMesh::NumericVector< T >::get(), libMesh::System::get_dof_map(), libMesh::DenseVector< T >::get_values(), libMesh::DiffContext::localized_vectors, libMesh::System::n_vars(), libMesh::System::qoi, libMesh::DenseVector< T >::resize(), libMesh::DenseMatrix< T >::resize(), libMesh::resize(), and libMesh::System::use_fixed_solution\&.
.PP
Referenced by libMesh::FEMSystem::mesh_position_get(), libMesh::FEMSystem::mesh_position_set(), libMesh::WeightedPatchRecoveryErrorEstimator::EstimateError::operator()(), and libMesh::System::project_vector()\&.
.PP
.nf
1585 {
1586   elem = e;
1587 
1588   // Initialize the per-element data for elem\&.
1589   sys\&.get_dof_map()\&.dof_indices (elem, dof_indices);
1590   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
1591     (dof_indices\&.size());
1592   const std::size_t n_qoi = sys\&.qoi\&.size();
1593 
1594   if (sys\&.use_fixed_solution)
1595     elem_fixed_solution\&.resize(n_dofs);
1596 
1597   sys\&.current_local_solution->get(dof_indices, elem_solution\&.get_values());
1598 
1599   // These resize calls also zero out the residual and jacobian
1600   elem_residual\&.resize(n_dofs);
1601   elem_jacobian\&.resize(n_dofs, n_dofs);
1602 
1603   elem_qoi_derivative\&.resize(n_qoi);
1604   elem_qoi_subderivatives\&.resize(n_qoi);
1605   for (std::size_t q=0; q != n_qoi; ++q)
1606     elem_qoi_derivative[q]\&.resize(n_dofs);
1607 
1608   // Initialize the per-variable data for elem\&.
1609   {
1610     unsigned int sub_dofs = 0;
1611     for (unsigned int i=0; i != sys\&.n_vars(); ++i)
1612       {
1613         sys\&.get_dof_map()\&.dof_indices (elem, dof_indices_var[i], i);
1614 
1615         const unsigned int n_dofs_var = libmesh_cast_int<unsigned int>
1616           (dof_indices_var[i]\&.size());
1617 
1618         elem_subsolutions[i]->reposition
1619           (sub_dofs, n_dofs_var);
1620 
1621         if (sys\&.use_fixed_solution)
1622           elem_fixed_subsolutions[i]->reposition
1623             (sub_dofs, n_dofs_var);
1624 
1625         elem_subresiduals[i]->reposition
1626           (sub_dofs, n_dofs_var);
1627 
1628         for (std::size_t q=0; q != n_qoi; ++q)
1629           elem_qoi_subderivatives[q][i]->reposition
1630             (sub_dofs, n_dofs_var);
1631 
1632         for (unsigned int j=0; j != i; ++j)
1633           {
1634             const unsigned int n_dofs_var_j =
1635               libmesh_cast_int<unsigned int>
1636               (dof_indices_var[j]\&.size());
1637 
1638             elem_subjacobians[i][j]->reposition
1639               (sub_dofs, elem_subresiduals[j]->i_off(),
1640                n_dofs_var, n_dofs_var_j);
1641             elem_subjacobians[j][i]->reposition
1642               (elem_subresiduals[j]->i_off(), sub_dofs,
1643                n_dofs_var_j, n_dofs_var);
1644           }
1645         elem_subjacobians[i][i]->reposition
1646           (sub_dofs, sub_dofs,
1647            n_dofs_var,
1648            n_dofs_var);
1649         sub_dofs += n_dofs_var;
1650       }
1651     libmesh_assert_equal_to (sub_dofs, n_dofs);
1652   }
1653 
1654   // Now do the localization for the user requested vectors
1655   DiffContext::localized_vectors_iterator localized_vec_it = localized_vectors\&.begin();
1656   const DiffContext::localized_vectors_iterator localized_vec_end = localized_vectors\&.end();
1657 
1658   for(; localized_vec_it != localized_vec_end; ++localized_vec_it)
1659     {
1660       const NumericVector<Number>& current_localized_vector = *localized_vec_it->first;
1661       DenseVector<Number>& target_vector = localized_vec_it->second\&.first;
1662 
1663       current_localized_vector\&.get(dof_indices, target_vector\&.get_values());
1664 
1665       // Initialize the per-variable data for elem\&.
1666       unsigned int sub_dofs = 0;
1667       for (unsigned int i=0; i != sys\&.n_vars(); ++i)
1668         {
1669           const unsigned int n_dofs_var = libmesh_cast_int<unsigned int>
1670             (dof_indices_var[i]\&.size());
1671           sys\&.get_dof_map()\&.dof_indices (elem, dof_indices_var[i], i);
1672 
1673           localized_vec_it->second\&.second[i]->reposition
1674             (sub_dofs, n_dofs_var);
1675 
1676           sub_dofs += n_dofs_var;
1677         }
1678       libmesh_assert_equal_to (sub_dofs, n_dofs);
1679     }
1680 }
.fi
.SS "void libMesh::DiffContext::set_deltat_pointer (\fBReal\fP *dt)\fC [inherited]\fP"
Points the _deltat member of this class at a timestep value stored in the creating \fBSystem\fP, for example DiffSystem::deltat 
.PP
Definition at line 109 of file diff_context\&.C\&.
.PP
References libMesh::DiffContext::_deltat\&.
.PP
Referenced by libMesh::FEMSystem::build_context(), and libMesh::FEMSystem::init_context()\&.
.PP
.nf
110 {
111   // We may actually want to be able to set this pointer to NULL, so
112   // don't report an error for that\&.
113   _deltat = dt;
114 }
.fi
.SS "virtual void libMesh::FEMContext::set_mesh_system (\fBSystem\fP *sys)\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"
Tells the \fBFEMContext\fP that system \fCsys\fP contains the isoparametric Lagrangian variables which correspond to the coordinates of mesh nodes, in problems where the mesh itself is expected to move in time\&.
.PP
This should be set automatically if the \fBFEMPhysics\fP requires it\&. 
.PP
Definition at line 552 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_mesh_sys, and libMesh::sys\&.
.PP
Referenced by libMesh::FEMSystem::build_context()\&.
.PP
.nf
553   { this->_mesh_sys = sys; }
.fi
.SS "void libMesh::FEMContext::set_mesh_x_var (unsigned intx_var)\fC [inline]\fP, \fC [inherited]\fP"
Accessor for x-variable of moving mesh \fBSystem\fP
.PP
This should be set automatically if the \fBFEMPhysics\fP requires it\&. 
.PP
Definition at line 578 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_mesh_x_var\&.
.PP
Referenced by libMesh::FEMSystem::build_context()\&.
.PP
.nf
579   { _mesh_x_var = x_var; }
.fi
.SS "void libMesh::FEMContext::set_mesh_y_var (unsigned inty_var)\fC [inline]\fP, \fC [inherited]\fP"
Accessor for y-variable of moving mesh \fBSystem\fP
.PP
This should be set automatically if the \fBFEMPhysics\fP requires it\&. 
.PP
Definition at line 592 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_mesh_y_var\&.
.PP
Referenced by libMesh::FEMSystem::build_context()\&.
.PP
.nf
593   { _mesh_y_var = y_var; }
.fi
.SS "void libMesh::FEMContext::set_mesh_z_var (unsigned intz_var)\fC [inline]\fP, \fC [inherited]\fP"
Accessor for z-variable of moving mesh \fBSystem\fP
.PP
This should be set automatically if the \fBFEMPhysics\fP requires it\&. 
.PP
Definition at line 606 of file fem_context\&.h\&.
.PP
References libMesh::FEMContext::_mesh_z_var\&.
.PP
Referenced by libMesh::FEMSystem::build_context()\&.
.PP
.nf
607   { _mesh_z_var = z_var; }
.fi
.SS "void libMesh::DGFEMContext::set_neighbor (const \fBElem\fP &neighbor)\fC [inline]\fP"
Set the neighbor element which we will use to assemble DG terms\&. Note that we do not assume that this element is \fBget_elem()\fP\&.neighbor(side) because we also need to be able to handle the special case of DG terms on 'cracks' in a mesh to model certain types of interface conditions\&. In this case, we need to be able to specify the neighbor element manually\&. Also, this should give us more flexibility to handle non-conforming meshes\&. 
.PP
Definition at line 219 of file dg_fem_context\&.h\&.
.PP
References _neighbor\&.
.PP
.nf
220   { _neighbor = &neighbor; }
.fi
.SS "void libMesh::DiffContext::set_time (\fBReal\fPtime_in)\fC [inline]\fP, \fC [inherited]\fP"
Set the time for which the current nonlinear_solution is defined\&. 
.PP
Definition at line 266 of file diff_context\&.h\&.
.PP
References libMesh::DiffContext::time\&.
.PP
.nf
267   { time = time_in; }
.fi
.SS "std::vector< \fBboundary_id_type\fP > libMesh::FEMContext::side_boundary_ids () const\fC [inherited]\fP"
Lists the boundary ids found on the current side 
.PP
Definition at line 149 of file fem_context\&.C\&.
.PP
References libMesh::FEMContext::_boundary_info, libMesh::BoundaryInfo::boundary_ids(), libMesh::FEMContext::elem, and libMesh::FEMContext::side\&.
.PP
.nf
150 {
151   return _boundary_info->boundary_ids(elem, side);
152 }
.fi
.SS "void libMesh::DGFEMContext::side_fe_reinit ()\fC [virtual]\fP"
Override side_fe_reinit to set a boolean flag so that by default DG terms are assumed to be inactive\&. DG terms are only active if neighbor_side_fe_reinit is called\&. 
.PP
Reimplemented from \fBlibMesh::FEMContext\fP\&.
.PP
Definition at line 103 of file dg_fem_context\&.C\&.
.PP
References _dg_terms_active, and libMesh::FEMContext::side_fe_reinit()\&.
.PP
.nf
104 {
105   FEMContext::side_fe_reinit();
106 
107   // By default we assume that the DG terms are inactive
108   // They are only active if neighbor_side_fe_reinit is called
109   _dg_terms_active = false;
110 }
.fi
.SS "\fBGradient\fP libMesh::FEMContext::side_gradient (unsigned intvar, unsigned intqp) const\fC [inherited]\fP"
Returns the gradient of the solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element side\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 564 of file fem_context\&.C\&.
.PP
.nf
565 {
566   Gradient du;
567 
568   this->side_gradient( var, qp, du );
569 
570   return du;
571 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::side_gradient (unsigned intvar, unsigned intqp, OutputType &du) const\fC [inherited]\fP"
Returns the gradient of the solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element side\&. This is the preferred API\&. 
.PP
Definition at line 575 of file fem_context\&.C\&.
.PP
References libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_subsolutions, libMesh::FEGenericBase< T >::get_dphi(), libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
577 {
578   typedef typename TensorTools::MakeReal
579     <typename TensorTools::DecrementRank<OutputType>::type>::type
580     OutputShape;
581 
582   // Get local-to-global dof index lookup
583   libmesh_assert_greater (dof_indices\&.size(), var);
584   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
585     (dof_indices_var[var]\&.size());
586 
587   // Get current local coefficients
588   libmesh_assert_greater (elem_subsolutions\&.size(), var);
589   libmesh_assert(elem_subsolutions[var]);
590   DenseSubVector<Number> &coef = *elem_subsolutions[var];
591 
592   // Get finite element object
593   FEGenericBase<OutputShape>* the_side_fe = NULL;
594   this->get_side_fe<OutputShape>( var, the_side_fe );
595 
596   // Get shape function values at quadrature point
597   const std::vector<std::vector< typename FEGenericBase<OutputShape>::OutputGradient> > &dphi = the_side_fe->get_dphi();
598 
599   // Accumulate solution derivatives
600   du = 0\&.;
601 
602   for (unsigned int l=0; l != n_dofs; l++)
603     du\&.add_scaled(dphi[l][qp], coef(l));
604 
605   return;
606 }
.fi
.SS "template<typename OutputType > template void libMesh::FEMContext::side_gradients< \fBTensor\fP > (unsigned intvar, const \fBNumericVector\fP< \fBNumber\fP > &_system_vector, std::vector< OutputType > &side_gradients_vector) const\fC [inherited]\fP"
Fills a vector with the gradient of the solution variable \fCvar\fP at all the quadrature points on the current element side\&. This is the preferred API\&. 
.PP
Definition at line 612 of file fem_context\&.C\&.
.PP
References libMesh::FEGenericBase< T >::get_dphi(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
615 {
616   typedef typename TensorTools::MakeReal
617     <typename TensorTools::DecrementRank<OutputType>::type>::type
618     OutputShape;
619 
620   // Get local-to-global dof index lookup
621   libmesh_assert_greater (dof_indices\&.size(), var);
622   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
623     (dof_indices_var[var]\&.size());
624 
625   // Get current local coefficients
626   const DenseSubVector<Number> &coef = get_localized_subvector(_system_vector, var);
627 
628   // Get finite element object
629   FEGenericBase<OutputShape>* the_side_fe = NULL;
630   this->get_side_fe<OutputShape>( var, the_side_fe );
631 
632   // Get shape function values at quadrature point
633   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputGradient> > &dphi = the_side_fe->get_dphi();
634 
635   // Loop over all the q_points in this finite element
636   for (unsigned int qp=0; qp != du_vals\&.size(); qp++)
637     {
638       OutputType &du = du_vals[qp];
639 
640       du = 0;
641 
642       // Compute the gradient at this q_point
643       for (unsigned int l=0; l != n_dofs; l++)
644         du\&.add_scaled(dphi[l][qp], coef(l));
645     }
646 
647   return;
648 }
.fi
.SS "\fBTensor\fP libMesh::FEMContext::side_hessian (unsigned intvar, unsigned intqp) const\fC [inherited]\fP"
Returns the hessian of the solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element side\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 651 of file fem_context\&.C\&.
.PP
.nf
652 {
653   Tensor d2u;
654 
655   this->side_hessian( var, qp, d2u );
656 
657   return d2u;
658 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::side_hessian (unsigned intvar, unsigned intqp, OutputType &d2u) const\fC [inherited]\fP"
Returns the hessian of the solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element side\&. This is the preferred API\&. 
.PP
Definition at line 661 of file fem_context\&.C\&.
.PP
References libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_subsolutions, libMesh::FEGenericBase< T >::get_d2phi(), libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
663 {
664   typedef typename TensorTools::MakeReal<
665     typename TensorTools::DecrementRank<
666     typename TensorTools::DecrementRank<
667     OutputType>::type>::type>::type
668     OutputShape;
669 
670   // Get local-to-global dof index lookup
671   libmesh_assert_greater (dof_indices\&.size(), var);
672   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
673     (dof_indices_var[var]\&.size());
674 
675   // Get current local coefficients
676   libmesh_assert_greater (elem_subsolutions\&.size(), var);
677   libmesh_assert(elem_subsolutions[var]);
678   DenseSubVector<Number> &coef = *elem_subsolutions[var];
679 
680   // Get finite element object
681   FEGenericBase<OutputShape>* the_side_fe = NULL;
682   this->get_side_fe<OutputShape>( var, the_side_fe );
683 
684   // Get shape function values at quadrature point
685   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputTensor> > &d2phi = the_side_fe->get_d2phi();
686 
687   // Accumulate solution second derivatives
688   d2u = 0\&.0;
689 
690   for (unsigned int l=0; l != n_dofs; l++)
691     d2u\&.add_scaled(d2phi[l][qp], coef(l));
692 
693   return;
694 }
.fi
.SS "template<typename OutputType > template void libMesh::FEMContext::side_hessians< \fBTensor\fP > (unsigned intvar, const \fBNumericVector\fP< \fBNumber\fP > &_system_vector, std::vector< OutputType > &d2u_vals) const\fC [inherited]\fP"
Fills a vector of hessians of the _system_vector at the all the quadrature points on the current element side\&. This is the preferred API\&. 
.PP
Definition at line 699 of file fem_context\&.C\&.
.PP
References libMesh::FEGenericBase< T >::get_d2phi(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
702 {
703   typedef typename TensorTools::MakeReal<
704     typename TensorTools::DecrementRank<
705     typename TensorTools::DecrementRank<
706     OutputType>::type>::type>::type
707     OutputShape;
708 
709   // Get local-to-global dof index lookup
710   libmesh_assert_greater (dof_indices\&.size(), var);
711   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
712     (dof_indices_var[var]\&.size());
713 
714   // Get current local coefficients
715   const DenseSubVector<Number> &coef = get_localized_subvector(_system_vector, var);
716 
717   // Get finite element object
718   FEGenericBase<OutputShape>* the_side_fe = NULL;
719   this->get_side_fe<OutputShape>( var, the_side_fe );
720 
721   // Get shape function values at quadrature point
722   const std::vector<std::vector<typename FEGenericBase<OutputShape>::OutputTensor> > &d2phi = the_side_fe->get_d2phi();
723 
724   // Loop over all the q_points in this finite element
725   for (unsigned int qp=0; qp != d2u_vals\&.size(); qp++)
726     {
727       OutputType &d2u = d2u_vals[qp];
728 
729       // Compute the gradient at this q_point
730       d2u = 0;
731 
732       for (unsigned int l=0; l != n_dofs; l++)
733         d2u\&.add_scaled(d2phi[l][qp], coef(l));
734     }
735 
736   return;
737 }
.fi
.SS "\fBNumber\fP libMesh::FEMContext::side_value (unsigned intvar, unsigned intqp) const\fC [inherited]\fP"
Returns the value of the solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element side\&. This API currently present for backward compatibility\&. 
.PP
Definition at line 483 of file fem_context\&.C\&.
.PP
.nf
484 {
485   Number u = 0\&.;
486 
487   this->side_value( var, qp, u );
488 
489   return u;
490 }
.fi
.SS "template<typename OutputType > void libMesh::FEMContext::side_value (unsigned intvar, unsigned intqp, OutputType &u) const\fC [inherited]\fP"
Returns the value of the solution variable \fCvar\fP at the quadrature point \fCqp\fP on the current element side\&. This is the preferred API\&. 
.PP
Definition at line 494 of file fem_context\&.C\&.
.PP
References libMesh::DiffContext::dof_indices, libMesh::DiffContext::dof_indices_var, libMesh::DiffContext::elem_subsolutions, libMesh::FEGenericBase< T >::get_phi(), libMesh::libmesh_assert(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
496 {
497   typedef typename TensorTools::MakeReal<OutputType>::type OutputShape;
498 
499   // Get local-to-global dof index lookup
500   libmesh_assert_greater (dof_indices\&.size(), var);
501   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
502     (dof_indices_var[var]\&.size());
503 
504   // Get current local coefficients
505   libmesh_assert_greater (elem_subsolutions\&.size(), var);
506   libmesh_assert(elem_subsolutions[var]);
507   DenseSubVector<Number> &coef = *elem_subsolutions[var];
508 
509   // Get finite element object
510   FEGenericBase<OutputShape>* the_side_fe = NULL;
511   this->get_side_fe<OutputShape>( var, the_side_fe );
512 
513   // Get shape function values at quadrature point
514   const std::vector<std::vector<OutputShape> > &phi = the_side_fe->get_phi();
515 
516   // Accumulate solution value
517   u = 0\&.;
518 
519   for (unsigned int l=0; l != n_dofs; l++)
520     u += phi[l][qp] * coef(l);
521 
522   return;
523 }
.fi
.SS "template<typename OutputType > template void libMesh::FEMContext::side_values< \fBGradient\fP > (unsigned intvar, const \fBNumericVector\fP< \fBNumber\fP > &_system_vector, std::vector< OutputType > &side_values_vector) const\fC [inherited]\fP"
Fills a vector of values of the _system_vector at the all the quadrature points on the current element side\&. 
.PP
Definition at line 528 of file fem_context\&.C\&.
.PP
References libMesh::FEGenericBase< T >::get_phi(), and libMesh::libmesh_assert_greater()\&.
.PP
.nf
531 {
532   typedef typename TensorTools::MakeReal<OutputType>::type OutputShape;
533 
534   // Get local-to-global dof index lookup
535   libmesh_assert_greater (dof_indices\&.size(), var);
536   const unsigned int n_dofs = libmesh_cast_int<unsigned int>
537     (dof_indices_var[var]\&.size());
538 
539   // Get current local coefficients
540   const DenseSubVector<Number> &coef = get_localized_subvector(_system_vector, var);
541 
542   // Get the finite element object
543   FEGenericBase<OutputShape>* the_side_fe = NULL;
544   this->get_side_fe<OutputShape>( var, the_side_fe );
545 
546   // Get shape function values at quadrature point
547   const std::vector<std::vector<OutputShape> > &phi = the_side_fe->get_phi();
548 
549   // Loop over all the q_points on this element
550   for (unsigned int qp=0; qp != u_vals\&.size(); qp++)
551     {
552       OutputType &u = u_vals[qp];
553 
554       // Compute the value at this q_point
555       u = 0\&.;
556 
557       for (unsigned int l=0; l != n_dofs; l++)
558         u += phi[l][qp] * coef(l);
559     }
560 
561   return;
562 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBBoundaryInfo\fP* libMesh::FEMContext::_boundary_info\fC [protected]\fP, \fC [inherited]\fP"
Saved pointer to \fBBoundaryInfo\fP on the mesh for this \fBSystem\fP\&. Used to answer boundary id requests\&. 
.PP
Definition at line 700 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::has_side_boundary_id(), and libMesh::FEMContext::side_boundary_ids()\&.
.SS "bool libMesh::DGFEMContext::_dg_terms_active\fC [private]\fP"
Boolean flag to indicate whether or not the DG terms have been assembled and should be used in the global matrix assembly\&. 
.PP
Definition at line 295 of file dg_fem_context\&.h\&.
.PP
Referenced by dg_terms_are_active(), neighbor_side_fe_reinit(), and side_fe_reinit()\&.
.SS "std::map<\fBFEType\fP, \fBFEAbstract\fP*> libMesh::FEMContext::_edge_fe\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 685 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::edge_fe_reinit(), libMesh::FEMContext::FEMContext(), and libMesh::FEMContext::~FEMContext()\&.
.SS "std::vector<\fBFEAbstract\fP*> libMesh::FEMContext::_edge_fe_var\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 694 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::FEMContext(), and libMesh::FEMContext::get_edge_fe()\&.
.SS "\fBDenseMatrix\fP<\fBNumber\fP> libMesh::DGFEMContext::_elem_elem_jacobian\fC [private]\fP"
The DG Jacobian terms\&. Trial and test functions come from either element or neighbor\&. 
.PP
Definition at line 256 of file dg_fem_context\&.h\&.
.PP
Referenced by DGFEMContext(), get_elem_elem_jacobian(), and neighbor_side_fe_reinit()\&.
.SS "std::vector<std::vector<\fBDenseSubMatrix\fP<\fBNumber\fP> *> > libMesh::DGFEMContext::_elem_elem_subjacobians\fC [private]\fP"

.PP
Definition at line 265 of file dg_fem_context\&.h\&.
.PP
Referenced by DGFEMContext(), get_elem_elem_jacobian(), neighbor_side_fe_reinit(), and ~DGFEMContext()\&.
.SS "\fBDenseMatrix\fP<\fBNumber\fP> libMesh::DGFEMContext::_elem_neighbor_jacobian\fC [private]\fP"

.PP
Definition at line 257 of file dg_fem_context\&.h\&.
.PP
Referenced by DGFEMContext(), get_elem_neighbor_jacobian(), and neighbor_side_fe_reinit()\&.
.SS "std::vector<std::vector<\fBDenseSubMatrix\fP<\fBNumber\fP> *> > libMesh::DGFEMContext::_elem_neighbor_subjacobians\fC [private]\fP"

.PP
Definition at line 266 of file dg_fem_context\&.h\&.
.PP
Referenced by DGFEMContext(), get_elem_neighbor_jacobian(), neighbor_side_fe_reinit(), and ~DGFEMContext()\&.
.SS "std::map<\fBFEType\fP, \fBFEAbstract\fP*> libMesh::FEMContext::_element_fe\fC [protected]\fP, \fC [inherited]\fP"
Finite element objects for each variable's interior, sides and edges\&. 
.PP
Definition at line 683 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::elem_fe_reinit(), libMesh::FEMContext::FEMContext(), and libMesh::FEMContext::~FEMContext()\&.
.SS "std::vector<\fBFEAbstract\fP*> libMesh::FEMContext::_element_fe_var\fC [protected]\fP, \fC [inherited]\fP"
Pointers to the same finite element objects, but indexed by variable number 
.PP
Definition at line 692 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::_do_elem_position_set(), libMesh::FEMContext::elem_position_get(), libMesh::FEMContext::FEMContext(), and libMesh::FEMContext::get_element_fe()\&.
.SS "\fBSystem\fP* libMesh::FEMContext::_mesh_sys\fC [inherited]\fP"
\fBSystem\fP from which to acquire moving mesh information 
.PP
Definition at line 655 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::_do_elem_position_set(), libMesh::FEMContext::elem_edge_reinit(), libMesh::FEMContext::elem_position_get(), libMesh::FEMContext::elem_position_set(), libMesh::FEMContext::elem_reinit(), libMesh::FEMContext::elem_side_reinit(), libMesh::FEMContext::get_mesh_system(), and libMesh::FEMContext::set_mesh_system()\&.
.SS "unsigned int libMesh::FEMContext::_mesh_x_var\fC [inherited]\fP"
Variables from which to acquire moving mesh information 
.PP
Definition at line 660 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::_do_elem_position_set(), libMesh::FEMContext::elem_position_get(), libMesh::FEMContext::get_mesh_x_var(), and libMesh::FEMContext::set_mesh_x_var()\&.
.SS "unsigned int libMesh::FEMContext::_mesh_y_var\fC [inherited]\fP"

.PP
Definition at line 660 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::_do_elem_position_set(), libMesh::FEMContext::elem_position_get(), libMesh::FEMContext::get_mesh_y_var(), and libMesh::FEMContext::set_mesh_y_var()\&.
.SS "unsigned int libMesh::FEMContext::_mesh_z_var\fC [inherited]\fP"

.PP
Definition at line 660 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::_do_elem_position_set(), libMesh::FEMContext::elem_position_get(), libMesh::FEMContext::get_mesh_z_var(), and libMesh::FEMContext::set_mesh_z_var()\&.
.SS "const \fBElem\fP* libMesh::DGFEMContext::_neighbor\fC [private]\fP"
Current neighbor element for assembling DG terms\&. 
.PP
Definition at line 245 of file dg_fem_context\&.h\&.
.PP
Referenced by get_neighbor(), and set_neighbor()\&.
.SS "std::vector<\fBdof_id_type\fP> libMesh::DGFEMContext::_neighbor_dof_indices\fC [private]\fP"
Global Degree of freedom index lists for the neighbor element 
.PP
Definition at line 273 of file dg_fem_context\&.h\&.
.PP
Referenced by get_neighbor_dof_indices(), and neighbor_side_fe_reinit()\&.
.SS "std::vector<std::vector<\fBdof_id_type\fP> > libMesh::DGFEMContext::_neighbor_dof_indices_var\fC [private]\fP"

.PP
Definition at line 274 of file dg_fem_context\&.h\&.
.PP
Referenced by get_neighbor_dof_indices(), and neighbor_side_fe_reinit()\&.
.SS "\fBDenseMatrix\fP<\fBNumber\fP> libMesh::DGFEMContext::_neighbor_elem_jacobian\fC [private]\fP"

.PP
Definition at line 258 of file dg_fem_context\&.h\&.
.PP
Referenced by DGFEMContext(), get_neighbor_elem_jacobian(), and neighbor_side_fe_reinit()\&.
.SS "std::vector<std::vector<\fBDenseSubMatrix\fP<\fBNumber\fP> *> > libMesh::DGFEMContext::_neighbor_elem_subjacobians\fC [private]\fP"

.PP
Definition at line 267 of file dg_fem_context\&.h\&.
.PP
Referenced by DGFEMContext(), get_neighbor_elem_jacobian(), neighbor_side_fe_reinit(), and ~DGFEMContext()\&.
.SS "\fBDenseMatrix\fP<\fBNumber\fP> libMesh::DGFEMContext::_neighbor_neighbor_jacobian\fC [private]\fP"

.PP
Definition at line 259 of file dg_fem_context\&.h\&.
.PP
Referenced by DGFEMContext(), get_neighbor_neighbor_jacobian(), and neighbor_side_fe_reinit()\&.
.SS "std::vector<std::vector<\fBDenseSubMatrix\fP<\fBNumber\fP> *> > libMesh::DGFEMContext::_neighbor_neighbor_subjacobians\fC [private]\fP"

.PP
Definition at line 268 of file dg_fem_context\&.h\&.
.PP
Referenced by DGFEMContext(), get_neighbor_neighbor_jacobian(), neighbor_side_fe_reinit(), and ~DGFEMContext()\&.
.SS "\fBDenseVector\fP<\fBNumber\fP> libMesh::DGFEMContext::_neighbor_residual\fC [private]\fP"
Residual vector of the neighbor component\&. 
.PP
Definition at line 250 of file dg_fem_context\&.h\&.
.PP
Referenced by DGFEMContext(), get_neighbor_residual(), and neighbor_side_fe_reinit()\&.
.SS "std::map<\fBFEType\fP, \fBFEAbstract\fP *> libMesh::DGFEMContext::_neighbor_side_fe\fC [private]\fP"
Finite element objects for each variable's sides on the neighbor element\&. We do not need \fBFE\fP objects for neighbor element interior since we just need to handle DG interface terms here\&. 
.PP
Definition at line 283 of file dg_fem_context\&.h\&.
.PP
Referenced by DGFEMContext(), neighbor_side_fe_reinit(), and ~DGFEMContext()\&.
.SS "std::vector<\fBFEAbstract\fP *> libMesh::DGFEMContext::_neighbor_side_fe_var\fC [private]\fP"
Pointers to the same finite element objects on the neighbor element, but indexed by variable number 
.PP
Definition at line 289 of file dg_fem_context\&.h\&.
.PP
Referenced by DGFEMContext(), and get_neighbor_side_fe()\&.
.SS "std::vector<\fBDenseSubVector\fP<\fBNumber\fP> *> libMesh::DGFEMContext::_neighbor_subresiduals\fC [private]\fP"
Element residual subvectors and Jacobian submatrices 
.PP
Definition at line 264 of file dg_fem_context\&.h\&.
.PP
Referenced by DGFEMContext(), get_neighbor_residual(), neighbor_side_fe_reinit(), and ~DGFEMContext()\&.
.SS "std::map<\fBFEType\fP, \fBFEAbstract\fP*> libMesh::FEMContext::_side_fe\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 684 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::FEMContext(), neighbor_side_fe_reinit(), libMesh::FEMContext::side_fe_reinit(), and libMesh::FEMContext::~FEMContext()\&.
.SS "std::vector<\fBFEAbstract\fP*> libMesh::FEMContext::_side_fe_var\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 693 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::FEMContext(), and libMesh::FEMContext::get_side_fe()\&.
.SS "unsigned char libMesh::FEMContext::dim\fC [protected]\fP, \fC [inherited]\fP"
Cached dimension of elements in this mesh 
.PP
Definition at line 710 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::build_new_fe(), DGFEMContext(), libMesh::FEMContext::edge_fe_reinit(), libMesh::FEMContext::FEMContext(), libMesh::FEMContext::get_dim(), and neighbor_side_fe_reinit()\&.
.SS "std::vector<\fBdof_id_type\fP> libMesh::DiffContext::dof_indices\fC [protected]\fP, \fC [inherited]\fP"
Global Degree of freedom index lists 
.PP
Definition at line 419 of file diff_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::fixed_interior_hessian(), libMesh::FEMContext::fixed_interior_value(), libMesh::FEMContext::fixed_point_gradient(), libMesh::FEMContext::fixed_point_hessian(), libMesh::FEMContext::fixed_point_value(), libMesh::FEMContext::fixed_side_gradient(), libMesh::FEMContext::fixed_side_hessian(), libMesh::FEMContext::fixed_side_value(), libMesh::DiffContext::get_dof_indices(), libMesh::FEMContext::interior_curl(), libMesh::FEMContext::interior_div(), libMesh::FEMContext::interior_gradient(), libMesh::FEMContext::interior_hessian(), libMesh::FEMContext::interior_value(), libMesh::FEMContext::interior_values(), neighbor_side_fe_reinit(), libMesh::FEMContext::point_curl(), libMesh::FEMContext::point_gradient(), libMesh::FEMContext::point_hessian(), libMesh::FEMContext::point_value(), libMesh::FEMContext::pre_fe_reinit(), libMesh::FEMContext::side_gradient(), libMesh::FEMContext::side_hessian(), and libMesh::FEMContext::side_value()\&.
.SS "std::vector<std::vector<\fBdof_id_type\fP> > libMesh::DiffContext::dof_indices_var\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 420 of file diff_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::fixed_interior_hessian(), libMesh::FEMContext::fixed_interior_value(), libMesh::FEMContext::fixed_point_gradient(), libMesh::FEMContext::fixed_point_hessian(), libMesh::FEMContext::fixed_point_value(), libMesh::FEMContext::fixed_side_gradient(), libMesh::FEMContext::fixed_side_hessian(), libMesh::FEMContext::fixed_side_value(), libMesh::DiffContext::get_dof_indices(), libMesh::FEMContext::interior_curl(), libMesh::FEMContext::interior_div(), libMesh::FEMContext::interior_gradient(), libMesh::FEMContext::interior_hessian(), libMesh::FEMContext::interior_value(), libMesh::FEMContext::interior_values(), libMesh::DiffContext::n_vars(), neighbor_side_fe_reinit(), libMesh::FEMContext::point_curl(), libMesh::FEMContext::point_gradient(), libMesh::FEMContext::point_hessian(), libMesh::FEMContext::point_value(), libMesh::FEMContext::pre_fe_reinit(), libMesh::FEMContext::side_gradient(), libMesh::FEMContext::side_hessian(), and libMesh::FEMContext::side_value()\&.
.SS "unsigned char libMesh::FEMContext::edge\fC [inherited]\fP"
Current edge for edge_* to examine 
.PP
Definition at line 670 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::edge_fe_reinit(), and libMesh::FEMContext::get_edge()\&.
.SS "\fBQBase\fP* libMesh::FEMContext::edge_qrule\fC [protected]\fP, \fC [inherited]\fP"
Quadrature rules for element edges\&. If the FEM context is told to prepare for edge integration on 3D elements, it will try to find a quadrature rule that correctly integrates all variables 
.PP
Definition at line 731 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::FEMContext(), libMesh::FEMContext::get_edge_qrule(), and libMesh::FEMContext::~FEMContext()\&.
.SS "const \fBElem\fP* libMesh::FEMContext::elem\fC [protected]\fP, \fC [inherited]\fP"
Current element for element_* to examine 
.PP
Definition at line 705 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::_do_elem_position_set(), libMesh::FEMContext::build_new_fe(), libMesh::FEMContext::edge_fe_reinit(), libMesh::FEMContext::elem_fe_reinit(), libMesh::FEMContext::elem_position_get(), libMesh::FEMContext::get_elem(), libMesh::FEMContext::has_side_boundary_id(), libMesh::FEMContext::pre_fe_reinit(), libMesh::FEMContext::side_boundary_ids(), and libMesh::FEMContext::side_fe_reinit()\&.
.SS "\fBDenseVector\fP<\fBNumber\fP> libMesh::DiffContext::elem_fixed_solution\fC [protected]\fP, \fC [inherited]\fP"
Element by element components of nonlinear_solution at a fixed point in a timestep, for optional use by e\&.g\&. stabilized methods 
.PP
Definition at line 385 of file diff_context\&.h\&.
.PP
Referenced by libMesh::DiffContext::DiffContext(), libMesh::DiffContext::get_elem_fixed_solution(), and libMesh::FEMContext::pre_fe_reinit()\&.
.SS "std::vector<\fBDenseSubVector\fP<\fBNumber\fP> *> libMesh::DiffContext::elem_fixed_subsolutions\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 386 of file diff_context\&.h\&.
.PP
Referenced by libMesh::DiffContext::DiffContext(), libMesh::FEMContext::fixed_interior_hessian(), libMesh::FEMContext::fixed_interior_value(), libMesh::FEMContext::fixed_point_gradient(), libMesh::FEMContext::fixed_point_hessian(), libMesh::FEMContext::fixed_point_value(), libMesh::FEMContext::fixed_side_gradient(), libMesh::FEMContext::fixed_side_hessian(), libMesh::FEMContext::fixed_side_value(), libMesh::DiffContext::get_elem_fixed_solution(), libMesh::FEMContext::pre_fe_reinit(), and libMesh::DiffContext::~DiffContext()\&.
.SS "\fBDenseMatrix\fP<\fBNumber\fP> libMesh::DiffContext::elem_jacobian\fC [protected]\fP, \fC [inherited]\fP"
Element jacobian: derivatives of elem_residual with respect to elem_solution 
.PP
Definition at line 397 of file diff_context\&.h\&.
.PP
Referenced by libMesh::DiffContext::DiffContext(), libMesh::DiffContext::get_elem_jacobian(), and libMesh::FEMContext::pre_fe_reinit()\&.
.SS "std::vector<\fBNumber\fP> libMesh::DiffContext::elem_qoi\fC [protected]\fP, \fC [inherited]\fP"
Element quantity of interest contributions 
.PP
Definition at line 402 of file diff_context\&.h\&.
.PP
Referenced by libMesh::DiffContext::DiffContext(), and libMesh::DiffContext::get_qois()\&.
.SS "std::vector<\fBDenseVector\fP<\fBNumber\fP> > libMesh::DiffContext::elem_qoi_derivative\fC [protected]\fP, \fC [inherited]\fP"
Element quantity of interest derivative contributions 
.PP
Definition at line 407 of file diff_context\&.h\&.
.PP
Referenced by libMesh::DiffContext::DiffContext(), libMesh::DiffContext::get_qoi_derivatives(), and libMesh::FEMContext::pre_fe_reinit()\&.
.SS "std::vector<std::vector<\fBDenseSubVector\fP<\fBNumber\fP> *> > libMesh::DiffContext::elem_qoi_subderivatives\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 408 of file diff_context\&.h\&.
.PP
Referenced by libMesh::DiffContext::DiffContext(), libMesh::DiffContext::get_qoi_derivatives(), libMesh::FEMContext::pre_fe_reinit(), and libMesh::DiffContext::~DiffContext()\&.
.SS "\fBDenseVector\fP<\fBNumber\fP> libMesh::DiffContext::elem_residual\fC [protected]\fP, \fC [inherited]\fP"
Element residual vector 
.PP
Definition at line 391 of file diff_context\&.h\&.
.PP
Referenced by libMesh::DiffContext::DiffContext(), libMesh::DiffContext::get_elem_residual(), and libMesh::FEMContext::pre_fe_reinit()\&.
.SS "\fBDenseVector\fP<\fBNumber\fP> libMesh::DiffContext::elem_solution\fC [protected]\fP, \fC [inherited]\fP"
Element by element components of nonlinear_solution as adjusted by a time_solver 
.PP
Definition at line 377 of file diff_context\&.h\&.
.PP
Referenced by libMesh::DiffContext::DiffContext(), libMesh::DiffContext::get_elem_solution(), and libMesh::FEMContext::pre_fe_reinit()\&.
.SS "\fBReal\fP libMesh::DiffContext::elem_solution_derivative\fC [inherited]\fP"
The derivative of elem_solution with respect to the nonlinear solution, for use by systems constructing jacobians with elem_fixed_solution based methods 
.PP
Definition at line 310 of file diff_context\&.h\&.
.PP
Referenced by libMesh::EulerSolver::element_residual(), libMesh::Euler2Solver::element_residual(), libMesh::DiffContext::get_elem_solution_derivative(), libMesh::EulerSolver::side_residual(), and libMesh::Euler2Solver::side_residual()\&.
.SS "std::vector<std::vector<\fBDenseSubMatrix\fP<\fBNumber\fP> *> > libMesh::DiffContext::elem_subjacobians\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 414 of file diff_context\&.h\&.
.PP
Referenced by libMesh::DiffContext::DiffContext(), libMesh::DiffContext::get_elem_jacobian(), libMesh::FEMContext::pre_fe_reinit(), and libMesh::DiffContext::~DiffContext()\&.
.SS "std::vector<\fBDenseSubVector\fP<\fBNumber\fP> *> libMesh::DiffContext::elem_subresiduals\fC [protected]\fP, \fC [inherited]\fP"
Element residual subvectors and Jacobian submatrices 
.PP
Definition at line 413 of file diff_context\&.h\&.
.PP
Referenced by libMesh::DiffContext::DiffContext(), libMesh::DiffContext::get_elem_residual(), libMesh::FEMContext::pre_fe_reinit(), and libMesh::DiffContext::~DiffContext()\&.
.SS "std::vector<\fBDenseSubVector\fP<\fBNumber\fP> *> libMesh::DiffContext::elem_subsolutions\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 378 of file diff_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::_do_elem_position_set(), libMesh::DiffContext::DiffContext(), libMesh::FEMContext::elem_position_get(), libMesh::DiffContext::get_elem_solution(), libMesh::FEMContext::interior_curl(), libMesh::FEMContext::interior_div(), libMesh::FEMContext::interior_gradient(), libMesh::FEMContext::interior_hessian(), libMesh::FEMContext::interior_value(), libMesh::FEMContext::point_curl(), libMesh::FEMContext::point_gradient(), libMesh::FEMContext::point_hessian(), libMesh::FEMContext::point_value(), libMesh::FEMContext::pre_fe_reinit(), libMesh::FEMContext::side_gradient(), libMesh::FEMContext::side_hessian(), libMesh::FEMContext::side_value(), and libMesh::DiffContext::~DiffContext()\&.
.SS "\fBQBase\fP* libMesh::FEMContext::element_qrule\fC [protected]\fP, \fC [inherited]\fP"
Quadrature rule for element interior\&. The FEM context will try to find a quadrature rule that correctly integrates all variables 
.PP
Definition at line 717 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::FEMContext(), libMesh::FEMContext::get_element_qrule(), and libMesh::FEMContext::~FEMContext()\&.
.SS "\fBReal\fP libMesh::DiffContext::fixed_solution_derivative\fC [inherited]\fP"
The derivative of elem_fixed_solution with respect to the nonlinear solution, for use by systems constructing jacobians with elem_fixed_solution based methods 
.PP
Definition at line 317 of file diff_context\&.h\&.
.PP
Referenced by libMesh::EulerSolver::element_residual(), libMesh::Euler2Solver::element_residual(), libMesh::SteadySolver::element_residual(), libMesh::DiffContext::get_fixed_solution_derivative(), libMesh::EulerSolver::side_residual(), libMesh::Euler2Solver::side_residual(), and libMesh::SteadySolver::side_residual()\&.
.SS "std::map<const \fBNumericVector\fP<\fBNumber\fP>*, std::pair<\fBDenseVector\fP<\fBNumber\fP>, std::vector<\fBDenseSubVector\fP<\fBNumber\fP>*> > > libMesh::DiffContext::localized_vectors\fC [protected]\fP, \fC [inherited]\fP"
Contains pointers to vectors the user has asked to be localized, keyed with pairs of element localized versions of that vector and per variable views 
.PP
Definition at line 371 of file diff_context\&.h\&.
.PP
Referenced by libMesh::DiffContext::add_localized_vector(), libMesh::DiffContext::get_localized_subvector(), libMesh::DiffContext::get_localized_vector(), libMesh::FEMContext::pre_fe_reinit(), and libMesh::DiffContext::~DiffContext()\&.
.SS "unsigned char libMesh::FEMContext::side\fC [inherited]\fP"
Current side for side_* to examine 
.PP
Definition at line 665 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::get_side(), libMesh::FEMContext::has_side_boundary_id(), libMesh::FEMContext::side_boundary_ids(), and libMesh::FEMContext::side_fe_reinit()\&.
.SS "\fBQBase\fP* libMesh::FEMContext::side_qrule\fC [protected]\fP, \fC [inherited]\fP"
Quadrature rules for element sides The FEM context will try to find a quadrature rule that correctly integrates all variables 
.PP
Definition at line 724 of file fem_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::FEMContext(), libMesh::FEMContext::get_side_qrule(), and libMesh::FEMContext::~FEMContext()\&.
.SS "const \fBReal\fP libMesh::DiffContext::system_time\fC [inherited]\fP"
This is the time stored in the \fBSystem\fP class at the time this context was created, i\&.e\&. the time at the beginning of the current timestep\&. This value gets set in the constructor and unlike \fBDiffContext::time\fP, is not tweaked mid-timestep by transient solvers: it remains equal to the value it was assigned at construction\&. 
.PP
Definition at line 303 of file diff_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::_update_time_from_system(), and libMesh::DiffContext::get_system_time()\&.
.SS "\fBReal\fP libMesh::DiffContext::time\fC [inherited]\fP"
For time-dependent problems, this is the time t for which the current nonlinear_solution is defined\&. FIXME - this needs to be tweaked mid-timestep by all transient solvers! 
.PP
Definition at line 294 of file diff_context\&.h\&.
.PP
Referenced by libMesh::FEMContext::_update_time_from_system(), libMesh::DiffContext::get_time(), and libMesh::DiffContext::set_time()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libMesh from the source code\&.
