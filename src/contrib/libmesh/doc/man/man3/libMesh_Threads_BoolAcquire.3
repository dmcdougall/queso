.TH "libMesh::Threads::BoolAcquire" 3 "Tue May 6 2014" "libMesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libMesh::Threads::BoolAcquire \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <threads\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBoolAcquire\fP (bool &b)"
.br
.ti -1c
.RI "\fB~BoolAcquire\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "bool & \fB_b\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
We use a class to turn \fBThreads::in_threads\fP on and off, to be exception-safe\&. 
.PP
Definition at line 98 of file threads\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "libMesh::Threads::BoolAcquire::BoolAcquire (bool &b)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 101 of file threads\&.h\&.
.PP
References _b, and libMesh::libmesh_assert()\&.
.PP
.nf
101 : _b(b) { libmesh_assert(!_b); _b = true; }
.fi
.SS "libMesh::Threads::BoolAcquire::~BoolAcquire ()\fC [inline]\fP"

.PP
Definition at line 103 of file threads\&.h\&.
.PP
References _b\&.
.PP
.nf
103 { libmesh_exceptionless_assert(_b); _b = false; }
.fi
.SH "Member Data Documentation"
.PP 
.SS "bool& libMesh::Threads::BoolAcquire::_b\fC [private]\fP"

.PP
Definition at line 105 of file threads\&.h\&.
.PP
Referenced by BoolAcquire(), and ~BoolAcquire()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libMesh from the source code\&.
