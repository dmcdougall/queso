.TH "libMesh::Threads::spin_mutex::scoped_lock" 3 "Tue May 6 2014" "libMesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libMesh::Threads::spin_mutex::scoped_lock \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <threads\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBscoped_lock\fP ()"
.br
.ti -1c
.RI "\fBscoped_lock\fP (\fBspin_mutex\fP &in_smutex)"
.br
.ti -1c
.RI "\fB~scoped_lock\fP ()"
.br
.ti -1c
.RI "void \fBacquire\fP (\fBspin_mutex\fP &in_smutex)"
.br
.ti -1c
.RI "void \fBrelease\fP ()"
.br
.ti -1c
.RI "\fBscoped_lock\fP ()"
.br
.ti -1c
.RI "\fBscoped_lock\fP (\fBspin_mutex\fP &in_smutex)"
.br
.ti -1c
.RI "\fB~scoped_lock\fP ()"
.br
.ti -1c
.RI "void \fBacquire\fP (\fBspin_mutex\fP &in_smutex)"
.br
.ti -1c
.RI "void \fBrelease\fP ()"
.br
.ti -1c
.RI "\fBscoped_lock\fP ()"
.br
.ti -1c
.RI "\fBscoped_lock\fP (\fBspin_mutex\fP &)"
.br
.ti -1c
.RI "void \fBacquire\fP (\fBspin_mutex\fP &)"
.br
.ti -1c
.RI "void \fBrelease\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBspin_mutex\fP * \fBsmutex\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
Definition at line 343 of file threads\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "libMesh::Threads::spin_mutex::scoped_lock::scoped_lock ()\fC [inline]\fP"

.PP
Definition at line 346 of file threads\&.h\&.
.PP
.nf
346 : smutex(NULL) {}
.fi
.SS "libMesh::Threads::spin_mutex::scoped_lock::scoped_lock (\fBspin_mutex\fP &in_smutex)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 347 of file threads\&.h\&.
.PP
References libMesh::Threads::spin_mutex::lock(), and smutex\&.
.PP
.nf
347 : smutex(&in_smutex) { smutex->lock(); }
.fi
.SS "libMesh::Threads::spin_mutex::scoped_lock::~scoped_lock ()\fC [inline]\fP"

.PP
Definition at line 349 of file threads\&.h\&.
.PP
References release()\&.
.PP
.nf
349 { release(); }
.fi
.SS "libMesh::Threads::spin_mutex::scoped_lock::scoped_lock ()\fC [inline]\fP"

.PP
Definition at line 375 of file threads\&.h\&.
.PP
.nf
375 : smutex(NULL) {}
.fi
.SS "libMesh::Threads::spin_mutex::scoped_lock::scoped_lock (\fBspin_mutex\fP &in_smutex)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 376 of file threads\&.h\&.
.PP
References libMesh::Threads::spin_mutex::lock(), and smutex\&.
.PP
.nf
376 : smutex(&in_smutex) { smutex->lock(); }
.fi
.SS "libMesh::Threads::spin_mutex::scoped_lock::~scoped_lock ()\fC [inline]\fP"

.PP
Definition at line 378 of file threads\&.h\&.
.PP
References release()\&.
.PP
.nf
378 { release(); }
.fi
.SS "libMesh::Threads::spin_mutex::scoped_lock::scoped_lock ()\fC [inline]\fP"

.PP
Definition at line 856 of file threads\&.h\&.
.PP
.nf
856 {}
.fi
.SS "libMesh::Threads::spin_mutex::scoped_lock::scoped_lock (\fBspin_mutex\fP &)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 857 of file threads\&.h\&.
.PP
.nf
857 {}
.fi
.SH "Member Function Documentation"
.PP 
.SS "void libMesh::Threads::spin_mutex::scoped_lock::acquire (\fBspin_mutex\fP &in_smutex)\fC [inline]\fP"

.PP
Definition at line 351 of file threads\&.h\&.
.PP
References libMesh::Threads::spin_mutex::lock(), and smutex\&.
.PP
.nf
351 { smutex = &in_smutex; smutex->lock(); }
.fi
.SS "void libMesh::Threads::spin_mutex::scoped_lock::acquire (\fBspin_mutex\fP &in_smutex)\fC [inline]\fP"

.PP
Definition at line 380 of file threads\&.h\&.
.PP
References libMesh::Threads::spin_mutex::lock(), and smutex\&.
.PP
.nf
380 { smutex = &in_smutex; smutex->lock(); }
.fi
.SS "void libMesh::Threads::spin_mutex::scoped_lock::acquire (\fBspin_mutex\fP &)\fC [inline]\fP"

.PP
Definition at line 858 of file threads\&.h\&.
.PP
.nf
858 {}
.fi
.SS "void libMesh::Threads::spin_mutex::scoped_lock::release ()\fC [inline]\fP"

.PP
Definition at line 352 of file threads\&.h\&.
.PP
References smutex, and libMesh::Threads::spin_mutex::unlock()\&.
.PP
Referenced by ~scoped_lock()\&.
.PP
.nf
352 { if(smutex) smutex->unlock(); smutex = NULL; }
.fi
.SS "void libMesh::Threads::spin_mutex::scoped_lock::release ()\fC [inline]\fP"

.PP
Definition at line 381 of file threads\&.h\&.
.PP
References smutex, and libMesh::Threads::spin_mutex::unlock()\&.
.PP
.nf
381 { if(smutex) smutex->unlock(); smutex = NULL; }
.fi
.SS "void libMesh::Threads::spin_mutex::scoped_lock::release ()\fC [inline]\fP"

.PP
Definition at line 859 of file threads\&.h\&.
.PP
.nf
859 {}
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBspin_mutex\fP * libMesh::Threads::spin_mutex::scoped_lock::smutex\fC [private]\fP"

.PP
Definition at line 355 of file threads\&.h\&.
.PP
Referenced by acquire(), release(), and scoped_lock()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libMesh from the source code\&.
