.TH "libMesh::DiffSolver" 3 "Tue May 6 2014" "libMesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libMesh::DiffSolver \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <diff_solver\&.h>\fP
.PP
Inherits \fBlibMesh::ReferenceCountedObject< DiffSolver >\fP, and \fBlibMesh::ParallelObject\fP\&.
.PP
Inherited by \fBlibMesh::NewtonSolver\fP, and \fBlibMesh::PetscDiffSolver\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBSolveResult\fP { \fBINVALID_SOLVE_RESULT\fP = 0, \fBCONVERGED_NO_REASON\fP = 1, \fBCONVERGED_ABSOLUTE_RESIDUAL\fP = 2, \fBCONVERGED_RELATIVE_RESIDUAL\fP = 4, \fBCONVERGED_ABSOLUTE_STEP\fP = 8, \fBCONVERGED_RELATIVE_STEP\fP = 16, \fBDIVERGED_NO_REASON\fP = 32, \fBDIVERGED_MAX_NONLINEAR_ITERATIONS\fP = 64, \fBDIVERGED_BACKTRACKING_FAILURE\fP = 128 }"
.br
.ti -1c
.RI "typedef \fBImplicitSystem\fP \fBsys_type\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBDiffSolver\fP (\fBsys_type\fP &s)"
.br
.ti -1c
.RI "virtual \fB~DiffSolver\fP ()"
.br
.ti -1c
.RI "virtual void \fBinit\fP ()"
.br
.ti -1c
.RI "virtual void \fBreinit\fP ()"
.br
.ti -1c
.RI "virtual unsigned int \fBsolve\fP ()=0"
.br
.ti -1c
.RI "unsigned int \fBtotal_outer_iterations\fP ()"
.br
.ti -1c
.RI "unsigned int \fBtotal_inner_iterations\fP ()"
.br
.ti -1c
.RI "unsigned int \fBsolve_result\fP ()"
.br
.ti -1c
.RI "const \fBsys_type\fP & \fBsystem\fP () const "
.br
.ti -1c
.RI "\fBsys_type\fP & \fBsystem\fP ()"
.br
.ti -1c
.RI "const \fBParallel::Communicator\fP & \fBcomm\fP () const "
.br
.ti -1c
.RI "\fBprocessor_id_type\fP \fBn_processors\fP () const "
.br
.ti -1c
.RI "\fBprocessor_id_type\fP \fBprocessor_id\fP () const "
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBAutoPtr\fP< \fBDiffSolver\fP > \fBbuild\fP (\fBsys_type\fP &s)"
.br
.ti -1c
.RI "static std::string \fBget_info\fP ()"
.br
.ti -1c
.RI "static void \fBprint_info\fP (std::ostream &\fBout\fP=\fBlibMesh::out\fP)"
.br
.ti -1c
.RI "static unsigned int \fBn_objects\fP ()"
.br
.ti -1c
.RI "static void \fBenable_print_counter_info\fP ()"
.br
.ti -1c
.RI "static void \fBdisable_print_counter_info\fP ()"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "unsigned int \fBmax_linear_iterations\fP"
.br
.ti -1c
.RI "unsigned int \fBmax_nonlinear_iterations\fP"
.br
.ti -1c
.RI "bool \fBquiet\fP"
.br
.ti -1c
.RI "bool \fBverbose\fP"
.br
.ti -1c
.RI "bool \fBcontinue_after_max_iterations\fP"
.br
.ti -1c
.RI "bool \fBcontinue_after_backtrack_failure\fP"
.br
.ti -1c
.RI "\fBReal\fP \fBabsolute_residual_tolerance\fP"
.br
.ti -1c
.RI "\fBReal\fP \fBrelative_residual_tolerance\fP"
.br
.ti -1c
.RI "\fBReal\fP \fBabsolute_step_tolerance\fP"
.br
.ti -1c
.RI "\fBReal\fP \fBrelative_step_tolerance\fP"
.br
.ti -1c
.RI "\fBReal\fP \fBinitial_linear_tolerance\fP"
.br
.ti -1c
.RI "\fBReal\fP \fBminimum_linear_tolerance\fP"
.br
.ti -1c
.RI "\fBAutoPtr\fP< \fBLinearSolutionMonitor\fP > \fBlinear_solution_monitor\fP"
.br
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "typedef std::map< std::string, 
.br
std::pair< unsigned int, 
.br
unsigned int > > \fBCounts\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBincrement_constructor_count\fP (const std::string &name)"
.br
.ti -1c
.RI "void \fBincrement_destructor_count\fP (const std::string &name)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBReal\fP \fBmax_solution_norm\fP"
.br
.ti -1c
.RI "\fBReal\fP \fBmax_residual_norm\fP"
.br
.ti -1c
.RI "unsigned int \fB_outer_iterations\fP"
.br
.ti -1c
.RI "unsigned int \fB_inner_iterations\fP"
.br
.ti -1c
.RI "\fBsys_type\fP & \fB_system\fP"
.br
.ti -1c
.RI "unsigned int \fB_solve_result\fP"
.br
.ti -1c
.RI "const \fBParallel::Communicator\fP & \fB_communicator\fP"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static \fBCounts\fP \fB_counts\fP"
.br
.ti -1c
.RI "static \fBThreads::atomic\fP
.br
< unsigned int > \fB_n_objects\fP"
.br
.ti -1c
.RI "static \fBThreads::spin_mutex\fP \fB_mutex\fP"
.br
.ti -1c
.RI "static bool \fB_enable_print_counter\fP = true"
.br
.in -1c
.SH "Detailed Description"
.PP 
This is a generic class that defines a solver to handle \fBImplicitSystem\fP classes, including \fBNonlinearImplicitSystem\fP and \fBDifferentiableSystem\fP A user can define a solver by deriving from this class and implementing certain functions\&.
.PP
This class is part of the new \fBDifferentiableSystem\fP framework, which is still experimental\&. Users of this framework should beware of bugs and future API changes\&.
.PP
\fBAuthor:\fP
.RS 4
Roy H\&. Stogner 2006-2010 
.RE
.PP

.PP
Definition at line 70 of file diff_solver\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef std::map<std::string, std::pair<unsigned int, unsigned int> > \fBlibMesh::ReferenceCounter::Counts\fP\fC [protected]\fP, \fC [inherited]\fP"
Data structure to log the information\&. The log is identified by the class name\&. 
.PP
Definition at line 113 of file reference_counter\&.h\&.
.SS "typedef \fBImplicitSystem\fP \fBlibMesh::DiffSolver::sys_type\fP"
The type of system 
.PP
Definition at line 77 of file diff_solver\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBlibMesh::DiffSolver::SolveResult\fP"
Enumeration return type for the \fBsolve()\fP function\&. Multiple SolveResults may be combined (OR'd) in the single return\&. To test which ones are present, just AND the return value with any of the SolveResult flags defined below\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIINVALID_SOLVE_RESULT \fP\fP
A default or invalid solve result\&. This usually means no solve has occurred yet\&. 
.TP
\fB\fICONVERGED_NO_REASON \fP\fP
The solver converged but no particular reason is specified\&. 
.TP
\fB\fICONVERGED_ABSOLUTE_RESIDUAL \fP\fP
The \fBDiffSolver\fP achieved the desired absolute residual tolerance\&. 
.TP
\fB\fICONVERGED_RELATIVE_RESIDUAL \fP\fP
The \fBDiffSolver\fP achieved the desired relative residual tolerance\&. 
.TP
\fB\fICONVERGED_ABSOLUTE_STEP \fP\fP
The \fBDiffSolver\fP achieved the desired absolute step size tolerance\&. 
.TP
\fB\fICONVERGED_RELATIVE_STEP \fP\fP
The \fBDiffSolver\fP achieved the desired relative step size tolerance\&. 
.TP
\fB\fIDIVERGED_NO_REASON \fP\fP
The \fBDiffSolver\fP diverged but no particular reason is specified\&. 
.TP
\fB\fIDIVERGED_MAX_NONLINEAR_ITERATIONS \fP\fP
The \fBDiffSolver\fP reached the maximum allowed number of nonlinear iterations before satisfying any convergence tests\&. 
.TP
\fB\fIDIVERGED_BACKTRACKING_FAILURE \fP\fP
The \fBDiffSolver\fP failed to find a descent direction by backtracking (See \fBnewton_solver\&.C\fP) 
.PP
Definition at line 220 of file diff_solver\&.h\&.
.PP
.nf
220                    {
225     INVALID_SOLVE_RESULT = 0,
226 
231     CONVERGED_NO_REASON = 1,
232 
237     CONVERGED_ABSOLUTE_RESIDUAL = 2,
238 
243     CONVERGED_RELATIVE_RESIDUAL = 4,
244 
249     CONVERGED_ABSOLUTE_STEP = 8,
250 
255     CONVERGED_RELATIVE_STEP = 16,
256 
261     DIVERGED_NO_REASON = 32,
262 
268     DIVERGED_MAX_NONLINEAR_ITERATIONS = 64,
269 
274     DIVERGED_BACKTRACKING_FAILURE = 128
275   };
.fi
.SH "Constructor & Destructor Documentation"
.PP 
.SS "libMesh::DiffSolver::DiffSolver (\fBsys_type\fP &s)"
Constructor\&. Requires a reference to the system to be solved\&. 
.PP
Definition at line 28 of file diff_solver\&.C\&.
.PP
.nf
29   : ParallelObject(s),
30     max_linear_iterations(1000),
31     max_nonlinear_iterations(100),
32     quiet(true),
33     verbose(false),
34     continue_after_max_iterations(true),
35     continue_after_backtrack_failure(false),
36     absolute_residual_tolerance(0\&.),
37     relative_residual_tolerance(0\&.),
38     absolute_step_tolerance(0\&.),
39     relative_step_tolerance(0\&.),
40     initial_linear_tolerance(1e-12),
41     minimum_linear_tolerance(TOLERANCE*TOLERANCE),
42     max_solution_norm(0\&.),
43     max_residual_norm(0\&.),
44     _system (s),
45     _solve_result(INVALID_SOLVE_RESULT)
46 {
47 }
.fi
.SS "virtual libMesh::DiffSolver::~DiffSolver ()\fC [inline]\fP, \fC [virtual]\fP"
Destructor\&. 
.PP
Definition at line 94 of file diff_solver\&.h\&.
.PP
.nf
94 {}
.fi
.SH "Member Function Documentation"
.PP 
.SS "\fBAutoPtr\fP< \fBDiffSolver\fP > libMesh::DiffSolver::build (\fBsys_type\fP &s)\fC [static]\fP"
\fBFactory\fP\&. Requires a reference to the system to be solved\&. Returns a \fBNewtonSolver\fP by default 
.PP
Definition at line 51 of file diff_solver\&.C\&.
.PP
Referenced by libMesh::TimeSolver::init()\&.
.PP
.nf
52 {
53   return AutoPtr<DiffSolver>(new NewtonSolver(s));
54 }
.fi
.SS "const \fBParallel::Communicator\fP& libMesh::ParallelObject::comm () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
\fBReturns:\fP
.RS 4
a reference to the \fC\fBParallel::Communicator\fP\fP object used by this mesh\&. 
.RE
.PP

.PP
Definition at line 86 of file parallel_object\&.h\&.
.PP
References libMesh::ParallelObject::_communicator\&.
.PP
Referenced by libMesh::__libmesh_petsc_diff_solver_monitor(), libMesh::__libmesh_petsc_diff_solver_residual(), libMesh::__libmesh_petsc_snes_residual(), libMesh::MeshRefinement::_coarsen_elements(), libMesh::ExactSolution::_compute_error(), libMesh::MetisPartitioner::_do_partition(), libMesh::ParmetisPartitioner::_do_repartition(), libMesh::UniformRefinementEstimator::_estimate_error(), libMesh::SlepcEigenSolver< T >::_petsc_shell_matrix_get_diagonal(), libMesh::PetscLinearSolver< T >::_petsc_shell_matrix_get_diagonal(), libMesh::SlepcEigenSolver< T >::_petsc_shell_matrix_mult(), libMesh::PetscLinearSolver< T >::_petsc_shell_matrix_mult(), libMesh::PetscLinearSolver< T >::_petsc_shell_matrix_mult_add(), libMesh::EquationSystems::_read_impl(), libMesh::MeshRefinement::_refine_elements(), libMesh::ParallelMesh::add_elem(), libMesh::ImplicitSystem::add_matrix(), libMesh::ParallelMesh::add_node(), libMesh::System::add_vector(), libMesh::UnstructuredMesh::all_second_order(), libMesh::LaplaceMeshSmoother::allgather_graph(), libMesh::FEMSystem::assemble_qoi(), libMesh::MeshCommunication::assign_global_indices(), libMesh::ParmetisPartitioner::assign_partitioning(), libMesh::DofMap::attach_matrix(), libMesh::MeshTools::bounding_box(), libMesh::System::calculate_norm(), libMesh::MeshRefinement::coarsen_elements(), libMesh::Nemesis_IO_Helper::compute_num_global_elem_blocks(), libMesh::Nemesis_IO_Helper::compute_num_global_nodesets(), libMesh::Nemesis_IO_Helper::compute_num_global_sidesets(), libMesh::Problem_Interface::computeF(), libMesh::Problem_Interface::computeJacobian(), libMesh::Problem_Interface::computePreconditioner(), libMesh::MeshTools::correct_node_proc_ids(), libMesh::MeshCommunication::delete_remote_elements(), libMesh::DofMap::distribute_dofs(), DMlibMeshFunction(), DMLibMeshSetSystem(), DMVariableBounds_libMesh(), libMesh::MeshRefinement::eliminate_unrefined_patches(), libMesh::WeightedPatchRecoveryErrorEstimator::estimate_error(), libMesh::PatchRecoveryErrorEstimator::estimate_error(), libMesh::JumpErrorEstimator::estimate_error(), libMesh::AdjointRefinementEstimator::estimate_error(), libMesh::MeshRefinement::flag_elements_by_elem_fraction(), libMesh::MeshRefinement::flag_elements_by_error_fraction(), libMesh::MeshRefinement::flag_elements_by_nelem_target(), libMesh::for(), libMesh::CondensedEigenSystem::get_eigenpair(), libMesh::ImplicitSystem::get_linear_solver(), libMesh::LocationMap< T >::init(), libMesh::TimeSolver::init(), libMesh::SystemSubsetBySubdomain::init(), libMesh::EigenSystem::init_data(), libMesh::EigenSystem::init_matrices(), libMesh::ParmetisPartitioner::initialize(), libMesh::MeshTools::libmesh_assert_valid_dof_ids(), libMesh::ParallelMesh::libmesh_assert_valid_parallel_flags(), libMesh::MeshTools::libmesh_assert_valid_procids< Elem >(), libMesh::MeshTools::libmesh_assert_valid_procids< Node >(), libMesh::MeshTools::libmesh_assert_valid_refinement_flags(), libMesh::MeshRefinement::limit_level_mismatch_at_edge(), libMesh::MeshRefinement::limit_level_mismatch_at_node(), libMesh::MeshRefinement::make_coarsening_compatible(), libMesh::MeshCommunication::make_elems_parallel_consistent(), libMesh::MeshRefinement::make_flags_parallel_consistent(), libMesh::MeshCommunication::make_node_ids_parallel_consistent(), libMesh::MeshCommunication::make_node_proc_ids_parallel_consistent(), libMesh::MeshCommunication::make_nodes_parallel_consistent(), libMesh::MeshRefinement::make_refinement_compatible(), libMesh::FEMSystem::mesh_position_set(), libMesh::MeshSerializer::MeshSerializer(), libMesh::ParallelMesh::n_active_elem(), libMesh::MeshTools::n_active_levels(), libMesh::BoundaryInfo::n_boundary_conds(), libMesh::BoundaryInfo::n_edge_conds(), libMesh::CondensedEigenSystem::n_global_non_condensed_dofs(), libMesh::MeshTools::n_levels(), libMesh::BoundaryInfo::n_nodeset_conds(), libMesh::MeshTools::n_p_levels(), libMesh::ParallelMesh::parallel_max_elem_id(), libMesh::ParallelMesh::parallel_max_node_id(), libMesh::ParallelMesh::parallel_n_elem(), libMesh::ParallelMesh::parallel_n_nodes(), libMesh::Partitioner::partition(), libMesh::Partitioner::partition_unpartitioned_elements(), libMesh::petsc_auto_fieldsplit(), libMesh::System::point_gradient(), libMesh::System::point_hessian(), libMesh::System::point_value(), libMesh::MeshBase::prepare_for_use(), libMesh::System::project_vector(), libMesh::Nemesis_IO::read(), libMesh::XdrIO::read(), libMesh::System::read_header(), libMesh::System::read_legacy_data(), libMesh::System::read_SCALAR_dofs(), libMesh::XdrIO::read_serialized_bc_names(), libMesh::XdrIO::read_serialized_bcs(), libMesh::System::read_serialized_blocked_dof_objects(), libMesh::XdrIO::read_serialized_connectivity(), libMesh::XdrIO::read_serialized_nodes(), libMesh::XdrIO::read_serialized_nodesets(), libMesh::XdrIO::read_serialized_subdomain_names(), libMesh::System::read_serialized_vector(), libMesh::MeshBase::recalculate_n_partitions(), libMesh::MeshRefinement::refine_and_coarsen_elements(), libMesh::MeshRefinement::refine_elements(), libMesh::Partitioner::set_node_processor_ids(), libMesh::DofMap::set_nonlocal_dof_objects(), libMesh::LaplaceMeshSmoother::smooth(), libMesh::MeshBase::subdomain_ids(), libMesh::BoundaryInfo::sync(), libMesh::Parallel::sync_element_data_by_parent_id(), libMesh::MeshRefinement::test_level_one(), libMesh::MeshRefinement::test_unflagged(), libMesh::MeshTools::total_weight(), libMesh::CheckpointIO::write(), libMesh::XdrIO::write(), libMesh::UnstructuredMesh::write(), libMesh::LegacyXdrIO::write_mesh(), libMesh::System::write_SCALAR_dofs(), libMesh::XdrIO::write_serialized_bcs(), libMesh::System::write_serialized_blocked_dof_objects(), libMesh::XdrIO::write_serialized_connectivity(), libMesh::XdrIO::write_serialized_nodes(), libMesh::XdrIO::write_serialized_nodesets(), and libMesh::DivaIO::write_stream()\&.
.PP
.nf
87   { return _communicator; }
.fi
.SS "void libMesh::ReferenceCounter::disable_print_counter_info ()\fC [static]\fP, \fC [inherited]\fP"

.PP
Definition at line 106 of file reference_counter\&.C\&.
.PP
References libMesh::ReferenceCounter::_enable_print_counter\&.
.PP
.nf
107 {
108   _enable_print_counter = false;
109   return;
110 }
.fi
.SS "void libMesh::ReferenceCounter::enable_print_counter_info ()\fC [static]\fP, \fC [inherited]\fP"
Methods to enable/disable the reference counter output from \fBprint_info()\fP 
.PP
Definition at line 100 of file reference_counter\&.C\&.
.PP
References libMesh::ReferenceCounter::_enable_print_counter\&.
.PP
.nf
101 {
102   _enable_print_counter = true;
103   return;
104 }
.fi
.SS "std::string libMesh::ReferenceCounter::get_info ()\fC [static]\fP, \fC [inherited]\fP"
Gets a string containing the reference information\&. 
.PP
Definition at line 47 of file reference_counter\&.C\&.
.PP
References libMesh::ReferenceCounter::_counts, and libMesh::Quality::name()\&.
.PP
Referenced by libMesh::ReferenceCounter::print_info()\&.
.PP
.nf
48 {
49 #if defined(LIBMESH_ENABLE_REFERENCE_COUNTING) && defined(DEBUG)
50 
51   std::ostringstream oss;
52 
53   oss << '\n'
54       << " ---------------------------------------------------------------------------- \n"
55       << "| Reference count information                                                |\n"
56       << " ---------------------------------------------------------------------------- \n";
57 
58   for (Counts::iterator it = _counts\&.begin();
59        it != _counts\&.end(); ++it)
60     {
61       const std::string name(it->first);
62       const unsigned int creations    = it->second\&.first;
63       const unsigned int destructions = it->second\&.second;
64 
65       oss << "| " << name << " reference count information:\n"
66           << "|  Creations:    " << creations    << '\n'
67           << "|  Destructions: " << destructions << '\n';
68     }
69 
70   oss << " ---------------------------------------------------------------------------- \n";
71 
72   return oss\&.str();
73 
74 #else
75 
76   return "";
77 
78 #endif
79 }
.fi
.SS "void libMesh::ReferenceCounter::increment_constructor_count (const std::string &name)\fC [inline]\fP, \fC [protected]\fP, \fC [inherited]\fP"
Increments the construction counter\&. Should be called in the constructor of any derived class that will be reference counted\&. 
.PP
Definition at line 163 of file reference_counter\&.h\&.
.PP
References libMesh::ReferenceCounter::_counts, libMesh::Quality::name(), and libMesh::Threads::spin_mtx\&.
.PP
Referenced by libMesh::ReferenceCountedObject< RBParametrized >::ReferenceCountedObject()\&.
.PP
.nf
164 {
165   Threads::spin_mutex::scoped_lock lock(Threads::spin_mtx);
166   std::pair<unsigned int, unsigned int>& p = _counts[name];
167 
168   p\&.first++;
169 }
.fi
.SS "void libMesh::ReferenceCounter::increment_destructor_count (const std::string &name)\fC [inline]\fP, \fC [protected]\fP, \fC [inherited]\fP"
Increments the destruction counter\&. Should be called in the destructor of any derived class that will be reference counted\&. 
.PP
Definition at line 176 of file reference_counter\&.h\&.
.PP
References libMesh::ReferenceCounter::_counts, libMesh::Quality::name(), and libMesh::Threads::spin_mtx\&.
.PP
Referenced by libMesh::ReferenceCountedObject< RBParametrized >::~ReferenceCountedObject()\&.
.PP
.nf
177 {
178   Threads::spin_mutex::scoped_lock lock(Threads::spin_mtx);
179   std::pair<unsigned int, unsigned int>& p = _counts[name];
180 
181   p\&.second++;
182 }
.fi
.SS "void libMesh::DiffSolver::init ()\fC [virtual]\fP"
The initialization function\&. This method is used to initialize internal data structures before a simulation begins\&. 
.PP
Reimplemented in \fBlibMesh::PetscDiffSolver\fP, and \fBlibMesh::NewtonSolver\fP\&.
.PP
Definition at line 67 of file diff_solver\&.C\&.
.PP
References max_residual_norm, and max_solution_norm\&.
.PP
Referenced by libMesh::NewtonSolver::init()\&.
.PP
.nf
68 {
69   // Reset the max_step_size and max_residual_norm for a new problem
70   max_solution_norm = 0\&.;
71   max_residual_norm = 0\&.;
72 }
.fi
.SS "static unsigned int libMesh::ReferenceCounter::n_objects ()\fC [inline]\fP, \fC [static]\fP, \fC [inherited]\fP"
Prints the number of outstanding (created, but not yet destroyed) objects\&. 
.PP
Definition at line 79 of file reference_counter\&.h\&.
.PP
References libMesh::ReferenceCounter::_n_objects\&.
.PP
.nf
80   { return _n_objects; }
.fi
.SS "\fBprocessor_id_type\fP libMesh::ParallelObject::n_processors () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
\fBReturns:\fP
.RS 4
the number of processors in the group\&. 
.RE
.PP

.PP
Definition at line 92 of file parallel_object\&.h\&.
.PP
References libMesh::ParallelObject::_communicator, and libMesh::Parallel::Communicator::size()\&.
.PP
Referenced by libMesh::ParmetisPartitioner::_do_repartition(), libMesh::ParallelMesh::add_elem(), libMesh::ParallelMesh::add_node(), libMesh::LaplaceMeshSmoother::allgather_graph(), libMesh::ParmetisPartitioner::assign_partitioning(), libMesh::ParallelMesh::assign_unique_ids(), libMesh::AztecLinearSolver< T >::AztecLinearSolver(), libMesh::ParallelMesh::clear(), libMesh::Nemesis_IO_Helper::compute_border_node_ids(), libMesh::Nemesis_IO_Helper::construct_nemesis_filename(), libMesh::UnstructuredMesh::create_pid_mesh(), libMesh::DofMap::distribute_dofs(), libMesh::DofMap::distribute_local_dofs_node_major(), libMesh::DofMap::distribute_local_dofs_var_major(), libMesh::EnsightIO::EnsightIO(), libMesh::MeshBase::get_info(), libMesh::EquationSystems::init(), libMesh::SystemSubsetBySubdomain::init(), libMesh::ParmetisPartitioner::initialize(), libMesh::Nemesis_IO_Helper::initialize(), libMesh::MeshTools::libmesh_assert_valid_dof_ids(), libMesh::MeshTools::libmesh_assert_valid_procids< Elem >(), libMesh::MeshTools::libmesh_assert_valid_procids< Node >(), libMesh::MeshTools::libmesh_assert_valid_refinement_flags(), libMesh::DofMap::local_variable_indices(), libMesh::MeshBase::n_active_elem_on_proc(), libMesh::MeshBase::n_elem_on_proc(), libMesh::MeshBase::n_nodes_on_proc(), libMesh::Partitioner::partition(), libMesh::MeshBase::partition(), libMesh::Partitioner::partition_unpartitioned_elements(), libMesh::PetscLinearSolver< T >::PetscLinearSolver(), libMesh::System::point_gradient(), libMesh::System::point_hessian(), libMesh::System::point_value(), libMesh::MeshTools::processor_bounding_box(), libMesh::System::project_vector(), libMesh::Nemesis_IO::read(), libMesh::CheckpointIO::read(), libMesh::UnstructuredMesh::read(), libMesh::System::read_parallel_data(), libMesh::System::read_SCALAR_dofs(), libMesh::System::read_serialized_blocked_dof_objects(), libMesh::System::read_serialized_vector(), libMesh::Partitioner::repartition(), libMesh::Partitioner::set_node_processor_ids(), libMesh::DofMap::set_nonlocal_dof_objects(), libMesh::BoundaryInfo::sync(), libMesh::ParallelMesh::update_parallel_id_counts(), libMesh::CheckpointIO::write(), libMesh::GMVIO::write_binary(), libMesh::GMVIO::write_discontinuous_gmv(), libMesh::System::write_parallel_data(), libMesh::System::write_SCALAR_dofs(), libMesh::XdrIO::write_serialized_bcs(), libMesh::System::write_serialized_blocked_dof_objects(), libMesh::XdrIO::write_serialized_connectivity(), libMesh::XdrIO::write_serialized_nodes(), and libMesh::XdrIO::write_serialized_nodesets()\&.
.PP
.nf
93   { return libmesh_cast_int<processor_id_type>(_communicator\&.size()); }
.fi
.SS "void libMesh::ReferenceCounter::print_info (std::ostream &out = \fC\fBlibMesh::out\fP\fP)\fC [static]\fP, \fC [inherited]\fP"
Prints the reference information, by default to \fC\fBlibMesh::out\fP\fP\&. 
.PP
Definition at line 88 of file reference_counter\&.C\&.
.PP
References libMesh::ReferenceCounter::_enable_print_counter, and libMesh::ReferenceCounter::get_info()\&.
.PP
.nf
89 {
90   if( _enable_print_counter ) out_stream << ReferenceCounter::get_info();
91 }
.fi
.SS "\fBprocessor_id_type\fP libMesh::ParallelObject::processor_id () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
\fBReturns:\fP
.RS 4
the rank of this processor in the group\&. 
.RE
.PP

.PP
Definition at line 98 of file parallel_object\&.h\&.
.PP
References libMesh::ParallelObject::_communicator, and libMesh::Parallel::Communicator::rank()\&.
.PP
Referenced by libMesh::MetisPartitioner::_do_partition(), libMesh::EquationSystems::_read_impl(), libMesh::SerialMesh::active_local_elements_begin(), libMesh::ParallelMesh::active_local_elements_begin(), libMesh::SerialMesh::active_local_elements_end(), libMesh::ParallelMesh::active_local_elements_end(), libMesh::SerialMesh::active_local_subdomain_elements_begin(), libMesh::ParallelMesh::active_local_subdomain_elements_begin(), libMesh::SerialMesh::active_local_subdomain_elements_end(), libMesh::ParallelMesh::active_local_subdomain_elements_end(), libMesh::SerialMesh::active_not_local_elements_begin(), libMesh::ParallelMesh::active_not_local_elements_begin(), libMesh::SerialMesh::active_not_local_elements_end(), libMesh::ParallelMesh::active_not_local_elements_end(), libMesh::ParallelMesh::add_elem(), libMesh::DofMap::add_neighbors_to_send_list(), libMesh::ParallelMesh::add_node(), libMesh::UnstructuredMesh::all_second_order(), libMesh::ParmetisPartitioner::assign_partitioning(), libMesh::ParallelMesh::assign_unique_ids(), libMesh::EquationSystems::build_discontinuous_solution_vector(), libMesh::Nemesis_IO_Helper::build_element_and_node_maps(), libMesh::ParmetisPartitioner::build_graph(), libMesh::InfElemBuilder::build_inf_elem(), libMesh::DofMap::build_sparsity(), libMesh::ParallelMesh::clear(), libMesh::ExodusII_IO_Helper::close(), libMesh::Nemesis_IO_Helper::compute_border_node_ids(), libMesh::Nemesis_IO_Helper::compute_communication_map_parameters(), libMesh::Nemesis_IO_Helper::compute_internal_and_border_elems_and_internal_nodes(), libMesh::Nemesis_IO_Helper::compute_node_communication_maps(), libMesh::Nemesis_IO_Helper::compute_num_global_elem_blocks(), libMesh::Nemesis_IO_Helper::compute_num_global_nodesets(), libMesh::Nemesis_IO_Helper::compute_num_global_sidesets(), libMesh::Nemesis_IO_Helper::construct_nemesis_filename(), libMesh::ExodusII_IO_Helper::create(), libMesh::DofMap::distribute_dofs(), libMesh::DofMap::distribute_local_dofs_node_major(), libMesh::DofMap::distribute_local_dofs_var_major(), libMesh::DofMap::end_dof(), libMesh::DofMap::end_old_dof(), libMesh::EnsightIO::EnsightIO(), libMesh::UnstructuredMesh::find_neighbors(), libMesh::DofMap::first_dof(), libMesh::DofMap::first_old_dof(), libMesh::Nemesis_IO_Helper::get_cmap_params(), libMesh::Nemesis_IO_Helper::get_eb_info_global(), libMesh::Nemesis_IO_Helper::get_elem_cmap(), libMesh::Nemesis_IO_Helper::get_elem_map(), libMesh::MeshBase::get_info(), libMesh::Nemesis_IO_Helper::get_init_global(), libMesh::Nemesis_IO_Helper::get_init_info(), libMesh::Nemesis_IO_Helper::get_loadbal_param(), libMesh::Nemesis_IO_Helper::get_node_cmap(), libMesh::Nemesis_IO_Helper::get_node_map(), libMesh::Nemesis_IO_Helper::get_ns_param_global(), libMesh::Nemesis_IO_Helper::get_ss_param_global(), libMesh::MeshFunction::gradient(), libMesh::MeshFunction::hessian(), libMesh::SystemSubsetBySubdomain::init(), libMesh::ParmetisPartitioner::initialize(), libMesh::ExodusII_IO_Helper::initialize(), libMesh::ExodusII_IO_Helper::initialize_element_variables(), libMesh::ExodusII_IO_Helper::initialize_global_variables(), libMesh::ExodusII_IO_Helper::initialize_nodal_variables(), libMesh::SparsityPattern::Build::join(), libMesh::DofMap::last_dof(), libMesh::MeshTools::libmesh_assert_valid_procids< Elem >(), libMesh::MeshTools::libmesh_assert_valid_procids< Node >(), libMesh::SerialMesh::local_elements_begin(), libMesh::ParallelMesh::local_elements_begin(), libMesh::SerialMesh::local_elements_end(), libMesh::ParallelMesh::local_elements_end(), libMesh::SerialMesh::local_level_elements_begin(), libMesh::ParallelMesh::local_level_elements_begin(), libMesh::SerialMesh::local_level_elements_end(), libMesh::ParallelMesh::local_level_elements_end(), libMesh::SerialMesh::local_nodes_begin(), libMesh::ParallelMesh::local_nodes_begin(), libMesh::SerialMesh::local_nodes_end(), libMesh::ParallelMesh::local_nodes_end(), libMesh::SerialMesh::local_not_level_elements_begin(), libMesh::ParallelMesh::local_not_level_elements_begin(), libMesh::SerialMesh::local_not_level_elements_end(), libMesh::ParallelMesh::local_not_level_elements_end(), libMesh::DofMap::local_variable_indices(), libMesh::MeshRefinement::make_coarsening_compatible(), libMesh::MeshBase::n_active_local_elem(), libMesh::BoundaryInfo::n_boundary_conds(), libMesh::BoundaryInfo::n_edge_conds(), libMesh::DofMap::n_local_dofs(), libMesh::System::n_local_dofs(), libMesh::MeshBase::n_local_elem(), libMesh::MeshBase::n_local_nodes(), libMesh::BoundaryInfo::n_nodeset_conds(), libMesh::SerialMesh::not_local_elements_begin(), libMesh::ParallelMesh::not_local_elements_begin(), libMesh::SerialMesh::not_local_elements_end(), libMesh::ParallelMesh::not_local_elements_end(), libMesh::WeightedPatchRecoveryErrorEstimator::EstimateError::operator()(), libMesh::SparsityPattern::Build::operator()(), libMesh::PatchRecoveryErrorEstimator::EstimateError::operator()(), libMesh::MeshFunction::operator()(), libMesh::ParallelMesh::ParallelMesh(), libMesh::System::point_gradient(), libMesh::System::point_hessian(), libMesh::System::point_value(), libMesh::System::project_vector(), libMesh::Nemesis_IO_Helper::put_cmap_params(), libMesh::Nemesis_IO_Helper::put_elem_cmap(), libMesh::Nemesis_IO_Helper::put_elem_map(), libMesh::Nemesis_IO_Helper::put_loadbal_param(), libMesh::Nemesis_IO_Helper::put_node_cmap(), libMesh::Nemesis_IO_Helper::put_node_map(), libMesh::Nemesis_IO::read(), libMesh::CheckpointIO::read(), libMesh::XdrIO::read(), libMesh::UnstructuredMesh::read(), libMesh::CheckpointIO::read_connectivity(), libMesh::ExodusII_IO_Helper::read_elem_num_map(), libMesh::System::read_header(), libMesh::System::read_legacy_data(), libMesh::ExodusII_IO_Helper::read_node_num_map(), libMesh::System::read_parallel_data(), libMesh::System::read_SCALAR_dofs(), libMesh::XdrIO::read_serialized_bc_names(), libMesh::XdrIO::read_serialized_bcs(), libMesh::System::read_serialized_blocked_dof_objects(), libMesh::XdrIO::read_serialized_connectivity(), libMesh::System::read_serialized_data(), libMesh::XdrIO::read_serialized_nodes(), libMesh::XdrIO::read_serialized_nodesets(), libMesh::XdrIO::read_serialized_subdomain_names(), libMesh::System::read_serialized_vector(), libMesh::System::read_serialized_vectors(), libMesh::MeshData::read_xdr(), libMesh::Partitioner::set_node_processor_ids(), libMesh::DofMap::set_nonlocal_dof_objects(), libMesh::LaplaceMeshSmoother::smooth(), libMesh::BoundaryInfo::sync(), libMesh::MeshTools::total_weight(), libMesh::ParallelMesh::update_parallel_id_counts(), libMesh::MeshTools::weight(), libMesh::ExodusII_IO::write(), libMesh::CheckpointIO::write(), libMesh::XdrIO::write(), libMesh::UnstructuredMesh::write(), libMesh::EquationSystems::write(), libMesh::GMVIO::write_discontinuous_gmv(), libMesh::ExodusII_IO::write_element_data(), libMesh::ExodusII_IO_Helper::write_element_values(), libMesh::ExodusII_IO_Helper::write_elements(), libMesh::ExodusII_IO::write_global_data(), libMesh::ExodusII_IO_Helper::write_global_values(), libMesh::System::write_header(), libMesh::ExodusII_IO::write_information_records(), libMesh::ExodusII_IO_Helper::write_information_records(), libMesh::ExodusII_IO_Helper::write_nodal_coordinates(), libMesh::UCDIO::write_nodal_data(), libMesh::ExodusII_IO::write_nodal_data(), libMesh::ExodusII_IO::write_nodal_data_discontinuous(), libMesh::ExodusII_IO_Helper::write_nodal_values(), libMesh::ExodusII_IO_Helper::write_nodesets(), libMesh::Nemesis_IO_Helper::write_nodesets(), libMesh::System::write_parallel_data(), libMesh::System::write_SCALAR_dofs(), libMesh::XdrIO::write_serialized_bc_names(), libMesh::XdrIO::write_serialized_bcs(), libMesh::System::write_serialized_blocked_dof_objects(), libMesh::XdrIO::write_serialized_connectivity(), libMesh::System::write_serialized_data(), libMesh::XdrIO::write_serialized_nodes(), libMesh::XdrIO::write_serialized_nodesets(), libMesh::XdrIO::write_serialized_subdomain_names(), libMesh::System::write_serialized_vector(), libMesh::System::write_serialized_vectors(), libMesh::ExodusII_IO_Helper::write_sidesets(), libMesh::Nemesis_IO_Helper::write_sidesets(), libMesh::ExodusII_IO::write_timestep(), and libMesh::ExodusII_IO_Helper::write_timestep()\&.
.PP
.nf
99   { return libmesh_cast_int<processor_id_type>(_communicator\&.rank()); }
.fi
.SS "void libMesh::DiffSolver::reinit ()\fC [virtual]\fP"
The reinitialization function\&. This method is used after changes in the mesh\&. 
.PP
Reimplemented in \fBlibMesh::NewtonSolver\fP, and \fBlibMesh::PetscDiffSolver\fP\&.
.PP
Definition at line 58 of file diff_solver\&.C\&.
.PP
References max_residual_norm, and max_solution_norm\&.
.PP
Referenced by libMesh::NewtonSolver::reinit()\&.
.PP
.nf
59 {
60   // Reset the max_step_size and max_residual_norm for a new mesh
61   max_solution_norm = 0\&.;
62   max_residual_norm = 0\&.;
63 }
.fi
.SS "virtual unsigned int libMesh::DiffSolver::solve ()\fC [pure virtual]\fP"
This method performs a solve\&. What occurs in this method will depend on the type of solver\&. See the subclasses for more details\&. 
.PP
Implemented in \fBlibMesh::PetscDiffSolver\fP, and \fBlibMesh::NewtonSolver\fP\&.
.SS "unsigned int libMesh::DiffSolver::solve_result ()\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
the value of the SolveResult from the last solve\&. 
.RE
.PP

.PP
Definition at line 130 of file diff_solver\&.h\&.
.PP
References _solve_result\&.
.PP
.nf
130 { return _solve_result; }
.fi
.SS "const \fBsys_type\fP& libMesh::DiffSolver::system () const\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
a constant reference to the system we are solving\&. 
.RE
.PP

.PP
Definition at line 135 of file diff_solver\&.h\&.
.PP
References _system\&.
.PP
Referenced by libMesh::__libmesh_petsc_diff_solver_residual()\&.
.PP
.nf
135 { return _system; }
.fi
.SS "\fBsys_type\fP& libMesh::DiffSolver::system ()\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
a writeable reference to the system we are solving\&. 
.RE
.PP

.PP
Definition at line 140 of file diff_solver\&.h\&.
.PP
References _system\&.
.PP
.nf
140 { return _system; }
.fi
.SS "unsigned int libMesh::DiffSolver::total_inner_iterations ()\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
the number of 'inner' (e\&.g\&. Krylov) iterations required by the last solve\&. 
.RE
.PP

.PP
Definition at line 125 of file diff_solver\&.h\&.
.PP
References _inner_iterations\&.
.PP
.nf
125 { return _inner_iterations; }
.fi
.SS "unsigned int libMesh::DiffSolver::total_outer_iterations ()\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
the number of 'outer' (e\&.g\&. quasi-Newton) iterations required by the last solve\&. 
.RE
.PP

.PP
Definition at line 119 of file diff_solver\&.h\&.
.PP
References _outer_iterations\&.
.PP
.nf
119 { return _outer_iterations; }
.fi
.SH "Member Data Documentation"
.PP 
.SS "const \fBParallel::Communicator\fP& libMesh::ParallelObject::_communicator\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 104 of file parallel_object\&.h\&.
.PP
Referenced by libMesh::EquationSystems::build_solution_vector(), libMesh::ParallelObject::comm(), libMesh::EquationSystems::get_solution(), libMesh::ParallelObject::n_processors(), libMesh::ParallelObject::operator=(), and libMesh::ParallelObject::processor_id()\&.
.SS "\fBReferenceCounter::Counts\fP libMesh::ReferenceCounter::_counts\fC [static]\fP, \fC [protected]\fP, \fC [inherited]\fP"
Actually holds the data\&. 
.PP
Definition at line 118 of file reference_counter\&.h\&.
.PP
Referenced by libMesh::ReferenceCounter::get_info(), libMesh::ReferenceCounter::increment_constructor_count(), and libMesh::ReferenceCounter::increment_destructor_count()\&.
.SS "bool libMesh::ReferenceCounter::_enable_print_counter = true\fC [static]\fP, \fC [protected]\fP, \fC [inherited]\fP"
Flag to control whether reference count information is printed when print_info is called\&. 
.PP
Definition at line 137 of file reference_counter\&.h\&.
.PP
Referenced by libMesh::ReferenceCounter::disable_print_counter_info(), libMesh::ReferenceCounter::enable_print_counter_info(), and libMesh::ReferenceCounter::print_info()\&.
.SS "unsigned int libMesh::DiffSolver::_inner_iterations\fC [protected]\fP"
The number of inner iterations used by the last solve 
.PP
Definition at line 305 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::NewtonSolver::solve(), and total_inner_iterations()\&.
.SS "\fBThreads::spin_mutex\fP libMesh::ReferenceCounter::_mutex\fC [static]\fP, \fC [protected]\fP, \fC [inherited]\fP"
Mutual exclusion object to enable thread-safe reference counting\&. 
.PP
Definition at line 131 of file reference_counter\&.h\&.
.SS "\fBThreads::atomic\fP< unsigned int > libMesh::ReferenceCounter::_n_objects\fC [static]\fP, \fC [protected]\fP, \fC [inherited]\fP"
The number of objects\&. Print the reference count information when the number returns to 0\&. 
.PP
Definition at line 126 of file reference_counter\&.h\&.
.PP
Referenced by libMesh::ReferenceCounter::n_objects(), libMesh::ReferenceCounter::ReferenceCounter(), and libMesh::ReferenceCounter::~ReferenceCounter()\&.
.SS "unsigned int libMesh::DiffSolver::_outer_iterations\fC [protected]\fP"
The number of outer iterations used by the last solve 
.PP
Definition at line 300 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::NewtonSolver::line_search(), libMesh::NewtonSolver::solve(), and total_outer_iterations()\&.
.SS "unsigned int libMesh::DiffSolver::_solve_result\fC [protected]\fP"
Initialized to zero\&. solve_result is typically set internally in the \fBsolve()\fP function before it returns\&. When non-zero, solve_result tells the result of the latest solve\&. See enum definition for description\&. 
.PP
Definition at line 318 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::NewtonSolver::line_search(), libMesh::NewtonSolver::solve(), solve_result(), and libMesh::NewtonSolver::test_convergence()\&.
.SS "\fBsys_type\fP& libMesh::DiffSolver::_system\fC [protected]\fP"
A reference to the system we are solving\&. 
.PP
Definition at line 310 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::NewtonSolver::init(), libMesh::NewtonSolver::line_search(), libMesh::NewtonSolver::reinit(), libMesh::NewtonSolver::solve(), and system()\&.
.SS "\fBReal\fP libMesh::DiffSolver::absolute_residual_tolerance"
The \fBDiffSolver\fP should exit after the residual is reduced to either less than absolute_residual_tolerance or less than relative_residual_tolerance times the initial residual\&.
.PP
Users should increase any of these tolerances that they want to use for a stopping condition\&. 
.PP
Definition at line 189 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::NewtonSolver::print_convergence(), and libMesh::NewtonSolver::test_convergence()\&.
.SS "\fBReal\fP libMesh::DiffSolver::absolute_step_tolerance"
The \fBDiffSolver\fP should exit after the full nonlinear step norm is reduced to either less than absolute_step_tolerance or less than relative_step_tolerance times the largest nonlinear solution which has been seen so far\&.
.PP
Users should increase any of these tolerances that they want to use for a stopping condition\&. 
.PP
Definition at line 201 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::NewtonSolver::print_convergence(), and libMesh::NewtonSolver::test_convergence()\&.
.SS "bool libMesh::DiffSolver::continue_after_backtrack_failure"
Defaults to false, telling the \fBDiffSolver\fP to throw a libmesh_error() when the backtracking scheme fails to find a descent direction\&. 
.PP
Definition at line 178 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::NewtonSolver::line_search()\&.
.SS "bool libMesh::DiffSolver::continue_after_max_iterations"
Defaults to true, telling the \fBDiffSolver\fP to continue rather than exit when a solve has reached its maximum number of nonlinear iterations\&. 
.PP
Definition at line 172 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::NewtonSolver::solve()\&.
.SS "\fBReal\fP libMesh::DiffSolver::initial_linear_tolerance"
Any required linear solves will at first be done with this tolerance; the \fBDiffSolver\fP may tighten the tolerance for later solves\&. 
.PP
Definition at line 208 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::NewtonSolver::solve()\&.
.SS "\fBAutoPtr\fP<\fBLinearSolutionMonitor\fP> libMesh::DiffSolver::linear_solution_monitor"
Pointer to functor which is called right after each linear solve 
.PP
Definition at line 280 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::__libmesh_petsc_diff_solver_monitor(), and libMesh::NewtonSolver::solve()\&.
.SS "unsigned int libMesh::DiffSolver::max_linear_iterations"
Each linear solver step should exit after \fCmax_linear_iterations\fP is exceeded\&. 
.PP
Definition at line 146 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::ContinuationSystem::continuation_solve(), libMesh::NewtonSolver::solve(), and libMesh::ContinuationSystem::solve_tangent()\&.
.SS "unsigned int libMesh::DiffSolver::max_nonlinear_iterations"
The \fBDiffSolver\fP should exit in failure if \fCmax_nonlinear_iterations\fP is exceeded and \fCcontinue_after_max_iterations\fP is false, or should end the nonlinear solve if \fCmax_nonlinear_iterations\fP is exceeded and \fCcontinue_after_max_iterations\fP is true\&. 
.PP
Definition at line 154 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::ContinuationSystem::continuation_solve(), libMesh::NewtonSolver::solve(), and libMesh::ContinuationSystem::update_solution()\&.
.SS "\fBReal\fP libMesh::DiffSolver::max_residual_norm\fC [protected]\fP"
The largest nonlinear residual which the \fBDiffSolver\fP has yet seen will be stored here, to be used for stopping criteria based on relative_residual_tolerance 
.PP
Definition at line 295 of file diff_solver\&.h\&.
.PP
Referenced by init(), libMesh::NewtonSolver::print_convergence(), reinit(), libMesh::NewtonSolver::solve(), and libMesh::NewtonSolver::test_convergence()\&.
.SS "\fBReal\fP libMesh::DiffSolver::max_solution_norm\fC [protected]\fP"
The largest solution norm which the \fBDiffSolver\fP has yet seen will be stored here, to be used for stopping criteria based on relative_step_tolerance 
.PP
Definition at line 288 of file diff_solver\&.h\&.
.PP
Referenced by init(), libMesh::NewtonSolver::print_convergence(), reinit(), libMesh::NewtonSolver::solve(), and libMesh::NewtonSolver::test_convergence()\&.
.SS "\fBReal\fP libMesh::DiffSolver::minimum_linear_tolerance"
The tolerance for linear solves is kept above this minimum 
.PP
Definition at line 213 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::NewtonSolver::solve()\&.
.SS "bool libMesh::DiffSolver::quiet"
The \fBDiffSolver\fP should not print anything to \fBlibMesh::out\fP unless quiet is set to false; default is true\&. 
.PP
Definition at line 160 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::NewtonSolver::line_search(), and libMesh::NewtonSolver::solve()\&.
.SS "\fBReal\fP libMesh::DiffSolver::relative_residual_tolerance"

.PP
Definition at line 190 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::NewtonSolver::print_convergence(), and libMesh::NewtonSolver::test_convergence()\&.
.SS "\fBReal\fP libMesh::DiffSolver::relative_step_tolerance"

.PP
Definition at line 202 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::NewtonSolver::print_convergence(), and libMesh::NewtonSolver::test_convergence()\&.
.SS "bool libMesh::DiffSolver::verbose"
The \fBDiffSolver\fP may print a lot more to \fBlibMesh::out\fP if verbose is set to true; default is false\&. 
.PP
Definition at line 166 of file diff_solver\&.h\&.
.PP
Referenced by libMesh::__libmesh_petsc_diff_solver_monitor(), libMesh::__libmesh_petsc_diff_solver_residual(), libMesh::NewtonSolver::line_search(), libMesh::NewtonSolver::print_convergence(), and libMesh::NewtonSolver::solve()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libMesh from the source code\&.
