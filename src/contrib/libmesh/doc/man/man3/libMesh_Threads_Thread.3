.TH "libMesh::Threads::Thread" 3 "Tue May 6 2014" "libMesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libMesh::Threads::Thread \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <threads\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename Callable > \fBThread\fP (Callable f)"
.br
.ti -1c
.RI "void \fBjoin\fP ()"
.br
.ti -1c
.RI "bool \fBjoinable\fP () const "
.br
.in -1c
.SH "Detailed Description"
.PP 
Simple compatibility class for std::thread 'concurrent' execution\&. Not at all concurrent, but provides a compatible interface\&. 
.PP
Definition at line 129 of file threads\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename Callable > libMesh::Threads::Thread::Thread (Callablef)\fC [inline]\fP"
Constructor\&. Takes a callable function object and executes it\&. Our wrapper class actually blocks execution until the thread is complete\&. 
.PP
Definition at line 138 of file threads\&.h\&.
.PP
.nf
138 { f(); }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void libMesh::Threads::Thread::join ()\fC [inline]\fP"
Join is a no-op, since the constructor blocked until completion\&. 
.PP
Definition at line 143 of file threads\&.h\&.
.PP
Referenced by libMesh::System::read_serialized_blocked_dof_objects()\&.
.PP
.nf
143 {}
.fi
.SS "bool libMesh::Threads::Thread::joinable () const\fC [inline]\fP"
Always joinable\&. 
.PP
Definition at line 148 of file threads\&.h\&.
.PP
.nf
148 { return true; }
.fi


.SH "Author"
.PP 
Generated automatically by Doxygen for libMesh from the source code\&.
