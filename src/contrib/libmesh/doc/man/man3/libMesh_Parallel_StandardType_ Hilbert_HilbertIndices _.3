.TH "libMesh::Parallel::StandardType< Hilbert::HilbertIndices >" 3 "Tue May 6 2014" "libMesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libMesh::Parallel::StandardType< Hilbert::HilbertIndices > \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <parallel_hilbert\&.h>\fP
.PP
Inherits \fBlibMesh::Parallel::DataType\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBStandardType\fP (const Hilbert::HilbertIndices *=NULL)"
.br
.ti -1c
.RI "\fBoperator const data_type &\fP () const "
.br
.ti -1c
.RI "\fBoperator data_type &\fP ()"
.br
.ti -1c
.RI "void \fBcommit\fP ()"
.br
.ti -1c
.RI "void \fBfree\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBdata_type\fP \fB_datatype\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<>class libMesh::Parallel::StandardType< Hilbert::HilbertIndices >"

.PP
Definition at line 44 of file parallel_hilbert\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "\fBlibMesh::Parallel::StandardType\fP< Hilbert::HilbertIndices >::\fBStandardType\fP (const Hilbert::HilbertIndices * = \fCNULL\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Definition at line 48 of file parallel_hilbert\&.h\&.
.PP
References libMesh::Parallel::DataType::_datatype, libMesh::libMeshPrivateData::_is_initialized, and libMesh::Parallel::DataType::DataType()\&.
.PP
.nf
48                                                    {
49     // _static_type never gets freed, but it only gets committed once
50     // so it's not a *huge* memory leak\&.\&.\&.
51     static DataType _static_type;
52     static bool _is_initialized = false;
53     if (!_is_initialized)
54       {
55         _static_type = DataType(Parallel::StandardType<Hilbert::inttype>(), 3);
56         _is_initialized = true;
57       }
58     _datatype = _static_type;
59   }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void libMesh::Parallel::DataType::commit ()\fC [inline]\fP, \fC [inherited]\fP"

.PP
Definition at line 277 of file parallel\&.h\&.
.PP
References libMesh::Parallel::DataType::_datatype\&.
.PP
Referenced by libMesh::Parallel::DataType::DataType()\&.
.PP
.nf
278   {
279 #ifdef LIBMESH_HAVE_MPI
280     MPI_Type_commit (&_datatype);
281 #endif
282   }
.fi
.SS "void libMesh::Parallel::DataType::free ()\fC [inline]\fP, \fC [inherited]\fP"

.PP
Definition at line 284 of file parallel\&.h\&.
.PP
References libMesh::Parallel::DataType::_datatype\&.
.PP
Referenced by libMesh::Parallel::StandardType< std::pair< T1, T2 > >::~StandardType(), libMesh::Parallel::StandardType< std::complex< T > >::~StandardType(), libMesh::Parallel::StandardType< TypeTensor< T > >::~StandardType(), and libMesh::Parallel::StandardType< TensorValue< T > >::~StandardType()\&.
.PP
.nf
285   {
286 #ifdef LIBMESH_HAVE_MPI
287     MPI_Type_free (&_datatype);
288 #endif
289   }
.fi
.SS "libMesh::Parallel::DataType::operator const \fBdata_type\fP & () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
Definition at line 265 of file parallel\&.h\&.
.PP
References libMesh::Parallel::DataType::_datatype\&.
.PP
.nf
266   { return _datatype; }
.fi
.SS "libMesh::Parallel::DataType::operator \fBdata_type\fP & ()\fC [inline]\fP, \fC [inherited]\fP"

.PP
Definition at line 268 of file parallel\&.h\&.
.PP
References libMesh::Parallel::DataType::_datatype\&.
.PP
.nf
269   { return _datatype; }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBdata_type\fP libMesh::Parallel::DataType::_datatype\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 293 of file parallel\&.h\&.
.PP
Referenced by libMesh::Parallel::DataType::commit(), libMesh::Parallel::DataType::DataType(), libMesh::Parallel::DataType::free(), libMesh::Parallel::DataType::operator const data_type &(), libMesh::Parallel::DataType::operator data_type &(), libMesh::Parallel::DataType::operator=(), StandardType(), libMesh::Parallel::StandardType< TypeVector< T > >::StandardType(), libMesh::Parallel::StandardType< std::pair< T1, T2 > >::StandardType(), libMesh::Parallel::StandardType< VectorValue< T > >::StandardType(), and libMesh::Parallel::StandardType< Point >::StandardType()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libMesh from the source code\&.
