.TH "libMesh::InverseDistanceInterpolation< KDDim >" 3 "Tue May 6 2014" "libMesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libMesh::InverseDistanceInterpolation< KDDim > \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <meshfree_interpolation\&.h>\fP
.PP
Inherits \fBlibMesh::MeshfreeInterpolation\fP\&.
.PP
Inherited by \fBlibMesh::RadialBasisInterpolation< KDDim, RBF >\fP\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBPointListAdaptor\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "enum \fBParallelizationStrategy\fP { \fBSYNC_SOURCES\fP = 0, \fBINVALID_STRATEGY\fP }"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBInverseDistanceInterpolation\fP (const \fBlibMesh::Parallel::Communicator\fP &\fBcomm\fP, const unsigned int n_interp_pts=8, const \fBReal\fP power=2)"
.br
.ti -1c
.RI "virtual void \fBclear\fP ()"
.br
.ti -1c
.RI "virtual void \fBinterpolate_field_data\fP (const std::vector< std::string > &field_names, const std::vector< \fBPoint\fP > &tgt_pts, std::vector< \fBNumber\fP > &tgt_vals) const "
.br
.ti -1c
.RI "void \fBprint_info\fP (std::ostream &os=\fBlibMesh::out\fP) const "
.br
.ti -1c
.RI "unsigned int \fBn_field_variables\fP () const "
.br
.ti -1c
.RI "void \fBset_field_variables\fP (const std::vector< std::string > &names)"
.br
.ti -1c
.RI "const std::vector< std::string > & \fBfield_variables\fP () const "
.br
.ti -1c
.RI "std::vector< \fBPoint\fP > & \fBget_source_points\fP ()"
.br
.ti -1c
.RI "std::vector< \fBNumber\fP > & \fBget_source_vals\fP ()"
.br
.ti -1c
.RI "virtual void \fBadd_field_data\fP (const std::vector< std::string > &field_names, const std::vector< \fBPoint\fP > &pts, const std::vector< \fBNumber\fP > &vals)"
.br
.ti -1c
.RI "virtual void \fBprepare_for_use\fP ()"
.br
.ti -1c
.RI "const \fBParallel::Communicator\fP & \fBcomm\fP () const "
.br
.ti -1c
.RI "\fBprocessor_id_type\fP \fBn_processors\fP () const "
.br
.ti -1c
.RI "\fBprocessor_id_type\fP \fBprocessor_id\fP () const "
.br
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "typedef 
.br
nanoflann::KDTreeSingleIndexAdaptor
.br
< nanoflann::L2_Simple_Adaptor
.br
< \fBReal\fP, \fBPointListAdaptor\fP
.br
< KDDim > >, \fBPointListAdaptor\fP
.br
< KDDim >, KDDim > \fBkd_tree_t\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "virtual void \fBconstruct_kd_tree\fP ()"
.br
.ti -1c
.RI "virtual void \fBinterpolate\fP (const \fBPoint\fP &pt, const std::vector< size_t > &src_indices, const std::vector< \fBReal\fP > &src_dist_sqr, std::vector< \fBNumber\fP >::iterator &out_it) const "
.br
.ti -1c
.RI "virtual void \fBgather_remote_data\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBPointListAdaptor\fP< KDDim > \fB_point_list_adaptor\fP"
.br
.ti -1c
.RI "\fBAutoPtr\fP< \fBkd_tree_t\fP > \fB_kd_tree\fP"
.br
.ti -1c
.RI "const \fBReal\fP \fB_half_power\fP"
.br
.ti -1c
.RI "const unsigned int \fB_n_interp_pts\fP"
.br
.ti -1c
.RI "std::vector< \fBNumber\fP > \fB_vals\fP"
.br
.ti -1c
.RI "\fBParallelizationStrategy\fP \fB_parallelization_strategy\fP"
.br
.ti -1c
.RI "std::vector< std::string > \fB_names\fP"
.br
.ti -1c
.RI "std::vector< \fBPoint\fP > \fB_src_pts\fP"
.br
.ti -1c
.RI "std::vector< \fBNumber\fP > \fB_src_vals\fP"
.br
.ti -1c
.RI "const \fBParallel::Communicator\fP & \fB_communicator\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<unsigned int KDDim>class libMesh::InverseDistanceInterpolation< KDDim >"
Inverse distance interplation\&. 
.PP
Definition at line 174 of file meshfree_interpolation\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "template<unsigned int KDDim> typedef nanoflann::KDTreeSingleIndexAdaptor<nanoflann::L2_Simple_Adaptor<\fBReal\fP, \fBPointListAdaptor\fP<KDDim> >, \fBPointListAdaptor\fP<KDDim>, KDDim> \fBlibMesh::InverseDistanceInterpolation\fP< KDDim >::\fBkd_tree_t\fP\fC [protected]\fP"

.PP
Definition at line 289 of file meshfree_interpolation\&.h\&.
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBlibMesh::MeshfreeInterpolation::ParallelizationStrategy\fP\fC [inherited]\fP"
'ParallelizationStrategy' to employ\&.
.PP
SYNC_SOURCES assumes that the data added on each processor are independent and relatively small\&. Calling the \fC\fBprepare_for_use()\fP\fP method with this \fCParallelizationStrategy\fP will copy remote data from other processors, so all interpolation can be performed locally\&.
.PP
Other \fCParallelizationStrategy\fP techniques will be implemented as needed\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fISYNC_SOURCES \fP\fP
.TP
\fB\fIINVALID_STRATEGY \fP\fP
.PP
Definition at line 67 of file meshfree_interpolation\&.h\&.
.PP
.nf
67                                { SYNC_SOURCES     = 0,
68                                  INVALID_STRATEGY};
.fi
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<unsigned int KDDim> \fBlibMesh::InverseDistanceInterpolation\fP< KDDim >::\fBInverseDistanceInterpolation\fP (const \fBlibMesh::Parallel::Communicator\fP &comm, const unsigned intn_interp_pts = \fC8\fP, const \fBReal\fPpower = \fC2\fP)\fC [inline]\fP"
Constructor\&. Takes the inverse distance power, which defaults to 2\&. 
.PP
Definition at line 323 of file meshfree_interpolation\&.h\&.
.PP
.nf
325                                                                      :
326     MeshfreeInterpolation(comm),
327 #if LIBMESH_HAVE_NANOFLANN
328     _point_list_adaptor(_src_pts),
329 #endif
330     _half_power(power/2\&.0),
331     _n_interp_pts(n_interp_pts)
332   {}
.fi
.SH "Member Function Documentation"
.PP 
.SS "virtual void libMesh::MeshfreeInterpolation::add_field_data (const std::vector< std::string > &field_names, const std::vector< \fBPoint\fP > &pts, const std::vector< \fBNumber\fP > &vals)\fC [virtual]\fP, \fC [inherited]\fP"
Sets source data at specified points\&. 
.SS "template<unsigned int KDDim> virtual void \fBlibMesh::InverseDistanceInterpolation\fP< KDDim >::clear ()\fC [virtual]\fP"
Clears all internal data structures and restores to a pristine state\&. 
.PP
Reimplemented from \fBlibMesh::MeshfreeInterpolation\fP\&.
.PP
Reimplemented in \fBlibMesh::RadialBasisInterpolation< KDDim, RBF >\fP\&.
.SS "const \fBParallel::Communicator\fP& libMesh::ParallelObject::comm () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
\fBReturns:\fP
.RS 4
a reference to the \fC\fBParallel::Communicator\fP\fP object used by this mesh\&. 
.RE
.PP

.PP
Definition at line 86 of file parallel_object\&.h\&.
.PP
References libMesh::ParallelObject::_communicator\&.
.PP
Referenced by libMesh::__libmesh_petsc_diff_solver_monitor(), libMesh::__libmesh_petsc_diff_solver_residual(), libMesh::__libmesh_petsc_snes_residual(), libMesh::MeshRefinement::_coarsen_elements(), libMesh::ExactSolution::_compute_error(), libMesh::MetisPartitioner::_do_partition(), libMesh::ParmetisPartitioner::_do_repartition(), libMesh::UniformRefinementEstimator::_estimate_error(), libMesh::SlepcEigenSolver< T >::_petsc_shell_matrix_get_diagonal(), libMesh::PetscLinearSolver< T >::_petsc_shell_matrix_get_diagonal(), libMesh::SlepcEigenSolver< T >::_petsc_shell_matrix_mult(), libMesh::PetscLinearSolver< T >::_petsc_shell_matrix_mult(), libMesh::PetscLinearSolver< T >::_petsc_shell_matrix_mult_add(), libMesh::EquationSystems::_read_impl(), libMesh::MeshRefinement::_refine_elements(), libMesh::ParallelMesh::add_elem(), libMesh::ImplicitSystem::add_matrix(), libMesh::ParallelMesh::add_node(), libMesh::System::add_vector(), libMesh::UnstructuredMesh::all_second_order(), libMesh::LaplaceMeshSmoother::allgather_graph(), libMesh::FEMSystem::assemble_qoi(), libMesh::MeshCommunication::assign_global_indices(), libMesh::ParmetisPartitioner::assign_partitioning(), libMesh::DofMap::attach_matrix(), libMesh::MeshTools::bounding_box(), libMesh::System::calculate_norm(), libMesh::MeshRefinement::coarsen_elements(), libMesh::Nemesis_IO_Helper::compute_num_global_elem_blocks(), libMesh::Nemesis_IO_Helper::compute_num_global_nodesets(), libMesh::Nemesis_IO_Helper::compute_num_global_sidesets(), libMesh::Problem_Interface::computeF(), libMesh::Problem_Interface::computeJacobian(), libMesh::Problem_Interface::computePreconditioner(), libMesh::MeshTools::correct_node_proc_ids(), libMesh::MeshCommunication::delete_remote_elements(), libMesh::DofMap::distribute_dofs(), DMlibMeshFunction(), DMLibMeshSetSystem(), DMVariableBounds_libMesh(), libMesh::MeshRefinement::eliminate_unrefined_patches(), libMesh::WeightedPatchRecoveryErrorEstimator::estimate_error(), libMesh::PatchRecoveryErrorEstimator::estimate_error(), libMesh::JumpErrorEstimator::estimate_error(), libMesh::AdjointRefinementEstimator::estimate_error(), libMesh::MeshRefinement::flag_elements_by_elem_fraction(), libMesh::MeshRefinement::flag_elements_by_error_fraction(), libMesh::MeshRefinement::flag_elements_by_nelem_target(), libMesh::for(), libMesh::CondensedEigenSystem::get_eigenpair(), libMesh::ImplicitSystem::get_linear_solver(), libMesh::LocationMap< T >::init(), libMesh::TimeSolver::init(), libMesh::SystemSubsetBySubdomain::init(), libMesh::EigenSystem::init_data(), libMesh::EigenSystem::init_matrices(), libMesh::ParmetisPartitioner::initialize(), libMesh::MeshTools::libmesh_assert_valid_dof_ids(), libMesh::ParallelMesh::libmesh_assert_valid_parallel_flags(), libMesh::MeshTools::libmesh_assert_valid_procids< Elem >(), libMesh::MeshTools::libmesh_assert_valid_procids< Node >(), libMesh::MeshTools::libmesh_assert_valid_refinement_flags(), libMesh::MeshRefinement::limit_level_mismatch_at_edge(), libMesh::MeshRefinement::limit_level_mismatch_at_node(), libMesh::MeshRefinement::make_coarsening_compatible(), libMesh::MeshCommunication::make_elems_parallel_consistent(), libMesh::MeshRefinement::make_flags_parallel_consistent(), libMesh::MeshCommunication::make_node_ids_parallel_consistent(), libMesh::MeshCommunication::make_node_proc_ids_parallel_consistent(), libMesh::MeshCommunication::make_nodes_parallel_consistent(), libMesh::MeshRefinement::make_refinement_compatible(), libMesh::FEMSystem::mesh_position_set(), libMesh::MeshSerializer::MeshSerializer(), libMesh::ParallelMesh::n_active_elem(), libMesh::MeshTools::n_active_levels(), libMesh::BoundaryInfo::n_boundary_conds(), libMesh::BoundaryInfo::n_edge_conds(), libMesh::CondensedEigenSystem::n_global_non_condensed_dofs(), libMesh::MeshTools::n_levels(), libMesh::BoundaryInfo::n_nodeset_conds(), libMesh::MeshTools::n_p_levels(), libMesh::ParallelMesh::parallel_max_elem_id(), libMesh::ParallelMesh::parallel_max_node_id(), libMesh::ParallelMesh::parallel_n_elem(), libMesh::ParallelMesh::parallel_n_nodes(), libMesh::Partitioner::partition(), libMesh::Partitioner::partition_unpartitioned_elements(), libMesh::petsc_auto_fieldsplit(), libMesh::System::point_gradient(), libMesh::System::point_hessian(), libMesh::System::point_value(), libMesh::MeshBase::prepare_for_use(), libMesh::System::project_vector(), libMesh::Nemesis_IO::read(), libMesh::XdrIO::read(), libMesh::System::read_header(), libMesh::System::read_legacy_data(), libMesh::System::read_SCALAR_dofs(), libMesh::XdrIO::read_serialized_bc_names(), libMesh::XdrIO::read_serialized_bcs(), libMesh::System::read_serialized_blocked_dof_objects(), libMesh::XdrIO::read_serialized_connectivity(), libMesh::XdrIO::read_serialized_nodes(), libMesh::XdrIO::read_serialized_nodesets(), libMesh::XdrIO::read_serialized_subdomain_names(), libMesh::System::read_serialized_vector(), libMesh::MeshBase::recalculate_n_partitions(), libMesh::MeshRefinement::refine_and_coarsen_elements(), libMesh::MeshRefinement::refine_elements(), libMesh::Partitioner::set_node_processor_ids(), libMesh::DofMap::set_nonlocal_dof_objects(), libMesh::LaplaceMeshSmoother::smooth(), libMesh::MeshBase::subdomain_ids(), libMesh::BoundaryInfo::sync(), libMesh::Parallel::sync_element_data_by_parent_id(), libMesh::MeshRefinement::test_level_one(), libMesh::MeshRefinement::test_unflagged(), libMesh::MeshTools::total_weight(), libMesh::CheckpointIO::write(), libMesh::XdrIO::write(), libMesh::UnstructuredMesh::write(), libMesh::LegacyXdrIO::write_mesh(), libMesh::System::write_SCALAR_dofs(), libMesh::XdrIO::write_serialized_bcs(), libMesh::System::write_serialized_blocked_dof_objects(), libMesh::XdrIO::write_serialized_connectivity(), libMesh::XdrIO::write_serialized_nodes(), libMesh::XdrIO::write_serialized_nodesets(), and libMesh::DivaIO::write_stream()\&.
.PP
.nf
87   { return _communicator; }
.fi
.SS "template<unsigned int KDDim> virtual void \fBlibMesh::InverseDistanceInterpolation\fP< KDDim >::construct_kd_tree ()\fC [protected]\fP, \fC [virtual]\fP"
Build & initialize the KD tree, if needed\&. 
.SS "const std::vector<std::string>& libMesh::MeshfreeInterpolation::field_variables () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
\fBReturns:\fP
.RS 4
the field variables as a read-only reference\&. 
.RE
.PP

.PP
Definition at line 112 of file meshfree_interpolation\&.h\&.
.PP
References libMesh::MeshfreeInterpolation::_names\&.
.PP
.nf
113   { return _names; }
.fi
.SS "virtual void libMesh::MeshfreeInterpolation::gather_remote_data ()\fC [protected]\fP, \fC [virtual]\fP, \fC [inherited]\fP"
Gathers source points and values that have been added on other processors\&. Note the user is responsible for adding points only once per processor if this method is called\&. No attempt is made to identify duplicate points\&.
.PP
This method is virtual so that it can be overwritten or extended as required in derived classes\&. 
.SS "std::vector<\fBPoint\fP>& libMesh::MeshfreeInterpolation::get_source_points ()\fC [inline]\fP, \fC [inherited]\fP"

.PP
\fBReturns:\fP
.RS 4
a writeable reference to the point list\&. 
.RE
.PP

.PP
Definition at line 118 of file meshfree_interpolation\&.h\&.
.PP
References libMesh::MeshfreeInterpolation::_src_pts\&.
.PP
.nf
119   { return _src_pts; }
.fi
.SS "std::vector<\fBNumber\fP>& libMesh::MeshfreeInterpolation::get_source_vals ()\fC [inline]\fP, \fC [inherited]\fP"

.PP
\fBReturns:\fP
.RS 4
a writeable reference to the point list\&. 
.RE
.PP

.PP
Definition at line 124 of file meshfree_interpolation\&.h\&.
.PP
References libMesh::MeshfreeInterpolation::_src_vals\&.
.PP
.nf
125   { return _src_vals; }
.fi
.SS "template<unsigned int KDDim> virtual void \fBlibMesh::InverseDistanceInterpolation\fP< KDDim >::interpolate (const \fBPoint\fP &pt, const std::vector< size_t > &src_indices, const std::vector< \fBReal\fP > &src_dist_sqr, std::vector< \fBNumber\fP >::iterator &out_it) const\fC [protected]\fP, \fC [virtual]\fP"
Performs inverse distance interpolation at the input point from the specified points\&. 
.SS "template<unsigned int KDDim> virtual void \fBlibMesh::InverseDistanceInterpolation\fP< KDDim >::interpolate_field_data (const std::vector< std::string > &field_names, const std::vector< \fBPoint\fP > &tgt_pts, std::vector< \fBNumber\fP > &tgt_vals) const\fC [virtual]\fP"
Interpolate source data at target points\&. Pure virtual, must be overriden in derived classes\&. 
.PP
Implements \fBlibMesh::MeshfreeInterpolation\fP\&.
.PP
Reimplemented in \fBlibMesh::RadialBasisInterpolation< KDDim, RBF >\fP\&.
.SS "unsigned int libMesh::MeshfreeInterpolation::n_field_variables () const\fC [inline]\fP, \fC [inherited]\fP"
The number of field variables\&. 
.PP
Definition at line 99 of file meshfree_interpolation\&.h\&.
.PP
References libMesh::MeshfreeInterpolation::_names\&.
.PP
.nf
100   { return libmesh_cast_int<unsigned int>(_names\&.size()); }
.fi
.SS "\fBprocessor_id_type\fP libMesh::ParallelObject::n_processors () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
\fBReturns:\fP
.RS 4
the number of processors in the group\&. 
.RE
.PP

.PP
Definition at line 92 of file parallel_object\&.h\&.
.PP
References libMesh::ParallelObject::_communicator, and libMesh::Parallel::Communicator::size()\&.
.PP
Referenced by libMesh::ParmetisPartitioner::_do_repartition(), libMesh::ParallelMesh::add_elem(), libMesh::ParallelMesh::add_node(), libMesh::LaplaceMeshSmoother::allgather_graph(), libMesh::ParmetisPartitioner::assign_partitioning(), libMesh::ParallelMesh::assign_unique_ids(), libMesh::AztecLinearSolver< T >::AztecLinearSolver(), libMesh::ParallelMesh::clear(), libMesh::Nemesis_IO_Helper::compute_border_node_ids(), libMesh::Nemesis_IO_Helper::construct_nemesis_filename(), libMesh::UnstructuredMesh::create_pid_mesh(), libMesh::DofMap::distribute_dofs(), libMesh::DofMap::distribute_local_dofs_node_major(), libMesh::DofMap::distribute_local_dofs_var_major(), libMesh::EnsightIO::EnsightIO(), libMesh::MeshBase::get_info(), libMesh::EquationSystems::init(), libMesh::SystemSubsetBySubdomain::init(), libMesh::ParmetisPartitioner::initialize(), libMesh::Nemesis_IO_Helper::initialize(), libMesh::MeshTools::libmesh_assert_valid_dof_ids(), libMesh::MeshTools::libmesh_assert_valid_procids< Elem >(), libMesh::MeshTools::libmesh_assert_valid_procids< Node >(), libMesh::MeshTools::libmesh_assert_valid_refinement_flags(), libMesh::DofMap::local_variable_indices(), libMesh::MeshBase::n_active_elem_on_proc(), libMesh::MeshBase::n_elem_on_proc(), libMesh::MeshBase::n_nodes_on_proc(), libMesh::Partitioner::partition(), libMesh::MeshBase::partition(), libMesh::Partitioner::partition_unpartitioned_elements(), libMesh::PetscLinearSolver< T >::PetscLinearSolver(), libMesh::System::point_gradient(), libMesh::System::point_hessian(), libMesh::System::point_value(), libMesh::MeshTools::processor_bounding_box(), libMesh::System::project_vector(), libMesh::Nemesis_IO::read(), libMesh::CheckpointIO::read(), libMesh::UnstructuredMesh::read(), libMesh::System::read_parallel_data(), libMesh::System::read_SCALAR_dofs(), libMesh::System::read_serialized_blocked_dof_objects(), libMesh::System::read_serialized_vector(), libMesh::Partitioner::repartition(), libMesh::Partitioner::set_node_processor_ids(), libMesh::DofMap::set_nonlocal_dof_objects(), libMesh::BoundaryInfo::sync(), libMesh::ParallelMesh::update_parallel_id_counts(), libMesh::CheckpointIO::write(), libMesh::GMVIO::write_binary(), libMesh::GMVIO::write_discontinuous_gmv(), libMesh::System::write_parallel_data(), libMesh::System::write_SCALAR_dofs(), libMesh::XdrIO::write_serialized_bcs(), libMesh::System::write_serialized_blocked_dof_objects(), libMesh::XdrIO::write_serialized_connectivity(), libMesh::XdrIO::write_serialized_nodes(), and libMesh::XdrIO::write_serialized_nodesets()\&.
.PP
.nf
93   { return libmesh_cast_int<processor_id_type>(_communicator\&.size()); }
.fi
.SS "virtual void libMesh::MeshfreeInterpolation::prepare_for_use ()\fC [virtual]\fP, \fC [inherited]\fP"
Prepares data structures for use\&.
.PP
This method is virtual so that it can be overwritten or extended as required in derived classes\&. 
.PP
Reimplemented in \fBlibMesh::RadialBasisInterpolation< KDDim, RBF >\fP\&.
.SS "void libMesh::MeshfreeInterpolation::print_info (std::ostream &os = \fC\fBlibMesh::out\fP\fP) const\fC [inherited]\fP"
Prints information about this object, by default to \fBlibMesh::out\fP\&. 
.SS "\fBprocessor_id_type\fP libMesh::ParallelObject::processor_id () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
\fBReturns:\fP
.RS 4
the rank of this processor in the group\&. 
.RE
.PP

.PP
Definition at line 98 of file parallel_object\&.h\&.
.PP
References libMesh::ParallelObject::_communicator, and libMesh::Parallel::Communicator::rank()\&.
.PP
Referenced by libMesh::MetisPartitioner::_do_partition(), libMesh::EquationSystems::_read_impl(), libMesh::SerialMesh::active_local_elements_begin(), libMesh::ParallelMesh::active_local_elements_begin(), libMesh::SerialMesh::active_local_elements_end(), libMesh::ParallelMesh::active_local_elements_end(), libMesh::SerialMesh::active_local_subdomain_elements_begin(), libMesh::ParallelMesh::active_local_subdomain_elements_begin(), libMesh::SerialMesh::active_local_subdomain_elements_end(), libMesh::ParallelMesh::active_local_subdomain_elements_end(), libMesh::SerialMesh::active_not_local_elements_begin(), libMesh::ParallelMesh::active_not_local_elements_begin(), libMesh::SerialMesh::active_not_local_elements_end(), libMesh::ParallelMesh::active_not_local_elements_end(), libMesh::ParallelMesh::add_elem(), libMesh::DofMap::add_neighbors_to_send_list(), libMesh::ParallelMesh::add_node(), libMesh::UnstructuredMesh::all_second_order(), libMesh::ParmetisPartitioner::assign_partitioning(), libMesh::ParallelMesh::assign_unique_ids(), libMesh::EquationSystems::build_discontinuous_solution_vector(), libMesh::Nemesis_IO_Helper::build_element_and_node_maps(), libMesh::ParmetisPartitioner::build_graph(), libMesh::InfElemBuilder::build_inf_elem(), libMesh::DofMap::build_sparsity(), libMesh::ParallelMesh::clear(), libMesh::ExodusII_IO_Helper::close(), libMesh::Nemesis_IO_Helper::compute_border_node_ids(), libMesh::Nemesis_IO_Helper::compute_communication_map_parameters(), libMesh::Nemesis_IO_Helper::compute_internal_and_border_elems_and_internal_nodes(), libMesh::Nemesis_IO_Helper::compute_node_communication_maps(), libMesh::Nemesis_IO_Helper::compute_num_global_elem_blocks(), libMesh::Nemesis_IO_Helper::compute_num_global_nodesets(), libMesh::Nemesis_IO_Helper::compute_num_global_sidesets(), libMesh::Nemesis_IO_Helper::construct_nemesis_filename(), libMesh::ExodusII_IO_Helper::create(), libMesh::DofMap::distribute_dofs(), libMesh::DofMap::distribute_local_dofs_node_major(), libMesh::DofMap::distribute_local_dofs_var_major(), libMesh::DofMap::end_dof(), libMesh::DofMap::end_old_dof(), libMesh::EnsightIO::EnsightIO(), libMesh::UnstructuredMesh::find_neighbors(), libMesh::DofMap::first_dof(), libMesh::DofMap::first_old_dof(), libMesh::Nemesis_IO_Helper::get_cmap_params(), libMesh::Nemesis_IO_Helper::get_eb_info_global(), libMesh::Nemesis_IO_Helper::get_elem_cmap(), libMesh::Nemesis_IO_Helper::get_elem_map(), libMesh::MeshBase::get_info(), libMesh::Nemesis_IO_Helper::get_init_global(), libMesh::Nemesis_IO_Helper::get_init_info(), libMesh::Nemesis_IO_Helper::get_loadbal_param(), libMesh::Nemesis_IO_Helper::get_node_cmap(), libMesh::Nemesis_IO_Helper::get_node_map(), libMesh::Nemesis_IO_Helper::get_ns_param_global(), libMesh::Nemesis_IO_Helper::get_ss_param_global(), libMesh::MeshFunction::gradient(), libMesh::MeshFunction::hessian(), libMesh::SystemSubsetBySubdomain::init(), libMesh::ParmetisPartitioner::initialize(), libMesh::ExodusII_IO_Helper::initialize(), libMesh::ExodusII_IO_Helper::initialize_element_variables(), libMesh::ExodusII_IO_Helper::initialize_global_variables(), libMesh::ExodusII_IO_Helper::initialize_nodal_variables(), libMesh::SparsityPattern::Build::join(), libMesh::DofMap::last_dof(), libMesh::MeshTools::libmesh_assert_valid_procids< Elem >(), libMesh::MeshTools::libmesh_assert_valid_procids< Node >(), libMesh::SerialMesh::local_elements_begin(), libMesh::ParallelMesh::local_elements_begin(), libMesh::SerialMesh::local_elements_end(), libMesh::ParallelMesh::local_elements_end(), libMesh::SerialMesh::local_level_elements_begin(), libMesh::ParallelMesh::local_level_elements_begin(), libMesh::SerialMesh::local_level_elements_end(), libMesh::ParallelMesh::local_level_elements_end(), libMesh::SerialMesh::local_nodes_begin(), libMesh::ParallelMesh::local_nodes_begin(), libMesh::SerialMesh::local_nodes_end(), libMesh::ParallelMesh::local_nodes_end(), libMesh::SerialMesh::local_not_level_elements_begin(), libMesh::ParallelMesh::local_not_level_elements_begin(), libMesh::SerialMesh::local_not_level_elements_end(), libMesh::ParallelMesh::local_not_level_elements_end(), libMesh::DofMap::local_variable_indices(), libMesh::MeshRefinement::make_coarsening_compatible(), libMesh::MeshBase::n_active_local_elem(), libMesh::BoundaryInfo::n_boundary_conds(), libMesh::BoundaryInfo::n_edge_conds(), libMesh::DofMap::n_local_dofs(), libMesh::System::n_local_dofs(), libMesh::MeshBase::n_local_elem(), libMesh::MeshBase::n_local_nodes(), libMesh::BoundaryInfo::n_nodeset_conds(), libMesh::SerialMesh::not_local_elements_begin(), libMesh::ParallelMesh::not_local_elements_begin(), libMesh::SerialMesh::not_local_elements_end(), libMesh::ParallelMesh::not_local_elements_end(), libMesh::WeightedPatchRecoveryErrorEstimator::EstimateError::operator()(), libMesh::SparsityPattern::Build::operator()(), libMesh::PatchRecoveryErrorEstimator::EstimateError::operator()(), libMesh::MeshFunction::operator()(), libMesh::ParallelMesh::ParallelMesh(), libMesh::System::point_gradient(), libMesh::System::point_hessian(), libMesh::System::point_value(), libMesh::System::project_vector(), libMesh::Nemesis_IO_Helper::put_cmap_params(), libMesh::Nemesis_IO_Helper::put_elem_cmap(), libMesh::Nemesis_IO_Helper::put_elem_map(), libMesh::Nemesis_IO_Helper::put_loadbal_param(), libMesh::Nemesis_IO_Helper::put_node_cmap(), libMesh::Nemesis_IO_Helper::put_node_map(), libMesh::Nemesis_IO::read(), libMesh::CheckpointIO::read(), libMesh::XdrIO::read(), libMesh::UnstructuredMesh::read(), libMesh::CheckpointIO::read_connectivity(), libMesh::ExodusII_IO_Helper::read_elem_num_map(), libMesh::System::read_header(), libMesh::System::read_legacy_data(), libMesh::ExodusII_IO_Helper::read_node_num_map(), libMesh::System::read_parallel_data(), libMesh::System::read_SCALAR_dofs(), libMesh::XdrIO::read_serialized_bc_names(), libMesh::XdrIO::read_serialized_bcs(), libMesh::System::read_serialized_blocked_dof_objects(), libMesh::XdrIO::read_serialized_connectivity(), libMesh::System::read_serialized_data(), libMesh::XdrIO::read_serialized_nodes(), libMesh::XdrIO::read_serialized_nodesets(), libMesh::XdrIO::read_serialized_subdomain_names(), libMesh::System::read_serialized_vector(), libMesh::System::read_serialized_vectors(), libMesh::MeshData::read_xdr(), libMesh::Partitioner::set_node_processor_ids(), libMesh::DofMap::set_nonlocal_dof_objects(), libMesh::LaplaceMeshSmoother::smooth(), libMesh::BoundaryInfo::sync(), libMesh::MeshTools::total_weight(), libMesh::ParallelMesh::update_parallel_id_counts(), libMesh::MeshTools::weight(), libMesh::ExodusII_IO::write(), libMesh::CheckpointIO::write(), libMesh::XdrIO::write(), libMesh::UnstructuredMesh::write(), libMesh::EquationSystems::write(), libMesh::GMVIO::write_discontinuous_gmv(), libMesh::ExodusII_IO::write_element_data(), libMesh::ExodusII_IO_Helper::write_element_values(), libMesh::ExodusII_IO_Helper::write_elements(), libMesh::ExodusII_IO::write_global_data(), libMesh::ExodusII_IO_Helper::write_global_values(), libMesh::System::write_header(), libMesh::ExodusII_IO::write_information_records(), libMesh::ExodusII_IO_Helper::write_information_records(), libMesh::ExodusII_IO_Helper::write_nodal_coordinates(), libMesh::UCDIO::write_nodal_data(), libMesh::ExodusII_IO::write_nodal_data(), libMesh::ExodusII_IO::write_nodal_data_discontinuous(), libMesh::ExodusII_IO_Helper::write_nodal_values(), libMesh::ExodusII_IO_Helper::write_nodesets(), libMesh::Nemesis_IO_Helper::write_nodesets(), libMesh::System::write_parallel_data(), libMesh::System::write_SCALAR_dofs(), libMesh::XdrIO::write_serialized_bc_names(), libMesh::XdrIO::write_serialized_bcs(), libMesh::System::write_serialized_blocked_dof_objects(), libMesh::XdrIO::write_serialized_connectivity(), libMesh::System::write_serialized_data(), libMesh::XdrIO::write_serialized_nodes(), libMesh::XdrIO::write_serialized_nodesets(), libMesh::XdrIO::write_serialized_subdomain_names(), libMesh::System::write_serialized_vector(), libMesh::System::write_serialized_vectors(), libMesh::ExodusII_IO_Helper::write_sidesets(), libMesh::Nemesis_IO_Helper::write_sidesets(), libMesh::ExodusII_IO::write_timestep(), and libMesh::ExodusII_IO_Helper::write_timestep()\&.
.PP
.nf
99   { return libmesh_cast_int<processor_id_type>(_communicator\&.rank()); }
.fi
.SS "void libMesh::MeshfreeInterpolation::set_field_variables (const std::vector< std::string > &names)\fC [inline]\fP, \fC [inherited]\fP"
Defines the field variable(s) we are responsible for, and importantly their assumed ordering\&. 
.PP
Definition at line 106 of file meshfree_interpolation\&.h\&.
.PP
References libMesh::MeshfreeInterpolation::_names\&.
.PP
.nf
107   { _names = names; }
.fi
.SH "Member Data Documentation"
.PP 
.SS "const \fBParallel::Communicator\fP& libMesh::ParallelObject::_communicator\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 104 of file parallel_object\&.h\&.
.PP
Referenced by libMesh::EquationSystems::build_solution_vector(), libMesh::ParallelObject::comm(), libMesh::EquationSystems::get_solution(), libMesh::ParallelObject::n_processors(), libMesh::ParallelObject::operator=(), and libMesh::ParallelObject::processor_id()\&.
.SS "template<unsigned int KDDim> const \fBReal\fP \fBlibMesh::InverseDistanceInterpolation\fP< KDDim >::_half_power\fC [protected]\fP"

.PP
Definition at line 309 of file meshfree_interpolation\&.h\&.
.SS "template<unsigned int KDDim> \fBAutoPtr\fP<\fBkd_tree_t\fP> \fBlibMesh::InverseDistanceInterpolation\fP< KDDim >::_kd_tree\fC [mutable]\fP, \fC [protected]\fP"

.PP
Definition at line 291 of file meshfree_interpolation\&.h\&.
.SS "template<unsigned int KDDim> const unsigned int \fBlibMesh::InverseDistanceInterpolation\fP< KDDim >::_n_interp_pts\fC [protected]\fP"

.PP
Definition at line 310 of file meshfree_interpolation\&.h\&.
.SS "std::vector<std::string> libMesh::MeshfreeInterpolation::_names\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 163 of file meshfree_interpolation\&.h\&.
.PP
Referenced by libMesh::MeshfreeInterpolation::field_variables(), libMesh::MeshfreeInterpolation::n_field_variables(), and libMesh::MeshfreeInterpolation::set_field_variables()\&.
.SS "\fBParallelizationStrategy\fP libMesh::MeshfreeInterpolation::_parallelization_strategy\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 162 of file meshfree_interpolation\&.h\&.
.SS "template<unsigned int KDDim> \fBPointListAdaptor\fP<KDDim> \fBlibMesh::InverseDistanceInterpolation\fP< KDDim >::_point_list_adaptor\fC [protected]\fP"

.PP
Definition at line 279 of file meshfree_interpolation\&.h\&.
.SS "std::vector<\fBPoint\fP> libMesh::MeshfreeInterpolation::_src_pts\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 164 of file meshfree_interpolation\&.h\&.
.PP
Referenced by libMesh::MeshfreeInterpolation::get_source_points()\&.
.SS "std::vector<\fBNumber\fP> libMesh::MeshfreeInterpolation::_src_vals\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 165 of file meshfree_interpolation\&.h\&.
.PP
Referenced by libMesh::MeshfreeInterpolation::get_source_vals()\&.
.SS "template<unsigned int KDDim> std::vector<\fBNumber\fP> \fBlibMesh::InverseDistanceInterpolation\fP< KDDim >::_vals\fC [mutable]\fP, \fC [protected]\fP"
Temporary work array\&. Object level scope to avoid cache thrashing\&. 
.PP
Definition at line 315 of file meshfree_interpolation\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libMesh from the source code\&.
