.TH "libMesh::ConstFEMFunction< Output >" 3 "Tue May 6 2014" "libMesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libMesh::ConstFEMFunction< Output > \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <const_fem_function\&.h>\fP
.PP
Inherits \fBlibMesh::FEMFunctionBase< Output >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBConstFEMFunction\fP (const Output c)"
.br
.ti -1c
.RI "\fB~ConstFEMFunction\fP ()"
.br
.ti -1c
.RI "virtual \fBAutoPtr\fP
.br
< \fBFEMFunctionBase\fP< Output > > \fBclone\fP () const "
.br
.ti -1c
.RI "virtual Output \fBoperator()\fP (const \fBFEMContext\fP &, const \fBPoint\fP &, const \fBReal\fP=0\&.)"
.br
.ti -1c
.RI "virtual void \fBoperator()\fP (const \fBFEMContext\fP &, const \fBPoint\fP &, const \fBReal\fP, \fBDenseVector\fP< Output > &output)"
.br
.ti -1c
.RI "virtual void \fBinit_context\fP (const \fBFEMContext\fP &)"
.br
.ti -1c
.RI "void \fBoperator()\fP (const \fBFEMContext\fP &, const \fBPoint\fP &p, \fBDenseVector\fP< Output > &output)"
.br
.ti -1c
.RI "virtual Output \fBcomponent\fP (const \fBFEMContext\fP &, unsigned int i, const \fBPoint\fP &p, \fBReal\fP time=0\&.)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "unsigned int \fBvar_index\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "Output \fB_c\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename Output = Number>class libMesh::ConstFEMFunction< Output >"

.PP
Definition at line 30 of file const_fem_function\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename Output  = Number> \fBlibMesh::ConstFEMFunction\fP< Output >::\fBConstFEMFunction\fP (const Outputc)\fC [inline]\fP"

.PP
Definition at line 33 of file const_fem_function\&.h\&.
.PP
References libMesh::ConstFEMFunction< Output >::_c\&.
.PP
Referenced by libMesh::ConstFEMFunction< Output >::clone()\&.
.PP
.nf
33 {_c = c;}
.fi
.SS "template<typename Output  = Number> \fBlibMesh::ConstFEMFunction\fP< Output >::~\fBConstFEMFunction\fP ()\fC [inline]\fP"

.PP
Definition at line 35 of file const_fem_function\&.h\&.
.PP
.nf
35 {}
.fi
.SH "Member Function Documentation"
.PP 
.SS "template<typename Output  = Number> virtual \fBAutoPtr\fP<\fBFEMFunctionBase\fP<Output> > \fBlibMesh::ConstFEMFunction\fP< Output >::clone () const\fC [inline]\fP, \fC [virtual]\fP"
Returns a new copy of the function\&. The new copy should be as ``deep'' as necessary to allow independent destruction and simultaneous evaluations of the copies in different threads\&. 
.PP
Implements \fBlibMesh::FEMFunctionBase< Output >\fP\&.
.PP
Definition at line 37 of file const_fem_function\&.h\&.
.PP
References libMesh::ConstFEMFunction< Output >::ConstFEMFunction()\&.
.PP
.nf
38   {return AutoPtr<FEMFunctionBase<Output> >( new ConstFEMFunction(*this) ); }
.fi
.SS "template<typename Output > Output \fBlibMesh::FEMFunctionBase\fP< Output >::component (const \fBFEMContext\fP &context, unsigned inti, const \fBPoint\fP &p, \fBReal\fPtime = \fC0\&.\fP)\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBReturns:\fP
.RS 4
the vector component \fCi\fP at coordinate \fCp\fP and time \fCtime\fP\&. Subclasses aren't required to overload this, since the default implementation is based on the full vector evaluation, which is often correct\&. Subclasses are recommended to overload this, since the default implementation is based on a vector evaluation, which is usually unnecessarily inefficient\&. 
.RE
.PP

.PP
Definition at line 135 of file fem_function_base\&.h\&.
.PP
Referenced by libMesh::System::project_vector()\&.
.PP
.nf
138 {
139   DenseVector<Output> outvec(i+1);
140   (*this)(context, p, time, outvec);
141   return outvec(i);
142 }
.fi
.SS "template<typename Output = Number> virtual void \fBlibMesh::FEMFunctionBase\fP< Output >::init_context (const \fBFEMContext\fP &)\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"
Prepares a context object for use\&.
.PP
Most problems will want to reimplement this for efficiency, in order to call FE::get_*() as their particular function requires\&. 
.PP
Definition at line 68 of file fem_function_base\&.h\&.
.PP
.nf
68 {}
.fi
.SS "template<typename Output  = Number> virtual Output \fBlibMesh::ConstFEMFunction\fP< Output >::operator() (const \fBFEMContext\fP &, const \fBPoint\fP &p, const \fBReal\fPtime = \fC0\&.\fP)\fC [inline]\fP, \fC [virtual]\fP"

.PP
\fBReturns:\fP
.RS 4
the scalar value at coordinate \fCp\fP and time \fCtime\fP, which defaults to zero\&. Purely virtual, so you have to overload it\&. Note that this cannot be a const method, check \fC\fBMeshFunction\fP\fP\&. 
.RE
.PP

.PP
Implements \fBlibMesh::FEMFunctionBase< Output >\fP\&.
.PP
Definition at line 40 of file const_fem_function\&.h\&.
.PP
References libMesh::ConstFEMFunction< Output >::_c\&.
.PP
.nf
42   { return _c; }
.fi
.SS "template<typename Output  = Number> virtual void \fBlibMesh::ConstFEMFunction\fP< Output >::operator() (const \fBFEMContext\fP &, const \fBPoint\fP &p, const \fBReal\fPtime, \fBDenseVector\fP< Output > &output)\fC [inline]\fP, \fC [virtual]\fP"
Return function for vectors\&. Returns in \fCoutput\fP the values of the data at the coordinate \fCp\fP and for time \fCtime\fP\&. Purely virtual, so you have to overload it\&. Note that this cannot be a const method, check \fC\fBMeshFunction\fP\fP\&. 
.PP
Implements \fBlibMesh::FEMFunctionBase< Output >\fP\&.
.PP
Definition at line 44 of file const_fem_function\&.h\&.
.PP
References libMesh::ConstFEMFunction< Output >::_c, and libMesh::DenseVector< T >::size()\&.
.PP
.nf
47   {for(unsigned int i = 0; i < output\&.size(); i++ )
48       output(i) = _c;}
.fi
.SS "template<typename Output> void \fBlibMesh::FEMFunctionBase\fP< Output >::operator() (const \fBFEMContext\fP &context, const \fBPoint\fP &p, \fBDenseVector\fP< Output > &output)\fC [inline]\fP, \fC [inherited]\fP"
Return function for vectors\&. Returns in \fCoutput\fP the values of the data at the coordinate \fCp\fP\&. 
.PP
Definition at line 146 of file fem_function_base\&.h\&.
.PP
.nf
148 {
149   // Call the time-dependent function with t=0\&.
150   this->operator()(context, p, 0\&., output);
151 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "template<typename Output  = Number> Output \fBlibMesh::ConstFEMFunction\fP< Output >::_c\fC [private]\fP"

.PP
Definition at line 51 of file const_fem_function\&.h\&.
.PP
Referenced by libMesh::ConstFEMFunction< Output >::ConstFEMFunction(), and libMesh::ConstFEMFunction< Output >::operator()()\&.
.SS "template<typename Output = Number> unsigned int \fBlibMesh::FEMFunctionBase\fP< Output >::var_index\fC [protected]\fP, \fC [inherited]\fP"
\fBVariable\fP index to decide which overloaded function should be accessed 
.PP
Definition at line 129 of file fem_function_base\&.h\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libMesh from the source code\&.
