.TH "libmesh.C" 3 "Tue May 6 2014" "libMesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libmesh.C \- 
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "\fBEXTERN_C_FOR_PETSC_END\fP"
.br
.ti -1c
.RI "\fBlibMesh\fP"
.br
.ti -1c
.RI "\fBlibMesh::libMeshPrivateData\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "std::streambuf * \fBEXTERN_C_FOR_PETSC_END::out_buf\fP (NULL)"
.br
.ti -1c
.RI "std::streambuf * \fBEXTERN_C_FOR_PETSC_END::err_buf\fP (NULL)"
.br
.ti -1c
.RI "void \fBEXTERN_C_FOR_PETSC_END::libmesh_handleFPE\fP (int, siginfo_t *info, void *)"
.br
.ti -1c
.RI "void \fBlibMesh_MPI_Handler\fP (MPI_Comm *, int *,\&.\&.\&.)"
.br
.ti -1c
.RI "const Number \fBlibMesh::imaginary\fP (0\&., 1\&.)"
.br
.ti -1c
.RI "bool \fBlibMesh::initialized\fP ()"
.br
.ti -1c
.RI "bool \fBlibMesh::closed\fP ()"
.br
.ti -1c
.RI "void \fBlibMesh::libmesh_terminate_handler\fP ()"
.br
.ti -1c
.RI "\fBlibMesh::omp_set_num_threads\fP (\fBlibMesh::libMeshPrivateData::_n_threads\fP)"
.br
.ti -1c
.RI "task_scheduler \fBlibMesh::reset\fP (new Threads::task_scheduler_init(\fBlibMesh::n_threads\fP()))"
.br
.ti -1c
.RI "\fBlibMesh::libmesh_assert\fP (remote_elem)"
.br
.ti -1c
.RI "\fBlibMesh::if\fP (!\fBlibMesh::on_command_line\fP('--disable-mpi'))"
.br
.ti -1c
.RI "\fBlibMesh::libmesh_assert_greater\fP (libMeshPrivateData::_n_processors, 0)"
.br
.ti -1c
.RI "\fBlibMesh::libmesh_parallel_only\fP (this->comm())"
.br
.ti -1c
.RI "\fBlibMesh::if\fP (!\fBlibMesh::on_command_line\fP('--disable-petsc')#if defined(LIBMESH_HAVE_MPI)&&!\fBlibMesh::on_command_line\fP('--disable-mpi')#endif)"
.br
.ti -1c
.RI "command_line \fBlibMesh::parse_command_line\fP (argc, argv)"
.br
.ti -1c
.RI "if(!\fBlibMesh::on_command_line\fP('--sync-with-stdio')) 
.br
std \fBlibMesh::if\fP (\fBlibMesh::on_command_line\fP('--separate-libmeshout'))"
.br
.ti -1c
.RI "\fBlibMesh::if\fP (\fBlibMesh::on_command_line\fP('--redirect-stdout'))"
.br
.ti -1c
.RI "\fBlibMesh::if\fP (\fBlibMesh::global_processor_id\fP()!=0)"
.br
.ti -1c
.RI "void \fBlibMesh::enableFPE\fP (bool on)"
.br
.ti -1c
.RI "bool \fBlibMesh::on_command_line\fP (const std::string &arg)"
.br
.ti -1c
.RI "template<typename T > T \fBlibMesh::command_line_value\fP (const std::string &name, T value)"
.br
.ti -1c
.RI "template<typename T > T \fBlibMesh::command_line_value\fP (const std::vector< std::string > &name, T value)"
.br
.ti -1c
.RI "template<typename T > T \fBlibMesh::command_line_next\fP (const std::string &name, T value)"
.br
.ti -1c
.RI "template<typename T > void \fBlibMesh::command_line_vector\fP (const std::string &name, std::vector< T > &vec)"
.br
.ti -1c
.RI "SolverPackage \fBlibMesh::default_solver_package\fP ()"
.br
.ti -1c
.RI "template int \fBlibMesh::command_line_value< int >\fP (const std::string &, int)"
.br
.ti -1c
.RI "template float \fBlibMesh::command_line_value< float >\fP (const std::string &, float)"
.br
.ti -1c
.RI "template double \fBlibMesh::command_line_value< double >\fP (const std::string &, double)"
.br
.ti -1c
.RI "template long double \fBlibMesh::command_line_value< long double >\fP (const std::string &, long double)"
.br
.ti -1c
.RI "template std::string \fBlibMesh::command_line_value< std::string >\fP (const std::string &, std::string)"
.br
.ti -1c
.RI "template int \fBlibMesh::command_line_next< int >\fP (const std::string &, int)"
.br
.ti -1c
.RI "template float \fBlibMesh::command_line_next< float >\fP (const std::string &, float)"
.br
.ti -1c
.RI "template double \fBlibMesh::command_line_next< double >\fP (const std::string &, double)"
.br
.ti -1c
.RI "template long double \fBlibMesh::command_line_next< long double >\fP (const std::string &, long double)"
.br
.ti -1c
.RI "template std::string \fBlibMesh::command_line_next< std::string >\fP (const std::string &, std::string)"
.br
.ti -1c
.RI "template void \fBlibMesh::command_line_vector< int >\fP (const std::string &, std::vector< int > &)"
.br
.ti -1c
.RI "template void \fBlibMesh::command_line_vector< float >\fP (const std::string &, std::vector< float > &)"
.br
.ti -1c
.RI "template void \fBlibMesh::command_line_vector< double >\fP (const std::string &, std::vector< double > &)"
.br
.ti -1c
.RI "template void \fBlibMesh::command_line_vector< long double >\fP (const std::string &, std::vector< long double > &)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "AutoPtr< GetPot > \fBEXTERN_C_FOR_PETSC_END::command_line\fP (NULL)"
.br
.ti -1c
.RI "AutoPtr< std::ofstream > \fBEXTERN_C_FOR_PETSC_END::_ofstream\fP (NULL)"
.br
.ti -1c
.RI "AutoPtr
.br
< \fBlibMesh::Threads::task_scheduler_init\fP > \fBEXTERN_C_FOR_PETSC_END::task_scheduler\fP (NULL)"
.br
.ti -1c
.RI "bool \fBEXTERN_C_FOR_PETSC_END::libmesh_initialized_mpi\fP = false"
.br
.ti -1c
.RI "bool \fBEXTERN_C_FOR_PETSC_END::libmesh_initialized_petsc\fP = false"
.br
.ti -1c
.RI "bool \fBEXTERN_C_FOR_PETSC_END::libmesh_initialized_slepc\fP = false"
.br
.ti -1c
.RI "bool \fBlibMesh::libMeshPrivateData::_is_initialized\fP = false"
.br
.ti -1c
.RI "SolverPackage \fBlibMesh::libMeshPrivateData::_solver_package\fP"
.br
.ti -1c
.RI "MPI_Comm \fBlibMesh::COMM_WORLD\fP = MPI_COMM_NULL"
.br
.ti -1c
.RI "MPI_Comm \fBlibMesh::GLOBAL_COMM_WORLD\fP = MPI_COMM_NULL"
.br
.ti -1c
.RI "Parallel::FakeCommunicator \fBlibMesh::CommWorld\fP"
.br
.ti -1c
.RI "OStreamProxy \fBlibMesh::out\fP (std::cout)"
.br
.ti -1c
.RI "OStreamProxy \fBlibMesh::err\fP (std::cerr)"
.br
.ti -1c
.RI "PerfLog \fBlibMesh::perflog\fP ('libMesh',#ifdef LIBMESH_ENABLE_PERFORMANCE_LOGGING true#else false#endif)"
.br
.ti -1c
.RI "MPI_Errhandler \fBlibMesh::libmesh_errhandler\fP"
.br
.ti -1c
.RI "\fBlibMesh::TRILINOS_SOLVERS\fP"
.br
.ti -1c
.RI "\fBlibMesh::EIGEN_SOLVERS\fP"
.br
.ti -1c
.RI "\fBlibMesh::LASPACK_SOLVERS\fP"
.br
.ti -1c
.RI "\fBlibMesh::INVALID_SOLVER_PACKAGE\fP"
.br
.ti -1c
.RI "std::terminate_handler \fBlibMesh::old_terminate_handler\fP"
.br
.ti -1c
.RI "LibMeshInit::LibMeshInit(int 
.br
argc, const char *const *argv) 
.br
LibMeshInit command_lin \fBlibMesh::reset\fP )(new GetPot(argc, argv))"
.br
.ti -1c
.RI "\fBlibMesh::n_threads\fP [0] = '--n_threads'"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "void libMesh_MPI_Handler (MPI_Comm *, int *, \&.\&.\&.)"

.PP
Definition at line 138 of file libmesh\&.C\&.
.PP
Referenced by libMesh::if()\&.
.PP
.nf
139 {
140   libmesh_error();
141 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for libMesh from the source code\&.
