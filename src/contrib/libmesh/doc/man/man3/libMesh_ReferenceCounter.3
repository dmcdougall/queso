.TH "libMesh::ReferenceCounter" 3 "Tue May 6 2014" "libMesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libMesh::ReferenceCounter \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <reference_counter\&.h>\fP
.PP
Inherited by \fBlibMesh::ReferenceCountedObject< T >\fP, \fBlibMesh::ReferenceCountedObject< DiffSolver >\fP, \fBlibMesh::ReferenceCountedObject< DofMap >\fP, \fBlibMesh::ReferenceCountedObject< DofObject >\fP, \fBlibMesh::ReferenceCountedObject< EigenSolver< T > >\fP, \fBlibMesh::ReferenceCountedObject< Elem >\fP, \fBlibMesh::ReferenceCountedObject< ElemAssembly >\fP, \fBlibMesh::ReferenceCountedObject< EquationSystems >\fP, \fBlibMesh::ReferenceCountedObject< FEAbstract >\fP, \fBlibMesh::ReferenceCountedObject< LinearSolver< Number > >\fP, \fBlibMesh::ReferenceCountedObject< LinearSolver< T > >\fP, \fBlibMesh::ReferenceCountedObject< Node >\fP, \fBlibMesh::ReferenceCountedObject< NonlinearSolver< Number > >\fP, \fBlibMesh::ReferenceCountedObject< NonlinearSolver< T > >\fP, \fBlibMesh::ReferenceCountedObject< NumericVector< T > >\fP, \fBlibMesh::ReferenceCountedObject< PointLocatorBase >\fP, \fBlibMesh::ReferenceCountedObject< Preconditioner< Number > >\fP, \fBlibMesh::ReferenceCountedObject< Preconditioner< T > >\fP, \fBlibMesh::ReferenceCountedObject< QBase >\fP, \fBlibMesh::ReferenceCountedObject< RBAssemblyExpansion >\fP, \fBlibMesh::ReferenceCountedObject< RBParametrized >\fP, \fBlibMesh::ReferenceCountedObject< RBTheta >\fP, \fBlibMesh::ReferenceCountedObject< RBThetaExpansion >\fP, \fBlibMesh::ReferenceCountedObject< ShellMatrix< T > >\fP, \fBlibMesh::ReferenceCountedObject< Solver >\fP, \fBlibMesh::ReferenceCountedObject< SparseMatrix< T > >\fP, \fBlibMesh::ReferenceCountedObject< SubdomainSelection >\fP, \fBlibMesh::ReferenceCountedObject< System >\fP, \fBlibMesh::ReferenceCountedObject< SystemSubset >\fP, \fBlibMesh::ReferenceCountedObject< TimeSolver >\fP, \fBlibMesh::ReferenceCountedObject< TreeBase >\fP, and \fBlibMesh::ReferenceCountedObject< Value >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB~ReferenceCounter\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static std::string \fBget_info\fP ()"
.br
.ti -1c
.RI "static void \fBprint_info\fP (std::ostream &\fBout\fP=\fBlibMesh::out\fP)"
.br
.ti -1c
.RI "static unsigned int \fBn_objects\fP ()"
.br
.ti -1c
.RI "static void \fBenable_print_counter_info\fP ()"
.br
.ti -1c
.RI "static void \fBdisable_print_counter_info\fP ()"
.br
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "typedef std::map< std::string, 
.br
std::pair< unsigned int, 
.br
unsigned int > > \fBCounts\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBReferenceCounter\fP ()"
.br
.ti -1c
.RI "void \fBincrement_constructor_count\fP (const std::string &name)"
.br
.ti -1c
.RI "void \fBincrement_destructor_count\fP (const std::string &name)"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static \fBCounts\fP \fB_counts\fP"
.br
.ti -1c
.RI "static \fBThreads::atomic\fP
.br
< unsigned int > \fB_n_objects\fP"
.br
.ti -1c
.RI "static \fBThreads::spin_mutex\fP \fB_mutex\fP"
.br
.ti -1c
.RI "static bool \fB_enable_print_counter\fP = true"
.br
.in -1c
.SH "Detailed Description"
.PP 
This is the base class for enabling reference counting\&. It should not be used by the user, thus it has a private constructor\&.
.PP
\fBAuthor:\fP
.RS 4
Benjamin S\&. Kirk, 2002-2007 
.RE
.PP

.PP
Definition at line 47 of file reference_counter\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef std::map<std::string, std::pair<unsigned int, unsigned int> > \fBlibMesh::ReferenceCounter::Counts\fP\fC [protected]\fP"
Data structure to log the information\&. The log is identified by the class name\&. 
.PP
Definition at line 113 of file reference_counter\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "libMesh::ReferenceCounter::ReferenceCounter ()\fC [inline]\fP, \fC [protected]\fP"
Constructor\&. Protected so that you cannont instantiate a \fC\fBReferenceCounter\fP\fP, only derive from it\&. 
.PP
Definition at line 144 of file reference_counter\&.h\&.
.PP
References _n_objects\&.
.PP
.nf
145 {
146   ++_n_objects;
147 }
.fi
.SS "libMesh::ReferenceCounter::~ReferenceCounter ()\fC [inline]\fP"
Destructor\&. 
.PP
Definition at line 151 of file reference_counter\&.h\&.
.PP
References _n_objects\&.
.PP
.nf
152 {
153   --_n_objects;
154 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void libMesh::ReferenceCounter::disable_print_counter_info ()\fC [static]\fP"

.PP
Definition at line 106 of file reference_counter\&.C\&.
.PP
References _enable_print_counter\&.
.PP
.nf
107 {
108   _enable_print_counter = false;
109   return;
110 }
.fi
.SS "void libMesh::ReferenceCounter::enable_print_counter_info ()\fC [static]\fP"
Methods to enable/disable the reference counter output from \fBprint_info()\fP 
.PP
Definition at line 100 of file reference_counter\&.C\&.
.PP
References _enable_print_counter\&.
.PP
.nf
101 {
102   _enable_print_counter = true;
103   return;
104 }
.fi
.SS "std::string libMesh::ReferenceCounter::get_info ()\fC [static]\fP"
Gets a string containing the reference information\&. 
.PP
Definition at line 47 of file reference_counter\&.C\&.
.PP
References _counts, and libMesh::Quality::name()\&.
.PP
Referenced by print_info()\&.
.PP
.nf
48 {
49 #if defined(LIBMESH_ENABLE_REFERENCE_COUNTING) && defined(DEBUG)
50 
51   std::ostringstream oss;
52 
53   oss << '\n'
54       << " ---------------------------------------------------------------------------- \n"
55       << "| Reference count information                                                |\n"
56       << " ---------------------------------------------------------------------------- \n";
57 
58   for (Counts::iterator it = _counts\&.begin();
59        it != _counts\&.end(); ++it)
60     {
61       const std::string name(it->first);
62       const unsigned int creations    = it->second\&.first;
63       const unsigned int destructions = it->second\&.second;
64 
65       oss << "| " << name << " reference count information:\n"
66           << "|  Creations:    " << creations    << '\n'
67           << "|  Destructions: " << destructions << '\n';
68     }
69 
70   oss << " ---------------------------------------------------------------------------- \n";
71 
72   return oss\&.str();
73 
74 #else
75 
76   return "";
77 
78 #endif
79 }
.fi
.SS "void libMesh::ReferenceCounter::increment_constructor_count (const std::string &name)\fC [inline]\fP, \fC [protected]\fP"
Increments the construction counter\&. Should be called in the constructor of any derived class that will be reference counted\&. 
.PP
Definition at line 163 of file reference_counter\&.h\&.
.PP
References _counts, libMesh::Quality::name(), and libMesh::Threads::spin_mtx\&.
.PP
Referenced by libMesh::ReferenceCountedObject< RBParametrized >::ReferenceCountedObject()\&.
.PP
.nf
164 {
165   Threads::spin_mutex::scoped_lock lock(Threads::spin_mtx);
166   std::pair<unsigned int, unsigned int>& p = _counts[name];
167 
168   p\&.first++;
169 }
.fi
.SS "void libMesh::ReferenceCounter::increment_destructor_count (const std::string &name)\fC [inline]\fP, \fC [protected]\fP"
Increments the destruction counter\&. Should be called in the destructor of any derived class that will be reference counted\&. 
.PP
Definition at line 176 of file reference_counter\&.h\&.
.PP
References _counts, libMesh::Quality::name(), and libMesh::Threads::spin_mtx\&.
.PP
Referenced by libMesh::ReferenceCountedObject< RBParametrized >::~ReferenceCountedObject()\&.
.PP
.nf
177 {
178   Threads::spin_mutex::scoped_lock lock(Threads::spin_mtx);
179   std::pair<unsigned int, unsigned int>& p = _counts[name];
180 
181   p\&.second++;
182 }
.fi
.SS "static unsigned int libMesh::ReferenceCounter::n_objects ()\fC [inline]\fP, \fC [static]\fP"
Prints the number of outstanding (created, but not yet destroyed) objects\&. 
.PP
Definition at line 79 of file reference_counter\&.h\&.
.PP
References _n_objects\&.
.PP
.nf
80   { return _n_objects; }
.fi
.SS "void libMesh::ReferenceCounter::print_info (std::ostream &out = \fC\fBlibMesh::out\fP\fP)\fC [static]\fP"
Prints the reference information, by default to \fC\fBlibMesh::out\fP\fP\&. 
.PP
Definition at line 88 of file reference_counter\&.C\&.
.PP
References _enable_print_counter, and get_info()\&.
.PP
.nf
89 {
90   if( _enable_print_counter ) out_stream << ReferenceCounter::get_info();
91 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "\fBReferenceCounter::Counts\fP libMesh::ReferenceCounter::_counts\fC [static]\fP, \fC [protected]\fP"
Actually holds the data\&. 
.PP
Definition at line 118 of file reference_counter\&.h\&.
.PP
Referenced by get_info(), increment_constructor_count(), and increment_destructor_count()\&.
.SS "bool libMesh::ReferenceCounter::_enable_print_counter = true\fC [static]\fP, \fC [protected]\fP"
Flag to control whether reference count information is printed when print_info is called\&. 
.PP
Definition at line 137 of file reference_counter\&.h\&.
.PP
Referenced by disable_print_counter_info(), enable_print_counter_info(), and print_info()\&.
.SS "\fBThreads::spin_mutex\fP libMesh::ReferenceCounter::_mutex\fC [static]\fP, \fC [protected]\fP"
Mutual exclusion object to enable thread-safe reference counting\&. 
.PP
Definition at line 131 of file reference_counter\&.h\&.
.SS "\fBThreads::atomic\fP< unsigned int > libMesh::ReferenceCounter::_n_objects\fC [static]\fP, \fC [protected]\fP"
The number of objects\&. Print the reference count information when the number returns to 0\&. 
.PP
Definition at line 126 of file reference_counter\&.h\&.
.PP
Referenced by n_objects(), ReferenceCounter(), and ~ReferenceCounter()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libMesh from the source code\&.
