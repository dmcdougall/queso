.TH "libMesh::EigenSolver< T >" 3 "Tue May 6 2014" "libMesh" \" -*- nroff -*-
.ad l
.nh
.SH NAME
libMesh::EigenSolver< T > \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <eigen_solver\&.h>\fP
.PP
Inherits \fBlibMesh::ReferenceCountedObject< EigenSolver< T > >\fP, and \fBlibMesh::ParallelObject\fP\&.
.PP
Inherited by \fBlibMesh::SlepcEigenSolver< T >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBEigenSolver\fP (const \fBParallel::Communicator\fP &\fBcomm\fP LIBMESH_CAN_DEFAULT_TO_COMMWORLD)"
.br
.ti -1c
.RI "virtual \fB~EigenSolver\fP ()"
.br
.ti -1c
.RI "bool \fBinitialized\fP () const "
.br
.ti -1c
.RI "virtual void \fBclear\fP ()"
.br
.ti -1c
.RI "virtual void \fBinit\fP ()=0"
.br
.ti -1c
.RI "\fBEigenSolverType\fP \fBeigen_solver_type\fP () const "
.br
.ti -1c
.RI "\fBEigenProblemType\fP \fBeigen_problem_type\fP () const "
.br
.ti -1c
.RI "\fBPositionOfSpectrum\fP \fBposition_of_spectrum\fP () const "
.br
.ti -1c
.RI "void \fBset_eigensolver_type\fP (const \fBEigenSolverType\fP est)"
.br
.ti -1c
.RI "void \fBset_eigenproblem_type\fP (\fBEigenProblemType\fP ept)"
.br
.ti -1c
.RI "void \fBset_position_of_spectrum\fP (\fBPositionOfSpectrum\fP pos)"
.br
.ti -1c
.RI "virtual std::pair< unsigned 
.br
int, unsigned int > \fBsolve_standard\fP (\fBSparseMatrix\fP< T > &matrix_A, int nev, int ncv, const double tol, const unsigned int m_its)=0"
.br
.ti -1c
.RI "virtual std::pair< unsigned 
.br
int, unsigned int > \fBsolve_standard\fP (\fBShellMatrix\fP< T > &matrix_A, int nev, int ncv, const double tol, const unsigned int m_its)=0"
.br
.ti -1c
.RI "virtual std::pair< unsigned 
.br
int, unsigned int > \fBsolve_generalized\fP (\fBSparseMatrix\fP< T > &matrix_A, \fBSparseMatrix\fP< T > &matrix_B, int nev, int ncv, const double tol, const unsigned int m_its)=0"
.br
.ti -1c
.RI "virtual std::pair< unsigned 
.br
int, unsigned int > \fBsolve_generalized\fP (\fBShellMatrix\fP< T > &matrix_A, \fBSparseMatrix\fP< T > &matrix_B, int nev, int ncv, const double tol, const unsigned int m_its)=0"
.br
.ti -1c
.RI "virtual std::pair< unsigned 
.br
int, unsigned int > \fBsolve_generalized\fP (\fBSparseMatrix\fP< T > &matrix_A, \fBShellMatrix\fP< T > &matrix_B, int nev, int ncv, const double tol, const unsigned int m_its)=0"
.br
.ti -1c
.RI "virtual std::pair< unsigned 
.br
int, unsigned int > \fBsolve_generalized\fP (\fBShellMatrix\fP< T > &matrix_A, \fBShellMatrix\fP< T > &matrix_B, int nev, int ncv, const double tol, const unsigned int m_its)=0"
.br
.ti -1c
.RI "virtual std::pair< \fBReal\fP, \fBReal\fP > \fBget_eigenpair\fP (unsigned int i, \fBNumericVector\fP< T > &solution)=0"
.br
.ti -1c
.RI "virtual std::pair< \fBReal\fP, \fBReal\fP > \fBget_eigenvalue\fP (unsigned int i)=0"
.br
.ti -1c
.RI "virtual void \fBattach_deflation_space\fP (\fBNumericVector\fP< T > &deflation_vector)=0"
.br
.ti -1c
.RI "const \fBParallel::Communicator\fP & \fBcomm\fP () const "
.br
.ti -1c
.RI "\fBprocessor_id_type\fP \fBn_processors\fP () const "
.br
.ti -1c
.RI "\fBprocessor_id_type\fP \fBprocessor_id\fP () const "
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBAutoPtr\fP< \fBEigenSolver\fP< T > > \fBbuild\fP (const \fBParallel::Communicator\fP &\fBcomm\fP LIBMESH_CAN_DEFAULT_TO_COMMWORLD, const \fBSolverPackage\fP solver_package=\fBSLEPC_SOLVERS\fP)"
.br
.ti -1c
.RI "static std::string \fBget_info\fP ()"
.br
.ti -1c
.RI "static void \fBprint_info\fP (std::ostream &\fBout\fP=\fBlibMesh::out\fP)"
.br
.ti -1c
.RI "static unsigned int \fBn_objects\fP ()"
.br
.ti -1c
.RI "static void \fBenable_print_counter_info\fP ()"
.br
.ti -1c
.RI "static void \fBdisable_print_counter_info\fP ()"
.br
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "typedef std::map< std::string, 
.br
std::pair< unsigned int, 
.br
unsigned int > > \fBCounts\fP"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBincrement_constructor_count\fP (const std::string &name)"
.br
.ti -1c
.RI "void \fBincrement_destructor_count\fP (const std::string &name)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBEigenSolverType\fP \fB_eigen_solver_type\fP"
.br
.ti -1c
.RI "\fBEigenProblemType\fP \fB_eigen_problem_type\fP"
.br
.ti -1c
.RI "\fBPositionOfSpectrum\fP \fB_position_of_spectrum\fP"
.br
.ti -1c
.RI "bool \fB_is_initialized\fP"
.br
.ti -1c
.RI "const \fBParallel::Communicator\fP & \fB_communicator\fP"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static \fBCounts\fP \fB_counts\fP"
.br
.ti -1c
.RI "static \fBThreads::atomic\fP
.br
< unsigned int > \fB_n_objects\fP"
.br
.ti -1c
.RI "static \fBThreads::spin_mutex\fP \fB_mutex\fP"
.br
.ti -1c
.RI "static bool \fB_enable_print_counter\fP = true"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T>class libMesh::EigenSolver< T >"
This class provides an interface to solvers for eigenvalue problems\&. 
.PP
Definition at line 54 of file eigen_solver\&.h\&.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef std::map<std::string, std::pair<unsigned int, unsigned int> > \fBlibMesh::ReferenceCounter::Counts\fP\fC [protected]\fP, \fC [inherited]\fP"
Data structure to log the information\&. The log is identified by the class name\&. 
.PP
Definition at line 113 of file reference_counter\&.h\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T> \fBlibMesh::EigenSolver\fP< T >::\fBEigenSolver\fP (const \fBParallel::Communicator\fP &\fBcomm\fPLIBMESH_CAN_DEFAULT_TO_COMMWORLD)\fC [inline]\fP"
Constructor\&. Initializes \fBSolver\fP data structures 
.PP
Definition at line 247 of file eigen_solver\&.h\&.
.PP
.nf
247                                                                 :
248   ParallelObject(comm_in),
249   _eigen_solver_type    (ARNOLDI),
250   _eigen_problem_type   (NHEP),
251   _position_of_spectrum (LARGEST_MAGNITUDE),
252   _is_initialized       (false)
253 {
254 }
.fi
.SS "template<typename T > \fBlibMesh::EigenSolver\fP< T >::~\fBEigenSolver\fP ()\fC [inline]\fP, \fC [virtual]\fP"
Destructor\&. 
.PP
Definition at line 260 of file eigen_solver\&.h\&.
.PP
.nf
261 {
262   this->clear ();
263 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "template<typename T> virtual void \fBlibMesh::EigenSolver\fP< T >::attach_deflation_space (\fBNumericVector\fP< T > &deflation_vector)\fC [pure virtual]\fP"
Attach a deflation space defined by a single vector\&. 
.PP
Implemented in \fBlibMesh::SlepcEigenSolver< T >\fP\&.
.SS "template<typename T> \fBAutoPtr\fP< \fBEigenSolver\fP< T > > \fBlibMesh::EigenSolver\fP< T >::build (const \fBParallel::Communicator\fP &\fBcomm\fPLIBMESH_CAN_DEFAULT_TO_COMMWORLD, const \fBSolverPackage\fPsolver_package = \fC\fBSLEPC_SOLVERS\fP\fP)\fC [static]\fP"
Builds an \fC\fBEigenSolver\fP\fP using the linear solver package specified by \fCsolver_package\fP 
.PP
Definition at line 37 of file eigen_solver\&.C\&.
.PP
References libMesh::err, and libMesh::SLEPC_SOLVERS\&.
.PP
.nf
39 {
40   // Build the appropriate solver
41   switch (solver_package)
42     {
43 
44 
45 
46 #ifdef LIBMESH_HAVE_SLEPC
47     case SLEPC_SOLVERS:
48       {
49         AutoPtr<EigenSolver<T> > ap(new SlepcEigenSolver<T>(comm));
50         return ap;
51       }
52 #endif
53 
54 
55     default:
56       libMesh::err << "ERROR:  Unrecognized eigen solver package: "
57                    << solver_package
58                    << std::endl;
59       libmesh_error();
60     }
61 
62   AutoPtr<EigenSolver<T> > ap(NULL);
63   return ap;
64 }
.fi
.SS "template<typename T> virtual void \fBlibMesh::EigenSolver\fP< T >::clear ()\fC [inline]\fP, \fC [virtual]\fP"
Release all memory and clear data structures\&. 
.PP
Reimplemented in \fBlibMesh::SlepcEigenSolver< T >\fP\&.
.PP
Definition at line 88 of file eigen_solver\&.h\&.
.PP
.nf
88 {}
.fi
.SS "const \fBParallel::Communicator\fP& libMesh::ParallelObject::comm () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
\fBReturns:\fP
.RS 4
a reference to the \fC\fBParallel::Communicator\fP\fP object used by this mesh\&. 
.RE
.PP

.PP
Definition at line 86 of file parallel_object\&.h\&.
.PP
References libMesh::ParallelObject::_communicator\&.
.PP
Referenced by libMesh::__libmesh_petsc_diff_solver_monitor(), libMesh::__libmesh_petsc_diff_solver_residual(), libMesh::__libmesh_petsc_snes_residual(), libMesh::MeshRefinement::_coarsen_elements(), libMesh::ExactSolution::_compute_error(), libMesh::MetisPartitioner::_do_partition(), libMesh::ParmetisPartitioner::_do_repartition(), libMesh::UniformRefinementEstimator::_estimate_error(), libMesh::SlepcEigenSolver< T >::_petsc_shell_matrix_get_diagonal(), libMesh::PetscLinearSolver< T >::_petsc_shell_matrix_get_diagonal(), libMesh::SlepcEigenSolver< T >::_petsc_shell_matrix_mult(), libMesh::PetscLinearSolver< T >::_petsc_shell_matrix_mult(), libMesh::PetscLinearSolver< T >::_petsc_shell_matrix_mult_add(), libMesh::EquationSystems::_read_impl(), libMesh::MeshRefinement::_refine_elements(), libMesh::ParallelMesh::add_elem(), libMesh::ImplicitSystem::add_matrix(), libMesh::ParallelMesh::add_node(), libMesh::System::add_vector(), libMesh::UnstructuredMesh::all_second_order(), libMesh::LaplaceMeshSmoother::allgather_graph(), libMesh::FEMSystem::assemble_qoi(), libMesh::MeshCommunication::assign_global_indices(), libMesh::ParmetisPartitioner::assign_partitioning(), libMesh::DofMap::attach_matrix(), libMesh::MeshTools::bounding_box(), libMesh::System::calculate_norm(), libMesh::MeshRefinement::coarsen_elements(), libMesh::Nemesis_IO_Helper::compute_num_global_elem_blocks(), libMesh::Nemesis_IO_Helper::compute_num_global_nodesets(), libMesh::Nemesis_IO_Helper::compute_num_global_sidesets(), libMesh::Problem_Interface::computeF(), libMesh::Problem_Interface::computeJacobian(), libMesh::Problem_Interface::computePreconditioner(), libMesh::MeshTools::correct_node_proc_ids(), libMesh::MeshCommunication::delete_remote_elements(), libMesh::DofMap::distribute_dofs(), DMlibMeshFunction(), DMLibMeshSetSystem(), DMVariableBounds_libMesh(), libMesh::MeshRefinement::eliminate_unrefined_patches(), libMesh::WeightedPatchRecoveryErrorEstimator::estimate_error(), libMesh::PatchRecoveryErrorEstimator::estimate_error(), libMesh::JumpErrorEstimator::estimate_error(), libMesh::AdjointRefinementEstimator::estimate_error(), libMesh::MeshRefinement::flag_elements_by_elem_fraction(), libMesh::MeshRefinement::flag_elements_by_error_fraction(), libMesh::MeshRefinement::flag_elements_by_nelem_target(), libMesh::for(), libMesh::CondensedEigenSystem::get_eigenpair(), libMesh::ImplicitSystem::get_linear_solver(), libMesh::LocationMap< T >::init(), libMesh::TimeSolver::init(), libMesh::SystemSubsetBySubdomain::init(), libMesh::EigenSystem::init_data(), libMesh::EigenSystem::init_matrices(), libMesh::ParmetisPartitioner::initialize(), libMesh::MeshTools::libmesh_assert_valid_dof_ids(), libMesh::ParallelMesh::libmesh_assert_valid_parallel_flags(), libMesh::MeshTools::libmesh_assert_valid_procids< Elem >(), libMesh::MeshTools::libmesh_assert_valid_procids< Node >(), libMesh::MeshTools::libmesh_assert_valid_refinement_flags(), libMesh::MeshRefinement::limit_level_mismatch_at_edge(), libMesh::MeshRefinement::limit_level_mismatch_at_node(), libMesh::MeshRefinement::make_coarsening_compatible(), libMesh::MeshCommunication::make_elems_parallel_consistent(), libMesh::MeshRefinement::make_flags_parallel_consistent(), libMesh::MeshCommunication::make_node_ids_parallel_consistent(), libMesh::MeshCommunication::make_node_proc_ids_parallel_consistent(), libMesh::MeshCommunication::make_nodes_parallel_consistent(), libMesh::MeshRefinement::make_refinement_compatible(), libMesh::FEMSystem::mesh_position_set(), libMesh::MeshSerializer::MeshSerializer(), libMesh::ParallelMesh::n_active_elem(), libMesh::MeshTools::n_active_levels(), libMesh::BoundaryInfo::n_boundary_conds(), libMesh::BoundaryInfo::n_edge_conds(), libMesh::CondensedEigenSystem::n_global_non_condensed_dofs(), libMesh::MeshTools::n_levels(), libMesh::BoundaryInfo::n_nodeset_conds(), libMesh::MeshTools::n_p_levels(), libMesh::ParallelMesh::parallel_max_elem_id(), libMesh::ParallelMesh::parallel_max_node_id(), libMesh::ParallelMesh::parallel_n_elem(), libMesh::ParallelMesh::parallel_n_nodes(), libMesh::Partitioner::partition(), libMesh::Partitioner::partition_unpartitioned_elements(), libMesh::petsc_auto_fieldsplit(), libMesh::System::point_gradient(), libMesh::System::point_hessian(), libMesh::System::point_value(), libMesh::MeshBase::prepare_for_use(), libMesh::System::project_vector(), libMesh::Nemesis_IO::read(), libMesh::XdrIO::read(), libMesh::System::read_header(), libMesh::System::read_legacy_data(), libMesh::System::read_SCALAR_dofs(), libMesh::XdrIO::read_serialized_bc_names(), libMesh::XdrIO::read_serialized_bcs(), libMesh::System::read_serialized_blocked_dof_objects(), libMesh::XdrIO::read_serialized_connectivity(), libMesh::XdrIO::read_serialized_nodes(), libMesh::XdrIO::read_serialized_nodesets(), libMesh::XdrIO::read_serialized_subdomain_names(), libMesh::System::read_serialized_vector(), libMesh::MeshBase::recalculate_n_partitions(), libMesh::MeshRefinement::refine_and_coarsen_elements(), libMesh::MeshRefinement::refine_elements(), libMesh::Partitioner::set_node_processor_ids(), libMesh::DofMap::set_nonlocal_dof_objects(), libMesh::LaplaceMeshSmoother::smooth(), libMesh::MeshBase::subdomain_ids(), libMesh::BoundaryInfo::sync(), libMesh::Parallel::sync_element_data_by_parent_id(), libMesh::MeshRefinement::test_level_one(), libMesh::MeshRefinement::test_unflagged(), libMesh::MeshTools::total_weight(), libMesh::CheckpointIO::write(), libMesh::XdrIO::write(), libMesh::UnstructuredMesh::write(), libMesh::LegacyXdrIO::write_mesh(), libMesh::System::write_SCALAR_dofs(), libMesh::XdrIO::write_serialized_bcs(), libMesh::System::write_serialized_blocked_dof_objects(), libMesh::XdrIO::write_serialized_connectivity(), libMesh::XdrIO::write_serialized_nodes(), libMesh::XdrIO::write_serialized_nodesets(), and libMesh::DivaIO::write_stream()\&.
.PP
.nf
87   { return _communicator; }
.fi
.SS "void libMesh::ReferenceCounter::disable_print_counter_info ()\fC [static]\fP, \fC [inherited]\fP"

.PP
Definition at line 106 of file reference_counter\&.C\&.
.PP
References libMesh::ReferenceCounter::_enable_print_counter\&.
.PP
.nf
107 {
108   _enable_print_counter = false;
109   return;
110 }
.fi
.SS "template<typename T> \fBEigenProblemType\fP \fBlibMesh::EigenSolver\fP< T >::eigen_problem_type () const\fC [inline]\fP"
Returns the type of the eigen problem\&. 
.PP
Definition at line 103 of file eigen_solver\&.h\&.
.PP
.nf
103 { return _eigen_problem_type;}
.fi
.SS "template<typename T> \fBEigenSolverType\fP \fBlibMesh::EigenSolver\fP< T >::eigen_solver_type () const\fC [inline]\fP"
Returns the type of eigensolver to use\&. 
.PP
Definition at line 98 of file eigen_solver\&.h\&.
.PP
.nf
98 { return _eigen_solver_type; }
.fi
.SS "void libMesh::ReferenceCounter::enable_print_counter_info ()\fC [static]\fP, \fC [inherited]\fP"
Methods to enable/disable the reference counter output from \fBprint_info()\fP 
.PP
Definition at line 100 of file reference_counter\&.C\&.
.PP
References libMesh::ReferenceCounter::_enable_print_counter\&.
.PP
.nf
101 {
102   _enable_print_counter = true;
103   return;
104 }
.fi
.SS "template<typename T> virtual std::pair<\fBReal\fP, \fBReal\fP> \fBlibMesh::EigenSolver\fP< T >::get_eigenpair (unsigned inti, \fBNumericVector\fP< T > &solution)\fC [pure virtual]\fP"
Returns the \fCith\fP eigenvalue (real and imaginary part), and copies the \\ ith eigen vector to the solution vector\&. 
.PP
Implemented in \fBlibMesh::SlepcEigenSolver< T >\fP\&.
.SS "template<typename T> virtual std::pair<\fBReal\fP, \fBReal\fP> \fBlibMesh::EigenSolver\fP< T >::get_eigenvalue (unsigned inti)\fC [pure virtual]\fP"
Returns the \fCith\fP eigenvalue (real and imaginary part)\&. Same as above function, except it does copy the eigenvector\&. 
.PP
Implemented in \fBlibMesh::SlepcEigenSolver< T >\fP\&.
.SS "std::string libMesh::ReferenceCounter::get_info ()\fC [static]\fP, \fC [inherited]\fP"
Gets a string containing the reference information\&. 
.PP
Definition at line 47 of file reference_counter\&.C\&.
.PP
References libMesh::ReferenceCounter::_counts, and libMesh::Quality::name()\&.
.PP
Referenced by libMesh::ReferenceCounter::print_info()\&.
.PP
.nf
48 {
49 #if defined(LIBMESH_ENABLE_REFERENCE_COUNTING) && defined(DEBUG)
50 
51   std::ostringstream oss;
52 
53   oss << '\n'
54       << " ---------------------------------------------------------------------------- \n"
55       << "| Reference count information                                                |\n"
56       << " ---------------------------------------------------------------------------- \n";
57 
58   for (Counts::iterator it = _counts\&.begin();
59        it != _counts\&.end(); ++it)
60     {
61       const std::string name(it->first);
62       const unsigned int creations    = it->second\&.first;
63       const unsigned int destructions = it->second\&.second;
64 
65       oss << "| " << name << " reference count information:\n"
66           << "|  Creations:    " << creations    << '\n'
67           << "|  Destructions: " << destructions << '\n';
68     }
69 
70   oss << " ---------------------------------------------------------------------------- \n";
71 
72   return oss\&.str();
73 
74 #else
75 
76   return "";
77 
78 #endif
79 }
.fi
.SS "void libMesh::ReferenceCounter::increment_constructor_count (const std::string &name)\fC [inline]\fP, \fC [protected]\fP, \fC [inherited]\fP"
Increments the construction counter\&. Should be called in the constructor of any derived class that will be reference counted\&. 
.PP
Definition at line 163 of file reference_counter\&.h\&.
.PP
References libMesh::ReferenceCounter::_counts, libMesh::Quality::name(), and libMesh::Threads::spin_mtx\&.
.PP
Referenced by libMesh::ReferenceCountedObject< RBParametrized >::ReferenceCountedObject()\&.
.PP
.nf
164 {
165   Threads::spin_mutex::scoped_lock lock(Threads::spin_mtx);
166   std::pair<unsigned int, unsigned int>& p = _counts[name];
167 
168   p\&.first++;
169 }
.fi
.SS "void libMesh::ReferenceCounter::increment_destructor_count (const std::string &name)\fC [inline]\fP, \fC [protected]\fP, \fC [inherited]\fP"
Increments the destruction counter\&. Should be called in the destructor of any derived class that will be reference counted\&. 
.PP
Definition at line 176 of file reference_counter\&.h\&.
.PP
References libMesh::ReferenceCounter::_counts, libMesh::Quality::name(), and libMesh::Threads::spin_mtx\&.
.PP
Referenced by libMesh::ReferenceCountedObject< RBParametrized >::~ReferenceCountedObject()\&.
.PP
.nf
177 {
178   Threads::spin_mutex::scoped_lock lock(Threads::spin_mtx);
179   std::pair<unsigned int, unsigned int>& p = _counts[name];
180 
181   p\&.second++;
182 }
.fi
.SS "template<typename T> virtual void \fBlibMesh::EigenSolver\fP< T >::init ()\fC [pure virtual]\fP"
Initialize data structures if not done so already\&. 
.PP
Implemented in \fBlibMesh::SlepcEigenSolver< T >\fP\&.
.SS "template<typename T> bool \fBlibMesh::EigenSolver\fP< T >::initialized () const\fC [inline]\fP"

.PP
\fBReturns:\fP
.RS 4
true if the data structures are initialized, false otherwise\&. 
.RE
.PP

.PP
Definition at line 82 of file eigen_solver\&.h\&.
.PP
.nf
82 { return _is_initialized; }
.fi
.SS "static unsigned int libMesh::ReferenceCounter::n_objects ()\fC [inline]\fP, \fC [static]\fP, \fC [inherited]\fP"
Prints the number of outstanding (created, but not yet destroyed) objects\&. 
.PP
Definition at line 79 of file reference_counter\&.h\&.
.PP
References libMesh::ReferenceCounter::_n_objects\&.
.PP
.nf
80   { return _n_objects; }
.fi
.SS "\fBprocessor_id_type\fP libMesh::ParallelObject::n_processors () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
\fBReturns:\fP
.RS 4
the number of processors in the group\&. 
.RE
.PP

.PP
Definition at line 92 of file parallel_object\&.h\&.
.PP
References libMesh::ParallelObject::_communicator, and libMesh::Parallel::Communicator::size()\&.
.PP
Referenced by libMesh::ParmetisPartitioner::_do_repartition(), libMesh::ParallelMesh::add_elem(), libMesh::ParallelMesh::add_node(), libMesh::LaplaceMeshSmoother::allgather_graph(), libMesh::ParmetisPartitioner::assign_partitioning(), libMesh::ParallelMesh::assign_unique_ids(), libMesh::AztecLinearSolver< T >::AztecLinearSolver(), libMesh::ParallelMesh::clear(), libMesh::Nemesis_IO_Helper::compute_border_node_ids(), libMesh::Nemesis_IO_Helper::construct_nemesis_filename(), libMesh::UnstructuredMesh::create_pid_mesh(), libMesh::DofMap::distribute_dofs(), libMesh::DofMap::distribute_local_dofs_node_major(), libMesh::DofMap::distribute_local_dofs_var_major(), libMesh::EnsightIO::EnsightIO(), libMesh::MeshBase::get_info(), libMesh::EquationSystems::init(), libMesh::SystemSubsetBySubdomain::init(), libMesh::ParmetisPartitioner::initialize(), libMesh::Nemesis_IO_Helper::initialize(), libMesh::MeshTools::libmesh_assert_valid_dof_ids(), libMesh::MeshTools::libmesh_assert_valid_procids< Elem >(), libMesh::MeshTools::libmesh_assert_valid_procids< Node >(), libMesh::MeshTools::libmesh_assert_valid_refinement_flags(), libMesh::DofMap::local_variable_indices(), libMesh::MeshBase::n_active_elem_on_proc(), libMesh::MeshBase::n_elem_on_proc(), libMesh::MeshBase::n_nodes_on_proc(), libMesh::Partitioner::partition(), libMesh::MeshBase::partition(), libMesh::Partitioner::partition_unpartitioned_elements(), libMesh::PetscLinearSolver< T >::PetscLinearSolver(), libMesh::System::point_gradient(), libMesh::System::point_hessian(), libMesh::System::point_value(), libMesh::MeshTools::processor_bounding_box(), libMesh::System::project_vector(), libMesh::Nemesis_IO::read(), libMesh::CheckpointIO::read(), libMesh::UnstructuredMesh::read(), libMesh::System::read_parallel_data(), libMesh::System::read_SCALAR_dofs(), libMesh::System::read_serialized_blocked_dof_objects(), libMesh::System::read_serialized_vector(), libMesh::Partitioner::repartition(), libMesh::Partitioner::set_node_processor_ids(), libMesh::DofMap::set_nonlocal_dof_objects(), libMesh::BoundaryInfo::sync(), libMesh::ParallelMesh::update_parallel_id_counts(), libMesh::CheckpointIO::write(), libMesh::GMVIO::write_binary(), libMesh::GMVIO::write_discontinuous_gmv(), libMesh::System::write_parallel_data(), libMesh::System::write_SCALAR_dofs(), libMesh::XdrIO::write_serialized_bcs(), libMesh::System::write_serialized_blocked_dof_objects(), libMesh::XdrIO::write_serialized_connectivity(), libMesh::XdrIO::write_serialized_nodes(), and libMesh::XdrIO::write_serialized_nodesets()\&.
.PP
.nf
93   { return libmesh_cast_int<processor_id_type>(_communicator\&.size()); }
.fi
.SS "template<typename T> \fBPositionOfSpectrum\fP \fBlibMesh::EigenSolver\fP< T >::position_of_spectrum () const\fC [inline]\fP"
Returns the position of the spectrum to compute\&. 
.PP
Definition at line 108 of file eigen_solver\&.h\&.
.PP
.nf
109   { return _position_of_spectrum;}
.fi
.SS "void libMesh::ReferenceCounter::print_info (std::ostream &out = \fC\fBlibMesh::out\fP\fP)\fC [static]\fP, \fC [inherited]\fP"
Prints the reference information, by default to \fC\fBlibMesh::out\fP\fP\&. 
.PP
Definition at line 88 of file reference_counter\&.C\&.
.PP
References libMesh::ReferenceCounter::_enable_print_counter, and libMesh::ReferenceCounter::get_info()\&.
.PP
.nf
89 {
90   if( _enable_print_counter ) out_stream << ReferenceCounter::get_info();
91 }
.fi
.SS "\fBprocessor_id_type\fP libMesh::ParallelObject::processor_id () const\fC [inline]\fP, \fC [inherited]\fP"

.PP
\fBReturns:\fP
.RS 4
the rank of this processor in the group\&. 
.RE
.PP

.PP
Definition at line 98 of file parallel_object\&.h\&.
.PP
References libMesh::ParallelObject::_communicator, and libMesh::Parallel::Communicator::rank()\&.
.PP
Referenced by libMesh::MetisPartitioner::_do_partition(), libMesh::EquationSystems::_read_impl(), libMesh::SerialMesh::active_local_elements_begin(), libMesh::ParallelMesh::active_local_elements_begin(), libMesh::SerialMesh::active_local_elements_end(), libMesh::ParallelMesh::active_local_elements_end(), libMesh::SerialMesh::active_local_subdomain_elements_begin(), libMesh::ParallelMesh::active_local_subdomain_elements_begin(), libMesh::SerialMesh::active_local_subdomain_elements_end(), libMesh::ParallelMesh::active_local_subdomain_elements_end(), libMesh::SerialMesh::active_not_local_elements_begin(), libMesh::ParallelMesh::active_not_local_elements_begin(), libMesh::SerialMesh::active_not_local_elements_end(), libMesh::ParallelMesh::active_not_local_elements_end(), libMesh::ParallelMesh::add_elem(), libMesh::DofMap::add_neighbors_to_send_list(), libMesh::ParallelMesh::add_node(), libMesh::UnstructuredMesh::all_second_order(), libMesh::ParmetisPartitioner::assign_partitioning(), libMesh::ParallelMesh::assign_unique_ids(), libMesh::EquationSystems::build_discontinuous_solution_vector(), libMesh::Nemesis_IO_Helper::build_element_and_node_maps(), libMesh::ParmetisPartitioner::build_graph(), libMesh::InfElemBuilder::build_inf_elem(), libMesh::DofMap::build_sparsity(), libMesh::ParallelMesh::clear(), libMesh::ExodusII_IO_Helper::close(), libMesh::Nemesis_IO_Helper::compute_border_node_ids(), libMesh::Nemesis_IO_Helper::compute_communication_map_parameters(), libMesh::Nemesis_IO_Helper::compute_internal_and_border_elems_and_internal_nodes(), libMesh::Nemesis_IO_Helper::compute_node_communication_maps(), libMesh::Nemesis_IO_Helper::compute_num_global_elem_blocks(), libMesh::Nemesis_IO_Helper::compute_num_global_nodesets(), libMesh::Nemesis_IO_Helper::compute_num_global_sidesets(), libMesh::Nemesis_IO_Helper::construct_nemesis_filename(), libMesh::ExodusII_IO_Helper::create(), libMesh::DofMap::distribute_dofs(), libMesh::DofMap::distribute_local_dofs_node_major(), libMesh::DofMap::distribute_local_dofs_var_major(), libMesh::DofMap::end_dof(), libMesh::DofMap::end_old_dof(), libMesh::EnsightIO::EnsightIO(), libMesh::UnstructuredMesh::find_neighbors(), libMesh::DofMap::first_dof(), libMesh::DofMap::first_old_dof(), libMesh::Nemesis_IO_Helper::get_cmap_params(), libMesh::Nemesis_IO_Helper::get_eb_info_global(), libMesh::Nemesis_IO_Helper::get_elem_cmap(), libMesh::Nemesis_IO_Helper::get_elem_map(), libMesh::MeshBase::get_info(), libMesh::Nemesis_IO_Helper::get_init_global(), libMesh::Nemesis_IO_Helper::get_init_info(), libMesh::Nemesis_IO_Helper::get_loadbal_param(), libMesh::Nemesis_IO_Helper::get_node_cmap(), libMesh::Nemesis_IO_Helper::get_node_map(), libMesh::Nemesis_IO_Helper::get_ns_param_global(), libMesh::Nemesis_IO_Helper::get_ss_param_global(), libMesh::MeshFunction::gradient(), libMesh::MeshFunction::hessian(), libMesh::SystemSubsetBySubdomain::init(), libMesh::ParmetisPartitioner::initialize(), libMesh::ExodusII_IO_Helper::initialize(), libMesh::ExodusII_IO_Helper::initialize_element_variables(), libMesh::ExodusII_IO_Helper::initialize_global_variables(), libMesh::ExodusII_IO_Helper::initialize_nodal_variables(), libMesh::SparsityPattern::Build::join(), libMesh::DofMap::last_dof(), libMesh::MeshTools::libmesh_assert_valid_procids< Elem >(), libMesh::MeshTools::libmesh_assert_valid_procids< Node >(), libMesh::SerialMesh::local_elements_begin(), libMesh::ParallelMesh::local_elements_begin(), libMesh::SerialMesh::local_elements_end(), libMesh::ParallelMesh::local_elements_end(), libMesh::SerialMesh::local_level_elements_begin(), libMesh::ParallelMesh::local_level_elements_begin(), libMesh::SerialMesh::local_level_elements_end(), libMesh::ParallelMesh::local_level_elements_end(), libMesh::SerialMesh::local_nodes_begin(), libMesh::ParallelMesh::local_nodes_begin(), libMesh::SerialMesh::local_nodes_end(), libMesh::ParallelMesh::local_nodes_end(), libMesh::SerialMesh::local_not_level_elements_begin(), libMesh::ParallelMesh::local_not_level_elements_begin(), libMesh::SerialMesh::local_not_level_elements_end(), libMesh::ParallelMesh::local_not_level_elements_end(), libMesh::DofMap::local_variable_indices(), libMesh::MeshRefinement::make_coarsening_compatible(), libMesh::MeshBase::n_active_local_elem(), libMesh::BoundaryInfo::n_boundary_conds(), libMesh::BoundaryInfo::n_edge_conds(), libMesh::DofMap::n_local_dofs(), libMesh::System::n_local_dofs(), libMesh::MeshBase::n_local_elem(), libMesh::MeshBase::n_local_nodes(), libMesh::BoundaryInfo::n_nodeset_conds(), libMesh::SerialMesh::not_local_elements_begin(), libMesh::ParallelMesh::not_local_elements_begin(), libMesh::SerialMesh::not_local_elements_end(), libMesh::ParallelMesh::not_local_elements_end(), libMesh::WeightedPatchRecoveryErrorEstimator::EstimateError::operator()(), libMesh::SparsityPattern::Build::operator()(), libMesh::PatchRecoveryErrorEstimator::EstimateError::operator()(), libMesh::MeshFunction::operator()(), libMesh::ParallelMesh::ParallelMesh(), libMesh::System::point_gradient(), libMesh::System::point_hessian(), libMesh::System::point_value(), libMesh::System::project_vector(), libMesh::Nemesis_IO_Helper::put_cmap_params(), libMesh::Nemesis_IO_Helper::put_elem_cmap(), libMesh::Nemesis_IO_Helper::put_elem_map(), libMesh::Nemesis_IO_Helper::put_loadbal_param(), libMesh::Nemesis_IO_Helper::put_node_cmap(), libMesh::Nemesis_IO_Helper::put_node_map(), libMesh::Nemesis_IO::read(), libMesh::CheckpointIO::read(), libMesh::XdrIO::read(), libMesh::UnstructuredMesh::read(), libMesh::CheckpointIO::read_connectivity(), libMesh::ExodusII_IO_Helper::read_elem_num_map(), libMesh::System::read_header(), libMesh::System::read_legacy_data(), libMesh::ExodusII_IO_Helper::read_node_num_map(), libMesh::System::read_parallel_data(), libMesh::System::read_SCALAR_dofs(), libMesh::XdrIO::read_serialized_bc_names(), libMesh::XdrIO::read_serialized_bcs(), libMesh::System::read_serialized_blocked_dof_objects(), libMesh::XdrIO::read_serialized_connectivity(), libMesh::System::read_serialized_data(), libMesh::XdrIO::read_serialized_nodes(), libMesh::XdrIO::read_serialized_nodesets(), libMesh::XdrIO::read_serialized_subdomain_names(), libMesh::System::read_serialized_vector(), libMesh::System::read_serialized_vectors(), libMesh::MeshData::read_xdr(), libMesh::Partitioner::set_node_processor_ids(), libMesh::DofMap::set_nonlocal_dof_objects(), libMesh::LaplaceMeshSmoother::smooth(), libMesh::BoundaryInfo::sync(), libMesh::MeshTools::total_weight(), libMesh::ParallelMesh::update_parallel_id_counts(), libMesh::MeshTools::weight(), libMesh::ExodusII_IO::write(), libMesh::CheckpointIO::write(), libMesh::XdrIO::write(), libMesh::UnstructuredMesh::write(), libMesh::EquationSystems::write(), libMesh::GMVIO::write_discontinuous_gmv(), libMesh::ExodusII_IO::write_element_data(), libMesh::ExodusII_IO_Helper::write_element_values(), libMesh::ExodusII_IO_Helper::write_elements(), libMesh::ExodusII_IO::write_global_data(), libMesh::ExodusII_IO_Helper::write_global_values(), libMesh::System::write_header(), libMesh::ExodusII_IO::write_information_records(), libMesh::ExodusII_IO_Helper::write_information_records(), libMesh::ExodusII_IO_Helper::write_nodal_coordinates(), libMesh::UCDIO::write_nodal_data(), libMesh::ExodusII_IO::write_nodal_data(), libMesh::ExodusII_IO::write_nodal_data_discontinuous(), libMesh::ExodusII_IO_Helper::write_nodal_values(), libMesh::ExodusII_IO_Helper::write_nodesets(), libMesh::Nemesis_IO_Helper::write_nodesets(), libMesh::System::write_parallel_data(), libMesh::System::write_SCALAR_dofs(), libMesh::XdrIO::write_serialized_bc_names(), libMesh::XdrIO::write_serialized_bcs(), libMesh::System::write_serialized_blocked_dof_objects(), libMesh::XdrIO::write_serialized_connectivity(), libMesh::System::write_serialized_data(), libMesh::XdrIO::write_serialized_nodes(), libMesh::XdrIO::write_serialized_nodesets(), libMesh::XdrIO::write_serialized_subdomain_names(), libMesh::System::write_serialized_vector(), libMesh::System::write_serialized_vectors(), libMesh::ExodusII_IO_Helper::write_sidesets(), libMesh::Nemesis_IO_Helper::write_sidesets(), libMesh::ExodusII_IO::write_timestep(), and libMesh::ExodusII_IO_Helper::write_timestep()\&.
.PP
.nf
99   { return libmesh_cast_int<processor_id_type>(_communicator\&.rank()); }
.fi
.SS "template<typename T> void \fBlibMesh::EigenSolver\fP< T >::set_eigenproblem_type (\fBEigenProblemType\fPept)\fC [inline]\fP"
Sets the type of the eigenproblem\&. 
.PP
Definition at line 120 of file eigen_solver\&.h\&.
.PP
.nf
121   {_eigen_problem_type = ept;}
.fi
.SS "template<typename T> void \fBlibMesh::EigenSolver\fP< T >::set_eigensolver_type (const \fBEigenSolverType\fPest)\fC [inline]\fP"
Sets the type of eigensolver to use\&. 
.PP
Definition at line 114 of file eigen_solver\&.h\&.
.PP
.nf
115   { _eigen_solver_type = est; }
.fi
.SS "template<typename T> void \fBlibMesh::EigenSolver\fP< T >::set_position_of_spectrum (\fBPositionOfSpectrum\fPpos)\fC [inline]\fP"
Sets the position of the spectrum\&. 
.PP
Definition at line 126 of file eigen_solver\&.h\&.
.PP
.nf
127   {_position_of_spectrum= pos;}
.fi
.SS "template<typename T> virtual std::pair<unsigned int, unsigned int> \fBlibMesh::EigenSolver\fP< T >::solve_generalized (\fBSparseMatrix\fP< T > &matrix_A, \fBSparseMatrix\fP< T > &matrix_B, intnev, intncv, const doubletol, const unsigned intm_its)\fC [pure virtual]\fP"
Solves the generalized eigen problem when both matrix_A and matrix_B are of type \fC\fBSparseMatrix\fP\fP and returns the number of converged eigenpairs and the number of iterations\&. 
.PP
Implemented in \fBlibMesh::SlepcEigenSolver< T >\fP\&.
.SS "template<typename T> virtual std::pair<unsigned int, unsigned int> \fBlibMesh::EigenSolver\fP< T >::solve_generalized (\fBShellMatrix\fP< T > &matrix_A, \fBSparseMatrix\fP< T > &matrix_B, intnev, intncv, const doubletol, const unsigned intm_its)\fC [pure virtual]\fP"
Solves the generalized eigen problem when matrix_A is a \fBShellMatrix\fP and matrix_B is a \fBSparseMatrix\fP\&. 
.PP
Implemented in \fBlibMesh::SlepcEigenSolver< T >\fP\&.
.SS "template<typename T> virtual std::pair<unsigned int, unsigned int> \fBlibMesh::EigenSolver\fP< T >::solve_generalized (\fBSparseMatrix\fP< T > &matrix_A, \fBShellMatrix\fP< T > &matrix_B, intnev, intncv, const doubletol, const unsigned intm_its)\fC [pure virtual]\fP"
Solves the generalized eigen problem when matrix_A is a \fBSparseMatrix\fP and matrix_B is a \fBShellMatrix\fP\&. 
.PP
Implemented in \fBlibMesh::SlepcEigenSolver< T >\fP\&.
.SS "template<typename T> virtual std::pair<unsigned int, unsigned int> \fBlibMesh::EigenSolver\fP< T >::solve_generalized (\fBShellMatrix\fP< T > &matrix_A, \fBShellMatrix\fP< T > &matrix_B, intnev, intncv, const doubletol, const unsigned intm_its)\fC [pure virtual]\fP"
Solves the generalized eigen problem when both matrix_A and matrix_B are of type \fBShellMatrix\fP\&. 
.PP
Implemented in \fBlibMesh::SlepcEigenSolver< T >\fP\&.
.SS "template<typename T> virtual std::pair<unsigned int, unsigned int> \fBlibMesh::EigenSolver\fP< T >::solve_standard (\fBSparseMatrix\fP< T > &matrix_A, intnev, intncv, const doubletol, const unsigned intm_its)\fC [pure virtual]\fP"
Solves the standard eigen problem when matrix_A is a \fC\fBSparseMatrix\fP\fP, and returns the number of converged eigenpairs and the number of iterations\&. 
.PP
Implemented in \fBlibMesh::SlepcEigenSolver< T >\fP\&.
.SS "template<typename T> virtual std::pair<unsigned int, unsigned int> \fBlibMesh::EigenSolver\fP< T >::solve_standard (\fBShellMatrix\fP< T > &matrix_A, intnev, intncv, const doubletol, const unsigned intm_its)\fC [pure virtual]\fP"
Solves the standard eigen problem when matrix_A is a \fC\fBShellMatrix\fP\fP, and returns the number of converged eigenpairs and the number of iterations\&. 
.PP
Implemented in \fBlibMesh::SlepcEigenSolver< T >\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "const \fBParallel::Communicator\fP& libMesh::ParallelObject::_communicator\fC [protected]\fP, \fC [inherited]\fP"

.PP
Definition at line 104 of file parallel_object\&.h\&.
.PP
Referenced by libMesh::EquationSystems::build_solution_vector(), libMesh::ParallelObject::comm(), libMesh::EquationSystems::get_solution(), libMesh::ParallelObject::n_processors(), libMesh::ParallelObject::operator=(), and libMesh::ParallelObject::processor_id()\&.
.SS "\fBReferenceCounter::Counts\fP libMesh::ReferenceCounter::_counts\fC [static]\fP, \fC [protected]\fP, \fC [inherited]\fP"
Actually holds the data\&. 
.PP
Definition at line 118 of file reference_counter\&.h\&.
.PP
Referenced by libMesh::ReferenceCounter::get_info(), libMesh::ReferenceCounter::increment_constructor_count(), and libMesh::ReferenceCounter::increment_destructor_count()\&.
.SS "template<typename T> \fBEigenProblemType\fP \fBlibMesh::EigenSolver\fP< T >::_eigen_problem_type\fC [protected]\fP"
Enum stating which type of eigen problem we deal with\&. 
.PP
Definition at line 227 of file eigen_solver\&.h\&.
.PP
Referenced by libMesh::EigenSolver< Number >::eigen_problem_type(), libMesh::EigenSolver< Number >::set_eigenproblem_type(), and libMesh::SlepcEigenSolver< T >::SlepcEigenSolver()\&.
.SS "template<typename T> \fBEigenSolverType\fP \fBlibMesh::EigenSolver\fP< T >::_eigen_solver_type\fC [protected]\fP"
Enum stating which type of eigensolver to use\&. 
.PP
Definition at line 222 of file eigen_solver\&.h\&.
.PP
Referenced by libMesh::EigenSolver< Number >::eigen_solver_type(), libMesh::EigenSolver< Number >::set_eigensolver_type(), and libMesh::SlepcEigenSolver< T >::SlepcEigenSolver()\&.
.SS "bool libMesh::ReferenceCounter::_enable_print_counter = true\fC [static]\fP, \fC [protected]\fP, \fC [inherited]\fP"
Flag to control whether reference count information is printed when print_info is called\&. 
.PP
Definition at line 137 of file reference_counter\&.h\&.
.PP
Referenced by libMesh::ReferenceCounter::disable_print_counter_info(), libMesh::ReferenceCounter::enable_print_counter_info(), and libMesh::ReferenceCounter::print_info()\&.
.SS "template<typename T> bool \fBlibMesh::EigenSolver\fP< T >::_is_initialized\fC [protected]\fP"
Flag indicating if the data structures have been initialized\&. 
.PP
Definition at line 237 of file eigen_solver\&.h\&.
.PP
Referenced by libMesh::EigenSolver< Number >::initialized()\&.
.SS "\fBThreads::spin_mutex\fP libMesh::ReferenceCounter::_mutex\fC [static]\fP, \fC [protected]\fP, \fC [inherited]\fP"
Mutual exclusion object to enable thread-safe reference counting\&. 
.PP
Definition at line 131 of file reference_counter\&.h\&.
.SS "\fBThreads::atomic\fP< unsigned int > libMesh::ReferenceCounter::_n_objects\fC [static]\fP, \fC [protected]\fP, \fC [inherited]\fP"
The number of objects\&. Print the reference count information when the number returns to 0\&. 
.PP
Definition at line 126 of file reference_counter\&.h\&.
.PP
Referenced by libMesh::ReferenceCounter::n_objects(), libMesh::ReferenceCounter::ReferenceCounter(), and libMesh::ReferenceCounter::~ReferenceCounter()\&.
.SS "template<typename T> \fBPositionOfSpectrum\fP \fBlibMesh::EigenSolver\fP< T >::_position_of_spectrum\fC [protected]\fP"
Enum stating where to evaluate the spectrum\&. 
.PP
Definition at line 232 of file eigen_solver\&.h\&.
.PP
Referenced by libMesh::EigenSolver< Number >::position_of_spectrum(), and libMesh::EigenSolver< Number >::set_position_of_spectrum()\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for libMesh from the source code\&.
